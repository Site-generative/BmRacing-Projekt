[1mdiff --git a/android/app/src/debug/AndroidManifest.xml b/android/app/src/debug/AndroidManifest.xml[m
[1mindex 5ce8150..8a74484 100644[m
[1m--- a/android/app/src/debug/AndroidManifest.xml[m
[1m+++ b/android/app/src/debug/AndroidManifest.xml[m
[36m@@ -15,6 +15,4 @@[m
     <uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/>[m
     <uses-permission android:name="android.permission.INTERNET"/>[m
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>[m
[31m-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />[m
[31m-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />[m
 </manifest>[m
[1mdiff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml[m
[1mindex ac63904..7f95512 100644[m
[1m--- a/android/app/src/main/AndroidManifest.xml[m
[1m+++ b/android/app/src/main/AndroidManifest.xml[m
[36m@@ -15,9 +15,7 @@[m
     <application[m
         android:label="Laplink"[m
         android:name="${applicationName}"[m
[31m-        android:icon="@mipmap/ic_launcher"[m
[31m-        >[m
[31m-        [m
[32m+[m[32m        android:icon="@mipmap/ic_launcher">[m
 [m
         <service[m
             android:name="com.pravera.flutter_background_service.FlutterBackgroundService"[m
[1mdiff --git a/android/app/src/profile/AndroidManifest.xml b/android/app/src/profile/AndroidManifest.xml[m
[1mindex 5ce8150..8a74484 100644[m
[1m--- a/android/app/src/profile/AndroidManifest.xml[m
[1m+++ b/android/app/src/profile/AndroidManifest.xml[m
[36m@@ -15,6 +15,4 @@[m
     <uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/>[m
     <uses-permission android:name="android.permission.INTERNET"/>[m
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>[m
[31m-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />[m
[31m-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />[m
 </manifest>[m
[1mdiff --git a/assets/icon/icon_removed_background.png b/assets/icon/icon_removed_background.png[m
[1mdeleted file mode 100644[m
[1mindex 08d0852..0000000[m
Binary files a/assets/icon/icon_removed_background.png and /dev/null differ
[1mdiff --git a/assets/loading.json b/assets/loading.json[m
[1mdeleted file mode 100644[m
[1mindex 5785529..0000000[m
[1m--- a/assets/loading.json[m
[1m+++ /dev/null[m
[36m@@ -1,444 +0,0 @@[m
[31m-{[m
[31m-  "v": "4.6.8",[m
[31m-  "fr": 60,[m
[31m-  "ip": 0,[m
[31m-  "op": 106,[m
[31m-  "w": 500,[m
[31m-  "h": 500,[m
[31m-  "nm": "Comp 1",[m
[31m-  "ddd": 0,[m
[31m-  "assets": [],[m
[31m-  "layers": [[m
[31m-    {[m
[31m-      "ddd": 0,[m
[31m-      "ind": 2,[m
[31m-      "ty": 4,[m
[31m-      "nm": "Shape Layer 5",[m
[31m-      "ks": {[m
[31m-        "o": { "a": 0, "k": 100 },[m
[31m-        "r": {[m
[31m-          "a": 1,[m
[31m-          "k": [[m
[31m-            {[m
[31m-              "i": { "x": [0.667], "y": [1] },[m
[31m-              "o": { "x": [0.333], "y": [0] },[m
[31m-              "n": ["0p667_1_0p333_0"],[m
[31m-              "t": 20,[m
[31m-              "s": [0],[m
[31m-              "e": [360][m
[31m-            },[m
[31m-            { "t": 110 }[m
[31m-          ][m
[31m-        },[m
[31m-        "p": { "a": 0, "k": [251, 250, 0] },[m
[31m-        "a": { "a": 0, "k": [0, 0, 0] },[m
[31m-        "s": { "a": 0, "k": [100, 100, 100] }[m
[31m-      },[m
[31m-      "ao": 0,[m
[31m-      "shapes": [[m
[31m-        {[m
[31m-          "ty": "gr",[m
[31m-          "it": [[m
[31m-            {[m
[31m-              "d": 1,[m
[31m-              "ty": "el",[m
[31m-              "s": { "a": 0, "k": [10, 10] },[m
[31m-              "p": { "a": 0, "k": [0, -100] },[m
[31m-              "nm": "Ellipse Path 1",[m
[31m-              "mn": "ADBE Vector Shape - Ellipse"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "st",[m
[31m-              "c": { "a": 0, "k": [0.26, 0, 0, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "w": { "a": 0, "k": 0 },[m
[31m-              "lc": 1,[m
[31m-              "lj": 1,[m
[31m-              "ml": 4,[m
[31m-              "nm": "Stroke 1",[m
[31m-              "mn": "ADBE Vector Graphic - Stroke"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "fl",[m
[31m-              "c": { "a": 0, "k": [0.8627, 0.149, 0.149, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "r": 1,[m
[31m-              "nm": "Fill 1",[m
[31m-              "mn": "ADBE Vector Graphic - Fill"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "tr",[m
[31m-              "p": { "a": 0, "k": [0, 0], "ix": 2 },[m
[31m-              "a": { "a": 0, "k": [0, 0], "ix": 1 },[m
[31m-              "s": { "a": 0, "k": [100, 100], "ix": 3 },[m
[31m-              "r": { "a": 0, "k": 0, "ix": 6 },[m
[31m-              "o": { "a": 0, "k": 100, "ix": 7 },[m
[31m-              "sk": { "a": 0, "k": 0, "ix": 4 },[m
[31m-              "sa": { "a": 0, "k": 0, "ix": 5 },[m
[31m-              "nm": "Transform"[m
[31m-            }[m
[31m-          ],[m
[31m-          "nm": "Ellipse 1",[m
[31m-          "np": 3,[m
[31m-          "cix": 2,[m
[31m-          "ix": 1,[m
[31m-          "mn": "ADBE Vector Group"[m
[31m-        }[m
[31m-      ],[m
[31m-      "ip": 20,[m
[31m-      "op": 620,[m
[31m-      "st": 20,[m
[31m-      "bm": 0,[m
[31m-      "sr": 1[m
[31m-    },[m
[31m-    {[m
[31m-      "ddd": 0,[m
[31m-      "ind": 3,[m
[31m-      "ty": 4,[m
[31m-      "nm": "Shape Layer 4",[m
[31m-      "ks": {[m
[31m-        "o": { "a": 0, "k": 100 },[m
[31m-        "r": {[m
[31m-          "a": 1,[m
[31m-          "k": [[m
[31m-            {[m
[31m-              "i": { "x": [0.667], "y": [1] },[m
[31m-              "o": { "x": [0.333], "y": [0] },[m
[31m-              "n": ["0p667_1_0p333_0"],[m
[31m-              "t": 15,[m
[31m-              "s": [0],[m
[31m-              "e": [360][m
[31m-            },[m
[31m-            { "t": 105 }[m
[31m-          ][m
[31m-        },[m
[31m-        "p": { "a": 0, "k": [251, 250, 0] },[m
[31m-        "a": { "a": 0, "k": [0, 0, 0] },[m
[31m-        "s": { "a": 0, "k": [100, 100, 100] }[m
[31m-      },[m
[31m-      "ao": 0,[m
[31m-      "shapes": [[m
[31m-        {[m
[31m-          "ty": "gr",[m
[31m-          "it": [[m
[31m-            {[m
[31m-              "d": 1,[m
[31m-              "ty": "el",[m
[31m-              "s": { "a": 0, "k": [20, 20] },[m
[31m-              "p": { "a": 0, "k": [0, -100] },[m
[31m-              "nm": "Ellipse Path 1",[m
[31m-              "mn": "ADBE Vector Shape - Ellipse"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "st",[m
[31m-              "c": { "a": 0, "k": [0.26, 0, 0, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "w": { "a": 0, "k": 0 },[m
[31m-              "lc": 1,[m
[31m-              "lj": 1,[m
[31m-              "ml": 4,[m
[31m-              "nm": "Stroke 1",[m
[31m-              "mn": "ADBE Vector Graphic - Stroke"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "fl",[m
[31m-              "c": { "a": 0, "k": [0.8627, 0.149, 0.149, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "r": 1,[m
[31m-              "nm": "Fill 1",[m
[31m-              "mn": "ADBE Vector Graphic - Fill"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "tr",[m
[31m-              "p": { "a": 0, "k": [0, 0], "ix": 2 },[m
[31m-              "a": { "a": 0, "k": [0, 0], "ix": 1 },[m
[31m-              "s": { "a": 0, "k": [100, 100], "ix": 3 },[m
[31m-              "r": { "a": 0, "k": 0, "ix": 6 },[m
[31m-              "o": { "a": 0, "k": 100, "ix": 7 },[m
[31m-              "sk": { "a": 0, "k": 0, "ix": 4 },[m
[31m-              "sa": { "a": 0, "k": 0, "ix": 5 },[m
[31m-              "nm": "Transform"[m
[31m-            }[m
[31m-          ],[m
[31m-          "nm": "Ellipse 1",[m
[31m-          "np": 3,[m
[31m-          "cix": 2,[m
[31m-          "ix": 1,[m
[31m-          "mn": "ADBE Vector Group"[m
[31m-        }[m
[31m-      ],[m
[31m-      "ip": 15,[m
[31m-      "op": 615,[m
[31m-      "st": 15,[m
[31m-      "bm": 0,[m
[31m-      "sr": 1[m
[31m-    },[m
[31m-    {[m
[31m-      "ddd": 0,[m
[31m-      "ind": 4,[m
[31m-      "ty": 4,[m
[31m-      "nm": "Shape Layer 3",[m
[31m-      "ks": {[m
[31m-        "o": { "a": 0, "k": 100 },[m
[31m-        "r": {[m
[31m-          "a": 1,[m
[31m-          "k": [[m
[31m-            {[m
[31m-              "i": { "x": [0.667], "y": [1] },[m
[31m-              "o": { "x": [0.333], "y": [0] },[m
[31m-              "n": ["0p667_1_0p333_0"],[m
[31m-              "t": 10,[m
[31m-              "s": [0],[m
[31m-              "e": [360][m
[31m-            },[m
[31m-            { "t": 100 }[m
[31m-          ][m
[31m-        },[m
[31m-        "p": { "a": 0, "k": [251, 250, 0] },[m
[31m-        "a": { "a": 0, "k": [0, 0, 0] },[m
[31m-        "s": { "a": 0, "k": [100, 100, 100] }[m
[31m-      },[m
[31m-      "ao": 0,[m
[31m-      "shapes": [[m
[31m-        {[m
[31m-          "ty": "gr",[m
[31m-          "it": [[m
[31m-            {[m
[31m-              "d": 1,[m
[31m-              "ty": "el",[m
[31m-              "s": { "a": 0, "k": [30, 30] },[m
[31m-              "p": { "a": 0, "k": [0, -100] },[m
[31m-              "nm": "Ellipse Path 1",[m
[31m-              "mn": "ADBE Vector Shape - Ellipse"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "st",[m
[31m-              "c": { "a": 0, "k": [0.26, 0, 0, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "w": { "a": 0, "k": 0 },[m
[31m-              "lc": 1,[m
[31m-              "lj": 1,[m
[31m-              "ml": 4,[m
[31m-              "nm": "Stroke 1",[m
[31m-              "mn": "ADBE Vector Graphic - Stroke"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "fl",[m
[31m-              "c": { "a": 0, "k": [0.8627, 0.149, 0.149, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "r": 1,[m
[31m-              "nm": "Fill 1",[m
[31m-              "mn": "ADBE Vector Graphic - Fill"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "tr",[m
[31m-              "p": { "a": 0, "k": [0, 0], "ix": 2 },[m
[31m-              "a": { "a": 0, "k": [0, 0], "ix": 1 },[m
[31m-              "s": { "a": 0, "k": [100, 100], "ix": 3 },[m
[31m-              "r": { "a": 0, "k": 0, "ix": 6 },[m
[31m-              "o": { "a": 0, "k": 100, "ix": 7 },[m
[31m-              "sk": { "a": 0, "k": 0, "ix": 4 },[m
[31m-              "sa": { "a": 0, "k": 0, "ix": 5 },[m
[31m-              "nm": "Transform"[m
[31m-            }[m
[31m-          ],[m
[31m-          "nm": "Ellipse 1",[m
[31m-          "np": 3,[m
[31m-          "cix": 2,[m
[31m-          "ix": 1,[m
[31m-          "mn": "ADBE Vector Group"[m
[31m-        }[m
[31m-      ],[m
[31m-      "ip": 10,[m
[31m-      "op": 610,[m
[31m-      "st": 10,[m
[31m-      "bm": 0,[m
[31m-      "sr": 1[m
[31m-    },[m
[31m-    {[m
[31m-      "ddd": 0,[m
[31m-      "ind": 5,[m
[31m-      "ty": 4,[m
[31m-      "nm": "Shape Layer 2",[m
[31m-      "ks": {[m
[31m-        "o": { "a": 0, "k": 100 },[m
[31m-        "r": {[m
[31m-          "a": 1,[m
[31m-          "k": [[m
[31m-            {[m
[31m-              "i": { "x": [0.667], "y": [1] },[m
[31m-              "o": { "x": [0.333], "y": [0] },[m
[31m-              "n": ["0p667_1_0p333_0"],[m
[31m-              "t": 5,[m
[31m-              "s": [0],[m
[31m-              "e": [360][m
[31m-            },[m
[31m-            { "t": 95 }[m
[31m-          ][m
[31m-        },[m
[31m-        "p": { "a": 0, "k": [251, 250, 0] },[m
[31m-        "a": { "a": 0, "k": [0, 0, 0] },[m
[31m-        "s": { "a": 0, "k": [100, 100, 100] }[m
[31m-      },[m
[31m-      "ao": 0,[m
[31m-      "shapes": [[m
[31m-        {[m
[31m-          "ty": "gr",[m
[31m-          "it": [[m
[31m-            {[m
[31m-              "d": 1,[m
[31m-              "ty": "el",[m
[31m-              "s": { "a": 0, "k": [40, 40] },[m
[31m-              "p": { "a": 0, "k": [0, -100] },[m
[31m-              "nm": "Ellipse Path 1",[m
[31m-              "mn": "ADBE Vector Shape - Ellipse"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "st",[m
[31m-              "c": { "a": 0, "k": [0.26, 0, 0, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "w": { "a": 0, "k": 0 },[m
[31m-              "lc": 1,[m
[31m-              "lj": 1,[m
[31m-              "ml": 4,[m
[31m-              "nm": "Stroke 1",[m
[31m-              "mn": "ADBE Vector Graphic - Stroke"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "fl",[m
[31m-              "c": { "a": 0, "k": [0.8627, 0.149, 0.149, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "r": 1,[m
[31m-              "nm": "Fill 1",[m
[31m-              "mn": "ADBE Vector Graphic - Fill"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "tr",[m
[31m-              "p": { "a": 0, "k": [0, 0], "ix": 2 },[m
[31m-              "a": { "a": 0, "k": [0, 0], "ix": 1 },[m
[31m-              "s": { "a": 0, "k": [100, 100], "ix": 3 },[m
[31m-              "r": { "a": 0, "k": 0, "ix": 6 },[m
[31m-              "o": { "a": 0, "k": 100, "ix": 7 },[m
[31m-              "sk": { "a": 0, "k": 0, "ix": 4 },[m
[31m-              "sa": { "a": 0, "k": 0, "ix": 5 },[m
[31m-              "nm": "Transform"[m
[31m-            }[m
[31m-          ],[m
[31m-          "nm": "Ellipse 1",[m
[31m-          "np": 3,[m
[31m-          "cix": 2,[m
[31m-          "ix": 1,[m
[31m-          "mn": "ADBE Vector Group"[m
[31m-        }[m
[31m-      ],[m
[31m-      "ip": 5,[m
[31m-      "op": 605,[m
[31m-      "st": 5,[m
[31m-      "bm": 0,[m
[31m-      "sr": 1[m
[31m-    },[m
[31m-    {[m
[31m-      "ddd": 0,[m
[31m-      "ind": 6,[m
[31m-      "ty": 4,[m
[31m-      "nm": "Shape Layer 1",[m
[31m-      "ks": {[m
[31m-        "o": { "a": 0, "k": 100 },[m
[31m-        "r": {[m
[31m-          "a": 1,[m
[31m-          "k": [[m
[31m-            {[m
[31m-              "i": { "x": [0.667], "y": [1] },[m
[31m-              "o": { "x": [0.333], "y": [0] },[m
[31m-              "n": ["0p667_1_0p333_0"],[m
[31m-              "t": 0,[m
[31m-              "s": [0],[m
[31m-              "e": [360][m
[31m-            },[m
[31m-            { "t": 90 }[m
[31m-          ][m
[31m-        },[m
[31m-        "p": { "a": 0, "k": [250, 250, 0] },[m
[31m-        "a": { "a": 0, "k": [0, 0, 0] },[m
[31m-        "s": { "a": 0, "k": [100, 100, 100] }[m
[31m-      },[m
[31m-      "ao": 0,[m
[31m-      "shapes": [[m
[31m-        {[m
[31m-          "ty": "gr",[m
[31m-          "it": [[m
[31m-            {[m
[31m-              "d": 1,[m
[31m-              "ty": "el",[m
[31m-              "s": {[m
[31m-                "a": 1,[m
[31m-                "k": [[m
[31m-                  {[m
[31m-                    "i": { "x": [0.667, 0.667], "y": [1, 1] },[m
[31m-                    "o": { "x": [0.333, 0.333], "y": [0, 0] },[m
[31m-                    "n": ["0p667_1_0p333_0", "0p667_1_0p333_0"],[m
[31m-                    "t": 0,[m
[31m-                    "s": [50, 50],[m
[31m-                    "e": [40, 40][m
[31m-                  },[m
[31m-                  {[m
[31m-                    "i": { "x": [0.667, 0.667], "y": [1, 1] },[m
[31m-                    "o": { "x": [0.333, 0.333], "y": [0, 0] },[m
[31m-                    "n": ["0p667_1_0p333_0", "0p667_1_0p333_0"],[m
[31m-                    "t": 84,[m
[31m-                    "s": [40, 40],[m
[31m-                    "e": [50, 50][m
[31m-                  },[m
[31m-                  { "t": 100 }[m
[31m-                ][m
[31m-              },[m
[31m-              "p": { "a": 0, "k": [0, -100] },[m
[31m-              "nm": "Ellipse Path 1",[m
[31m-              "mn": "ADBE Vector Shape - Ellipse"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "st",[m
[31m-              "c": { "a": 0, "k": [0.26, 0, 0, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "w": { "a": 0, "k": 0 },[m
[31m-              "lc": 1,[m
[31m-              "lj": 1,[m
[31m-              "ml": 4,[m
[31m-              "nm": "Stroke 1",[m
[31m-              "mn": "ADBE Vector Graphic - Stroke"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "fl",[m
[31m-              "c": { "a": 0, "k": [0.8627, 0.149, 0.149, 1] },[m
[31m-              "o": { "a": 0, "k": 100 },[m
[31m-              "r": 1,[m
[31m-              "nm": "Fill 1",[m
[31m-              "mn": "ADBE Vector Graphic - Fill"[m
[31m-            },[m
[31m-            {[m
[31m-              "ty": "tr",[m
[31m-              "p": { "a": 0, "k": [0, 0], "ix": 2 },[m
[31m-              "a": { "a": 0, "k": [0, 0], "ix": 1 },[m
[31m-              "s": { "a": 0, "k": [100, 100], "ix": 3 },[m
[31m-              "r": { "a": 0, "k": 0, "ix": 6 },[m
[31m-              "o": { "a": 0, "k": 100, "ix": 7 },[m
[31m-              "sk": { "a": 0, "k": 0, "ix": 4 },[m
[31m-              "sa": { "a": 0, "k": 0, "ix": 5 },[m
[31m-              "nm": "Transform"[m
[31m-            }[m
[31m-          ],[m
[31m-          "nm": "Ellipse 1",[m
[31m-          "np": 3,[m
[31m-          "cix": 2,[m
[31m-          "ix": 1,[m
[31m-          "mn": "ADBE Vector Group"[m
[31m-        }[m
[31m-      ],[m
[31m-      "ip": 0,[m
[31m-      "op": 600,[m
[31m-      "st": 0,[m
[31m-      "bm": 0,[m
[31m-      "sr": 1[m
[31m-    }[m
[31m-  ][m
[31m-}[m
[1mdiff --git a/ios/Flutter/Debug.xcconfig b/ios/Flutter/Debug.xcconfig[m
[1mindex ec97fc6..592ceee 100644[m
[1m--- a/ios/Flutter/Debug.xcconfig[m
[1m+++ b/ios/Flutter/Debug.xcconfig[m
[36m@@ -1,2 +1 @@[m
[31m-#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"[m
 #include "Generated.xcconfig"[m
[1mdiff --git a/ios/Flutter/Release.xcconfig b/ios/Flutter/Release.xcconfig[m
[1mindex c4855bf..592ceee 100644[m
[1m--- a/ios/Flutter/Release.xcconfig[m
[1m+++ b/ios/Flutter/Release.xcconfig[m
[36m@@ -1,2 +1 @@[m
[31m-#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"[m
 #include "Generated.xcconfig"[m
[1mdiff --git a/ios/Podfile b/ios/Podfile[m
[1mdeleted file mode 100644[m
[1mindex d97f17e..0000000[m
[1m--- a/ios/Podfile[m
[1m+++ /dev/null[m
[36m@@ -1,44 +0,0 @@[m
[31m-# Uncomment this line to define a global platform for your project[m
[31m-# platform :ios, '12.0'[m
[31m-[m
[31m-# CocoaPods analytics sends network stats synchronously affecting flutter build latency.[m
[31m-ENV['COCOAPODS_DISABLE_STATS'] = 'true'[m
[31m-[m
[31m-project 'Runner', {[m
[31m-  'Debug' => :debug,[m
[31m-  'Profile' => :release,[m
[31m-  'Release' => :release,[m
[31m-}[m
[31m-[m
[31m-def flutter_root[m
[31m-  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)[m
[31m-  unless File.exist?(generated_xcode_build_settings_path)[m
[31m-    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"[m
[31m-  end[m
[31m-[m
[31m-  File.foreach(generated_xcode_build_settings_path) do |line|[m
[31m-    matches = line.match(/FLUTTER_ROOT\=(.*)/)[m
[31m-    return matches[1].strip if matches[m
[31m-  end[m
[31m-  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"[m
[31m-end[m
[31m-[m
[31m-require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)[m
[31m-[m
[31m-flutter_ios_podfile_setup[m
[31m-[m
[31m-target 'Runner' do[m
[31m-  use_frameworks![m
[31m-  use_modular_headers![m
[31m-[m
[31m-  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))[m
[31m-  target 'RunnerTests' do[m
[31m-    inherit! :search_paths[m
[31m-  end[m
[31m-end[m
[31m-[m
[31m-post_install do |installer|[m
[31m-  installer.pods_project.targets.each do |target|[m
[31m-    flutter_additional_ios_build_settings(target)[m
[31m-  end[m
[31m-end[m
[1mdiff --git a/ios/Runner/Info.plist b/ios/Runner/Info.plist[m
[1mindex 9c87114..bee6672 100644[m
[1m--- a/ios/Runner/Info.plist[m
[1m+++ b/ios/Runner/Info.plist[m
[36m@@ -2,73 +2,77 @@[m
 <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">[m
 <plist version="1.0">[m
 <dict>[m
[31m-    <key>CFBundleDevelopmentRegion</key>[m
[31m-    <string>$(DEVELOPMENT_LANGUAGE)</string>[m
[31m-    <key>CFBundleDisplayName</key>[m
[31m-    <string>Laplink</string>[m
[31m-    <key>CFBundleExecutable</key>[m
[31m-    <string>$(EXECUTABLE_NAME)</string>[m
[31m-    <key>CFBundleIdentifier</key>[m
[31m-    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>[m
[31m-    <key>CFBundleInfoDictionaryVersion</key>[m
[31m-    <string>6.0</string>[m
[31m-    <key>CFBundleName</key>[m
[31m-    <string>laplink</string>[m
[31m-    <key>CFBundlePackageType</key>[m
[31m-    <string>APPL</string>[m
[31m-    <key>CFBundleShortVersionString</key>[m
[31m-    <string>$(FLUTTER_BUILD_NAME)</string>[m
[31m-    <key>CFBundleVersion</key>[m
[31m-    <string>$(FLUTTER_BUILD_NUMBER)</string>[m
[31m-    <key>LSRequiresIPhoneOS</key>[m
[31m-    <true/>[m
[31m-    <key>UILaunchStoryboardName</key>[m
[31m-    <string>LaunchScreen</string>[m
[31m-    <key>UISupportedInterfaceOrientations</key>[m
[31m-    <array>[m
[31m-        <string>UIInterfaceOrientationPortrait</string>[m
[31m-        <string>UIInterfaceOrientationLandscapeLeft</string>[m
[31m-        <string>UIInterfaceOrientationLandscapeRight</string>[m
[31m-    </array>[m
[31m-    <key>UISupportedInterfaceOrientations~ipad</key>[m
[31m-    <array>[m
[31m-        <string>UIInterfaceOrientationPortrait</string>[m
[31m-        <string>UIInterfaceOrientationPortraitUpsideDown</string>[m
[31m-        <string>UIInterfaceOrientationLandscapeLeft</string>[m
[31m-        <string>UIInterfaceOrientationLandscapeRight</string>[m
[31m-    </array>[m
[31m-    <key>UIApplicationSupportsIndirectInputEvents</key>[m
[31m-    <true/>[m
[32m+[m	[32m<key>CFBundleDevelopmentRegion</key>[m
[32m+[m	[32m<string>$(DEVELOPMENT_LANGUAGE)</string>[m
[32m+[m	[32m<key>CFBundleDisplayName</key>[m
[32m+[m	[32m<string>Laplink</string>[m
[32m+[m	[32m<key>CFBundleExecutable</key>[m
[32m+[m	[32m<string>$(EXECUTABLE_NAME)</string>[m
[32m+[m	[32m<key>CFBundleIdentifier</key>[m
[32m+[m	[32m<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>[m
[32m+[m	[32m<key>CFBundleInfoDictionaryVersion</key>[m
[32m+[m	[32m<string>6.0</string>[m
[32m+[m	[32m<key>CFBundleName</key>[m
[32m+[m	[32m<string>laplink</string>[m
[32m+[m	[32m<key>CFBundlePackageType</key>[m
[32m+[m	[32m<string>APPL</string>[m
[32m+[m	[32m<key>CFBundleShortVersionString</key>[m
[32m+[m	[32m<string>$(FLUTTER_BUILD_NAME)</string>[m
[32m+[m	[32m<key>CFBundleVersion</key>[m
[32m+[m	[32m<string>$(FLUTTER_BUILD_NUMBER)</string>[m
[32m+[m	[32m<key>LSRequiresIPhoneOS</key>[m
[32m+[m	[32m<true/>[m
[32m+[m	[32m<key>UILaunchStoryboardName</key>[m
[32m+[m	[32m<string>LaunchScreen</string>[m
[32m+[m	[32m<key>UIMainStoryboardFile</key>[m
[32m+[m	[32m<string>Main</string>[m
[32m+[m	[32m<key>UISupportedInterfaceOrientations</key>[m
[32m+[m	[32m<array>[m
[32m+[m		[32m<string>UIInterfaceOrientationPortrait</string>[m
[32m+[m		[32m<string>UIInterfaceOrientationLandscapeLeft</string>[m
[32m+[m		[32m<string>UIInterfaceOrientationLandscapeRight</string>[m
[32m+[m	[32m</array>[m
[32m+[m	[32m<key>UISupportedInterfaceOrientations~ipad</key>[m
[32m+[m	[32m<array>[m
[32m+[m		[32m<string>UIInterfaceOrientationPortrait</string>[m
[32m+[m		[32m<string>UIInterfaceOrientationPortraitUpsideDown</string>[m
[32m+[m		[32m<string>UIInterfaceOrientationLandscapeLeft</string>[m
[32m+[m		[32m<string>UIInterfaceOrientationLandscapeRight</string>[m
[32m+[m	[32m</array>[m
[32m+[m	[32m<key>CADisableMinimumFrameDurationOnPhone</key>[m
[32m+[m	[32m<true/>[m
[32m+[m	[32m<key>UIApplicationSupportsIndirectInputEvents</key>[m
[32m+[m	[32m<true/>[m
 [m
[31m-    <!-- Bluetooth Permissions -->[m
[31m-    <key>NSBluetoothAlwaysUsageDescription</key>[m
[31m-    <string>This app requires Bluetooth access to connect to devices.</string>[m
[31m-    <key>NSBluetoothPeripheralUsageDescription</key>[m
[31m-    <string>This app uses Bluetooth to communicate with external devices.</string>[m
[32m+[m	[32m<!-- Bluetooth Permissions -->[m
[32m+[m	[32m<key>NSBluetoothAlwaysUsageDescription</key>[m
[32m+[m	[32m<string>This app requires Bluetooth access to connect to devices.</string>[m
[32m+[m	[32m<key>NSBluetoothPeripheralUsageDescription</key>[m
[32m+[m	[32m<string>This app uses Bluetooth to communicate with external devices.</string>[m
 [m
[31m-    <!-- Notifications Permissions -->[m
[31m-    <key>NSUserNotificationAlertStyle</key>[m
[31m-    <string>Alert</string>[m
[31m-    <key>UNAuthorizationOptionAlert</key>[m
[31m-    <true/>[m
[31m-    <key>UNAuthorizationOptionBadge</key>[m
[31m-    <true/>[m
[31m-    <key>UNAuthorizationOptionSound</key>[m
[31m-    <true/>[m
[32m+[m	[32m<!-- Notifications Permissions -->[m
[32m+[m	[32m<key>NSUserNotificationAlertStyle</key>[m
[32m+[m	[32m<string>Alert</string>[m
[32m+[m	[32m<key>UNAuthorizationOptionAlert</key>[m
[32m+[m	[32m<true/>[m
[32m+[m	[32m<key>UNAuthorizationOptionBadge</key>[m
[32m+[m	[32m<true/>[m
[32m+[m	[32m<key>UNAuthorizationOptionSound</key>[m
[32m+[m	[32m<true/>[m
 [m
[31m-    <!-- Background Permissions -->[m
[31m-    <key>UIBackgroundModes</key>[m
[31m-    <array>[m
[31m-        <string>location</string>[m
[31m-        <string>fetch</string>[m
[31m-        <string>processing</string>[m
[31m-        <string>bluetooth-central</string>[m
[31m-    </array>[m
[32m+[m	[32m<!-- Background Permissions -->[m
[32m+[m	[32m<key>UIBackgroundModes</key>[m
[32m+[m	[32m<array>[m
[32m+[m		[32m<string>location</string>[m
[32m+[m		[32m<string>fetch</string>[m
[32m+[m		[32m<string>processing</string>[m
[32m+[m		[32m<string>bluetooth-central</string>[m
[32m+[m	[32m</array>[m
 [m
[31m-    <!-- Location Permissions -->[m
[31m-    <key>NSLocationWhenInUseUsageDescription</key>[m
[31m-    <string>This app requires location access for Bluetooth scanning.</string>[m
[31m-    <key>NSLocationAlwaysAndWhenInUseUsageDescription</key>[m
[31m-    <string>Location access is needed to connect to Bluetooth devices even in the background.</string>[m
[32m+[m	[32m<!-- Location Permission (if needed for Bluetooth scanning) -->[m
[32m+[m	[32m<key>NSLocationWhenInUseUsageDescription</key>[m
[32m+[m	[32m<string>This app requires location access for Bluetooth scanning.</string>[m
[32m+[m	[32m<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>[m
[32m+[m	[32m<string>Location access is needed to connect to Bluetooth devices even in the background.</string>[m
 </dict>[m
 </plist>[m
[1mdiff --git a/lib/components/action_button.dart b/lib/components/action_button.dart[m
[1mdeleted file mode 100644[m
[1mindex 1650826..0000000[m
[1m--- a/lib/components/action_button.dart[m
[1m+++ /dev/null[m
[36m@@ -1,41 +0,0 @@[m
[31m-import 'package:flutter/material.dart';[m
[31m-[m
[31m-class ActionButton extends StatelessWidget {[m
[31m-  final bool isActive;[m
[31m-  final String label;[m
[31m-  final IconData icon;[m
[31m-  final Color backgroundColor;[m
[31m-  final VoidCallback onPressed;[m
[31m-[m
[31m-  const ActionButton({[m
[31m-    super.key,[m
[31m-    required this.isActive,[m
[31m-    required this.label,[m
[31m-    required this.icon,[m
[31m-    required this.backgroundColor,[m
[31m-    required this.onPressed,[m
[31m-  });[m
[31m-[m
[31m-  @override[m
[31m-  Widget build(BuildContext context) {[m
[31m-    return SizedBox([m
[31m-      width: double.infinity,[m
[31m-      child: ElevatedButton.icon([m
[31m-        onPressed: isActive ? onPressed : null,[m
[31m-        icon: Icon(icon, color: isActive ? Colors.white : Colors.grey),[m
[31m-        label: Text([m
[31m-          label,[m
[31m-          style: TextStyle(color: isActive ? Colors.white : Colors.grey),[m
[31m-        ),[m
[31m-        style: ElevatedButton.styleFrom([m
[31m-          backgroundColor: isActive ? backgroundColor : const Color(0xFF3A3A3A),[m
[31m-          padding: const EdgeInsets.symmetric(vertical: 15),[m
[31m-          shape: RoundedRectangleBorder([m
[31m-            borderRadius: BorderRadius.circular(30),[m
[31m-          ),[m
[31m-          elevation: isActive ? 5 : 0,[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/components/bluetooth_device_list.dart b/lib/components/bluetooth_device_list.dart[m
[1mdeleted file mode 100644[m
[1mindex 85894f6..0000000[m
[1m--- a/lib/components/bluetooth_device_list.dart[m
[1m+++ /dev/null[m
[36m@@ -1,81 +0,0 @@[m
[31m-import 'package:flutter/material.dart';[m
[31m-import 'package:flutter_blue_plus/flutter_blue_plus.dart';[m
[31m-[m
[31m-class BluetoothDeviceList extends StatefulWidget {[m
[31m-  final List<BluetoothDevice> devices;[m
[31m-  final Function(BluetoothDevice) onConnect;[m
[31m-[m
[31m-  const BluetoothDeviceList({[m
[31m-    super.key,[m
[31m-    required this.devices,[m
[31m-    required this.onConnect,[m
[31m-  });[m
[31m-[m
[31m-  @override[m
[31m-  _BluetoothDeviceListState createState() => _BluetoothDeviceListState();[m
[31m-}[m
[31m-[m
[31m-class _BluetoothDeviceListState extends State<BluetoothDeviceList> {[m
[31m-  BluetoothDevice? connectedDevice;[m
[31m-[m
[31m-  void _handleConnect(BluetoothDevice device) {[m
[31m-    setState(() {[m
[31m-      connectedDevice = device;[m
[31m-    });[m
[31m-    widget.onConnect(device);[m
[31m-  }[m
[31m-[m
[31m-  @override[m
[31m-  Widget build(BuildContext context) {[m
[31m-    return Expanded([m
[31m-      child: ListView.builder([m
[31m-        itemCount: widget.devices.length,[m
[31m-        itemBuilder: (context, index) {[m
[31m-          final device = widget.devices[index];[m
[31m-          final isConnected = connectedDevice == device;[m
[31m-          return Padding([m
[31m-            padding:[m
[31m-                const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),[m
[31m-            child: Container([m
[31m-              decoration: BoxDecoration([m
[31m-                color: Theme.of(context).colorScheme.onSecondary,[m
[31m-                borderRadius: BorderRadius.circular(16.0),[m
[31m-                boxShadow: [[m
[31m-                  BoxShadow([m
[31m-                    color: Colors.black.withAlpha((0.2 * 255).toInt()),[m
[31m-                    blurRadius: 4.0,[m
[31m-                    offset: const Offset(0, 2),[m
[31m-                  ),[m
[31m-                ],[m
[31m-              ),[m
[31m-              child: ListTile([m
[31m-                title: Text([m
[31m-                  device.platformName,[m
[31m-                  style: TextStyle([m
[31m-                    fontSize: 18,[m
[31m-                    fontWeight: FontWeight.bold,[m
[31m-                    color: Theme.of(context).colorScheme.secondary,[m
[31m-                  ),[m
[31m-                ),[m
[31m-                trailing: ElevatedButton([m
[31m-                  onPressed: isConnected ? null : () => _handleConnect(device),[m
[31m-                  style: ElevatedButton.styleFrom([m
[31m-                    backgroundColor:[m
[31m-                        isConnected ? Colors.green : const Color(0xFFDC2626),[m
[31m-                    shape: RoundedRectangleBorder([m
[31m-                      borderRadius: BorderRadius.circular(20.0),[m
[31m-                    ),[m
[31m-                  ),[m
[31m-                  child: Text([m
[31m-                    isConnected ? 'Připojeno' : 'Připojit',[m
[31m-                    style: const TextStyle(fontSize: 16, color: Colors.white),[m
[31m-                  ),[m
[31m-                ),[m
[31m-              ),[m
[31m-            ),[m
[31m-          );[m
[31m-        },[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/components/header.dart b/lib/components/header.dart[m
[1mindex 42f6f9b..ef6d2c9 100644[m
[1m--- a/lib/components/header.dart[m
[1m+++ b/lib/components/header.dart[m
[36m@@ -1,17 +1,10 @@[m
 import 'package:flutter/material.dart';[m
[31m-import 'package:laplink/pages/login_page.dart';[m
[31m-import 'package:provider/provider.dart';[m
[31m-import 'package:laplink/provider/theme_provider.dart';[m
 import 'package:shared_preferences/shared_preferences.dart';[m
[32m+[m[32mimport 'package:laplink/pages/login_page.dart'; // Upravte cestu k LoginPage[m
 [m
[31m-class Header extends StatefulWidget {[m
[32m+[m[32mclass Header extends StatelessWidget {[m
   const Header({super.key});[m
 [m
[31m-  @override[m
[31m-  State<Header> createState() => _HeaderState();[m
[31m-}[m
[31m-[m
[31m-class _HeaderState extends State<Header> {[m
   Future<void> _logout(BuildContext context) async {[m
     final prefs = await SharedPreferences.getInstance();[m
     await prefs.remove('web_user');[m
[36m@@ -22,104 +15,51 @@[m [mclass _HeaderState extends State<Header> {[m
     );[m
   }[m
 [m
[31m-  void _showSettingsPopup(BuildContext context) {[m
[31m-    showDialog([m
[31m-      context: context,[m
[31m-      builder: (BuildContext context) {[m
[31m-        final themeProvider =[m
[31m-            Provider.of<ThemeProvider>(context, listen: false);[m
[31m-        bool isDarkMode = themeProvider.themeMode == ThemeMode.dark;[m
[31m-[m
[31m-        return AlertDialog([m
[31m-          backgroundColor: Theme.of(context).colorScheme.surface,[m
[31m-          shape: RoundedRectangleBorder([m
[31m-            borderRadius: BorderRadius.circular(20),[m
[31m-          ),[m
[31m-          title: Text([m
[31m-            'Nastavení',[m
[31m-            style: TextStyle(color: Theme.of(context).colorScheme.secondary),[m
[31m-          ),[m
[31m-          content: StatefulBuilder([m
[31m-            builder: (context, setState) {[m
[31m-              return Column([m
[31m-                mainAxisSize: MainAxisSize.min,[m
[31m-                children: [[m
[31m-                  Row([m
[31m-                    mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
[31m-                    children: [[m
[31m-                      Text([m
[31m-                        'Tmavý motiv',[m
[31m-                        style: TextStyle([m
[31m-                          color: Theme.of(context).colorScheme.onSurface,[m
[31m-                        ),[m
[31m-                      ),[m
[31m-                      Switch([m
[31m-                        value: isDarkMode,[m
[31m-                        onChanged: (value) {[m
[31m-                          setState(() => isDarkMode = value);[m
[31m-                          themeProvider.toggleTheme(value);[m
[31m-                        },[m
[31m-                        activeColor: Theme.of(context).colorScheme.primary,[m
[31m-                      ),[m
[31m-                    ],[m
[31m-                  ),[m
[31m-                  const SizedBox(height: 20),[m
[31m-                  ElevatedButton([m
[31m-                    onPressed: () => _logout(context),[m
[31m-                    style: ElevatedButton.styleFrom([m
[31m-                      backgroundColor: Theme.of(context).colorScheme.primary,[m
[31m-                      shape: RoundedRectangleBorder([m
[31m-                        borderRadius: BorderRadius.circular(12),[m
[31m-                      ),[m
[31m-                    ),[m
[31m-                    child: const Row([m
[31m-                      mainAxisAlignment: MainAxisAlignment.center,[m
[31m-                      children: [[m
[31m-                        Icon(Icons.logout, color: Colors.white),[m
[31m-                        SizedBox(width: 5),[m
[31m-                        Text([m
[31m-                          'Odhlásit se',[m
[31m-                          style: TextStyle(color: Colors.white, fontSize: 16),[m
[31m-                        ),[m
[31m-                      ],[m
[31m-                    ),[m
[31m-                  ),[m
[31m-                ],[m
[31m-              );[m
[31m-            },[m
[31m-          ),[m
[31m-        );[m
[31m-      },[m
[31m-    );[m
[31m-  }[m
[31m-[m
   @override[m
   Widget build(BuildContext context) {[m
     return Container([m
       padding: const EdgeInsets.symmetric(horizontal: 16),[m
[31m-      height: 80,[m
[31m-      decoration: BoxDecoration([m
[31m-        color: Theme.of(context).colorScheme.tertiary,[m
[31m-        borderRadius: const BorderRadius.only([m
[32m+[m[32m      height: 80, // Zvýšení výšky hlavičky pro lepší vzhled[m
[32m+[m[32m      decoration: const BoxDecoration([m
[32m+[m[32m        color: Color(0xffdc2626),[m
[32m+[m[32m        borderRadius: BorderRadius.only([m
           bottomLeft: Radius.circular(20),[m
[31m-          bottomRight: Radius.circular(20),[m
[32m+[m[32m          bottomRight: Radius.circular(20), // Zakulacení spodních rohů[m
         ),[m
       ),[m
       child: Row([m
         mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
         children: [[m
[31m-          Image.asset([m
[31m-            'assets/icon/icon_removed_background.png',[m
[31m-            width: 60,[m
[31m-            height: 60,[m
[31m-            fit: BoxFit.contain,[m
[32m+[m[32m          const Text([m
[32m+[m[32m            'Laplink',[m
[32m+[m[32m            style: TextStyle([m
[32m+[m[32m              color: Colors.white,[m
[32m+[m[32m              fontSize: 28, // Větší velikost písma pro lepší čitelnost[m
[32m+[m[32m              fontWeight: FontWeight.bold, // Robustní a sportovní font[m
[32m+[m[32m              fontFamily: 'RobotoCondensed', // Použití sportovního fontu[m
[32m+[m[32m              letterSpacing: 3.0, // Zvýšení rozestupu písmen[m
[32m+[m[32m            ),[m
           ),[m
[31m-          IconButton([m
[31m-            icon: Icon([m
[31m-              Icons.settings,[m
[31m-              color: Theme.of(context).colorScheme.onPrimary,[m
[32m+[m[32m          GestureDetector([m
[32m+[m[32m            onTap: () => _logout(context),[m
[32m+[m[32m            child: Container([m
[32m+[m[32m              padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),[m
[32m+[m[32m              decoration: BoxDecoration([m
[32m+[m[32m                color: Colors.transparent, // Transparentní pozadí tlačítka[m
[32m+[m[32m                border: Border.all(color: Colors.white, width: 2),[m
[32m+[m[32m                borderRadius: BorderRadius.circular(12),[m
[32m+[m[32m              ),[m
[32m+[m[32m              child: const Row([m
[32m+[m[32m                children: [[m
[32m+[m[32m                  Icon(Icons.logout, color: Colors.white),[m
[32m+[m[32m                  SizedBox(width: 5),[m
[32m+[m[32m                  Text([m
[32m+[m[32m                    'Logout',[m
[32m+[m[32m                    style: TextStyle(color: Colors.white, fontSize: 16),[m
[32m+[m[32m                  ),[m
[32m+[m[32m                ],[m
[32m+[m[32m              ),[m
             ),[m
[31m-            onPressed: () => _showSettingsPopup(context),[m
           ),[m
         ],[m
       ),[m
[1mdiff --git a/lib/components/lap_time_table.dart b/lib/components/lap_time_table.dart[m
[1mdeleted file mode 100644[m
[1mindex 0d3f89a..0000000[m
[1m--- a/lib/components/lap_time_table.dart[m
[1m+++ /dev/null[m
[36m@@ -1,66 +0,0 @@[m
[31m-import 'package:flutter/material.dart';[m
[31m-[m
[31m-class LapTimeTable extends StatelessWidget {[m
[31m-  final List<double> lapTimes;[m
[31m-  final ScrollController scrollController;[m
[31m-[m
[31m-  const LapTimeTable({[m
[31m-    super.key,[m
[31m-    required this.lapTimes,[m
[31m-    required this.scrollController,[m
[31m-  });[m
[31m-[m
[31m-  @override[m
[31m-  Widget build(BuildContext context) {[m
[31m-    return ListView.builder([m
[31m-      controller: scrollController,[m
[31m-      shrinkWrap: true,[m
[31m-      itemCount: lapTimes.length + 1,[m
[31m-      itemBuilder: (context, index) {[m
[31m-        if (index == 0) {[m
[31m-          return const ListTile([m
[31m-            title: Row([m
[31m-              mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
[31m-              children: [[m
[31m-                Text([m
[31m-                  '#',[m
[31m-                  style: TextStyle([m
[31m-                    color: Colors.white,[m
[31m-                    fontWeight: FontWeight.bold,[m
[31m-                  ),[m
[31m-                ),[m
[31m-                Text([m
[31m-                  'Čas',[m
[31m-                  style: TextStyle([m
[31m-                    color: Colors.white,[m
[31m-                    fontWeight: FontWeight.bold,[m
[31m-                  ),[m
[31m-                ),[m
[31m-              ],[m
[31m-            ),[m
[31m-          );[m
[31m-        } else {[m
[31m-          return ListTile([m
[31m-            title: Row([m
[31m-              mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
[31m-              children: [[m
[31m-                Text([m
[31m-                  (index).toString(),[m
[31m-                  style: const TextStyle(color: Colors.white),[m
[31m-                ),[m
[31m-                Text([m
[31m-                  lapTimes[index - 1].toStringAsFixed(3),[m
[31m-                  style: TextStyle([m
[31m-                    color: index - 1 == lapTimes.length - 1[m
[31m-                        ? Colors.red[m
[31m-                        : Colors.white,[m
[31m-                  ),[m
[31m-                ),[m
[31m-              ],[m
[31m-            ),[m
[31m-          );[m
[31m-        }[m
[31m-      },[m
[31m-    );[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/components/race_card.dart b/lib/components/race_card.dart[m
[1mdeleted file mode 100644[m
[1mindex 6531e12..0000000[m
[1m--- a/lib/components/race_card.dart[m
[1m+++ /dev/null[m
[36m@@ -1,163 +0,0 @@[m
[31m-import 'package:flutter/material.dart';[m
[31m-import 'package:intl/intl.dart';[m
[31m-import 'action_button.dart';[m
[31m-[m
[31m-class RaceCard extends StatelessWidget {[m
[31m-  final Map<String, dynamic> race;[m
[31m-  final VoidCallback onTrainingStart;[m
[31m-  final VoidCallback onQualificationStart;[m
[31m-  final VoidCallback onRaceStart;[m
[31m-  final VoidCallback onShowResults;[m
[31m-[m
[31m-  const RaceCard({[m
[31m-    super.key,[m
[31m-    required this.race,[m
[31m-    required this.onTrainingStart,[m
[31m-    required this.onQualificationStart,[m
[31m-    required this.onRaceStart,[m
[31m-    required this.onShowResults,[m
[31m-  });[m
[31m-[m
[31m-  String _formatDate(String dateString) {[m
[31m-    DateTime parsedDate = DateTime.parse(dateString);[m
[31m-    return DateFormat('dd.MM.yyyy').format(parsedDate);[m
[31m-  }[m
[31m-[m
[31m-  @override[m
[31m-  Widget build(BuildContext context) {[m
[31m-    return Padding([m
[31m-      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),[m
[31m-      child: Container([m
[31m-        decoration: BoxDecoration([m
[31m-          color: const Color(0xFF2E2E31),[m
[31m-          borderRadius: BorderRadius.circular(16),[m
[31m-          boxShadow: [[m
[31m-            BoxShadow([m
[31m-              color: Colors.black.withAlpha((0.3 * 255).toInt()),[m
[31m-              blurRadius: 6,[m
[31m-              offset: const Offset(0, 3),[m
[31m-            ),[m
[31m-          ],[m
[31m-        ),[m
[31m-        child: Padding([m
[31m-          padding: const EdgeInsets.all(16.0),[m
[31m-          child: Column([m
[31m-            crossAxisAlignment: CrossAxisAlignment.start,[m
[31m-            children: [[m
[31m-              Row([m
[31m-                children: [[m
[31m-                  Icon([m
[31m-                    race['event_phase_id'] == 1[m
[31m-                        ? Icons.directions_car[m
[31m-                        : race['event_phase_id'] == 2[m
[31m-                            ? Icons.timer[m
[31m-                            : Icons.sports_motorsports,[m
[31m-                    color: Colors.white,[m
[31m-                    size: 40,[m
[31m-                  ),[m
[31m-                  const SizedBox(width: 16),[m
[31m-                  Expanded([m
[31m-                    child: Text([m
[31m-                      race['name'],[m
[31m-                      style: const TextStyle([m
[31m-                        fontSize: 24,[m
[31m-                        fontWeight: FontWeight.bold,[m
[31m-                        color: Colors.white,[m
[31m-                      ),[m
[31m-                    ),[m
[31m-                  ),[m
[31m-                ],[m
[31m-              ),[m
[31m-              const SizedBox(height: 16),[m
[31m-              Column([m
[31m-                crossAxisAlignment: CrossAxisAlignment.start,[m
[31m-                children: [[m
[31m-                  Row([m
[31m-                    children: [[m
[31m-                      const Icon(Icons.calendar_today, color: Colors.grey),[m
[31m-                      const SizedBox(width: 8),[m
[31m-                      Text([m
[31m-                        'Datum: ${_formatDate(race['date'])}',[m
[31m-                        style: const TextStyle([m
[31m-                          fontSize: 16,[m
[31m-                          color: Colors.white70,[m
[31m-                        ),[m
[31m-                      ),[m
[31m-                    ],[m
[31m-                  ),[m
[31m-                  const SizedBox(height: 8),[m
[31m-                  Row([m
[31m-                    children: [[m
[31m-                      const Icon(Icons.location_on, color: Colors.grey),[m
[31m-                      const SizedBox(width: 8),[m
[31m-                      Text([m
[31m-                        'Lokalita: ${race['location']}',[m
[31m-                        style: const TextStyle([m
[31m-                          fontSize: 16,[m
[31m-                          color: Colors.white70,[m
[31m-                        ),[m
[31m-                      ),[m
[31m-                    ],[m
[31m-                  ),[m
[31m-                  const SizedBox(height: 8),[m
[31m-                  Row([m
[31m-                    children: [[m
[31m-                      const Icon(Icons.flag, color: Colors.grey),[m
[31m-                      const SizedBox(width: 8),[m
[31m-                      Text([m
[31m-                        'Počet kol: ${race['number_of_laps']}',[m
[31m-                        style: const TextStyle([m
[31m-                          fontSize: 16,[m
[31m-                          color: Colors.white70,[m
[31m-                        ),[m
[31m-                      ),[m
[31m-                    ],[m
[31m-                  ),[m
[31m-                ],[m
[31m-              ),[m
[31m-              const SizedBox(height: 20),[m
[31m-              Center([m
[31m-                child: Column([m
[31m-                  children: [[m
[31m-                    ActionButton([m
[31m-                      isActive: race['event_phase_id'] == 1,[m
[31m-                      label: 'Zahájit trénink',[m
[31m-                      icon: Icons.directions_run,[m
[31m-                      backgroundColor: const Color(0xFFDC2626),[m
[31m-                      onPressed: onTrainingStart,[m
[31m-                    ),[m
[31m-                    const SizedBox(height: 10),[m
[31m-                    ActionButton([m
[31m-                      isActive: race['event_phase_id'] == 2,[m
[31m-                      label: 'Zahájit Kvalifikaci',[m
[31m-                      icon: Icons.emoji_events,[m
[31m-                      backgroundColor: const Color(0xFFDC2626),[m
[31m-                      onPressed: onQualificationStart,[m
[31m-                    ),[m
[31m-                    const SizedBox(height: 10),[m
[31m-                    ActionButton([m
[31m-                      isActive: race['event_phase_id'] == 3 &&[m
[31m-                          !(race['finished'] ?? false),[m
[31m-                      label: 'Začít závod',[m
[31m-                      icon: Icons.sports_score,[m
[31m-                      backgroundColor: const Color(0xFFDC2626),[m
[31m-                      onPressed: onRaceStart,[m
[31m-                    ),[m
[31m-                    const SizedBox(height: 10),[m
[31m-                    ActionButton([m
[31m-                      isActive: true,[m
[31m-                      label: 'Zobrazit časy závodu',[m
[31m-                      icon: Icons.access_time,[m
[31m-                      backgroundColor: const Color(0xFF607D8B),[m
[31m-                      onPressed: onShowResults,[m
[31m-                    ),[m
[31m-                  ],[m
[31m-                ),[m
[31m-              ),[m
[31m-            ],[m
[31m-          ),[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/components/stat_card.dart b/lib/components/stat_card.dart[m
[1mdeleted file mode 100644[m
[1mindex 1fa16c5..0000000[m
[1m--- a/lib/components/stat_card.dart[m
[1m+++ /dev/null[m
[36m@@ -1,59 +0,0 @@[m
[31m-import 'package:flutter/material.dart';[m
[31m-[m
[31m-class StatCard {[m
[31m-  Widget buildStatCard({[m
[31m-    required BuildContext context,[m
[31m-    Color? valueColor,[m
[31m-    required String value,[m
[31m-    required String title,[m
[31m-    required double height,[m
[31m-    required double width,[m
[31m-  }) {[m
[31m-    final theme = Theme.of(context);[m
[31m-[m
[31m-    return Container([m
[31m-      height: height,[m
[31m-      width: width,[m
[31m-      decoration: BoxDecoration([m
[31m-        color: theme.colorScheme.surface, // Dynamická barva pozadí[m
[31m-        borderRadius: BorderRadius.circular(12),[m
[31m-        boxShadow: [[m
[31m-          BoxShadow([m
[31m-            color: theme.shadowColor[m
[31m-                .withAlpha((0.2 * 255).toInt()), // Dynamický stín[m
[31m-            blurRadius: 6,[m
[31m-            offset: const Offset(0, 3),[m
[31m-          ),[m
[31m-        ],[m
[31m-      ),[m
[31m-      child: Padding([m
[31m-        padding: const EdgeInsets.all(8.0),[m
[31m-        child: Column([m
[31m-          mainAxisAlignment: MainAxisAlignment.center,[m
[31m-          crossAxisAlignment: CrossAxisAlignment.start,[m
[31m-          children: [[m
[31m-            Text([m
[31m-              title,[m
[31m-              style: TextStyle([m
[31m-                fontSize: 14,[m
[31m-                fontWeight: FontWeight.bold,[m
[31m-                color: theme.colorScheme.onSurface[m
[31m-                    .withAlpha((0.7 * 255).toInt()), // Dynamická barva textu[m
[31m-              ),[m
[31m-            ),[m
[31m-            const SizedBox(height: 4),[m
[31m-            Text([m
[31m-              value,[m
[31m-              style: TextStyle([m
[31m-                fontSize: 16,[m
[31m-                fontWeight: FontWeight.bold,[m
[31m-                color: valueColor ??[m
[31m-                    theme.colorScheme.onSurface, // Dynamická barva hodnoty[m
[31m-              ),[m
[31m-            ),[m
[31m-          ],[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/main.dart b/lib/main.dart[m
[1mindex 1056762..3093cba 100644[m
[1m--- a/lib/main.dart[m
[1m+++ b/lib/main.dart[m
[36m@@ -1,19 +1,8 @@[m
 import 'package:flutter/material.dart';[m
[31m-import 'package:provider/provider.dart';[m
 import 'package:laplink/pages/login_page.dart';[m
[31m-import 'package:laplink/models/race_state.dart';[m
[31m-import 'package:laplink/provider/theme_provider.dart';[m
 [m
 void main() {[m
[31m-  runApp([m
[31m-    MultiProvider([m
[31m-      providers: [[m
[31m-        ChangeNotifierProvider(create: (_) => RaceState()),[m
[31m-        ChangeNotifierProvider(create: (_) => ThemeProvider()),[m
[31m-      ],[m
[31m-      child: const MyApp(),[m
[31m-    ),[m
[31m-  );[m
[32m+[m[32m  runApp(const MyApp());[m
 }[m
 [m
 class MyApp extends StatelessWidget {[m
[36m@@ -21,90 +10,13 @@[m [mclass MyApp extends StatelessWidget {[m
 [m
   @override[m
   Widget build(BuildContext context) {[m
[31m-    final themeProvider = Provider.of<ThemeProvider>(context);[m
[31m-[m
     return MaterialApp([m
       title: 'Laplink',[m
[31m-      themeMode: themeProvider.themeMode,[m
       theme: ThemeData([m
[31m-        brightness: Brightness.light,[m
[31m-        useMaterial3: true,[m
[31m-        colorScheme: const ColorScheme.light([m
[31m-          primary: Color(0xFFDC2626), // Světle růžová tlačítka[m
[31m-          onPrimary: Color(0xFFF5F5F5), // Bílý text na tlačítkách[m
[31m-          secondary: Color(0xFF000000), // Černé ikony[m
[31m-          onSurface: Colors.black, // Černý text na povrchu[m
[31m-          surface: Colors.white, // Světle šedé pozadí[m
[31m-          tertiary: Color(0xFF2C2C2E),[m
[31m-          onTertiary: Color(0xFFF5F5F5),[m
[31m-          onSecondary: Color(0xFFFFFFFF),[m
[31m-        ),[m
[31m-        scaffoldBackgroundColor: const Color(0xFFF5F5F5), // Bílé pozadí[m
[31m-        textTheme: const TextTheme([m
[31m-          titleLarge: TextStyle([m
[31m-            fontSize: 36,[m
[31m-            fontWeight: FontWeight.bold,[m
[31m-            color: Colors.black,[m
[31m-          ),[m
[31m-          bodyMedium: TextStyle([m
[31m-            color: Colors.black87,[m
[31m-            fontSize: 16,[m
[31m-          ),[m
[31m-        ),[m
[31m-        inputDecorationTheme: InputDecorationTheme([m
[31m-          filled: true,[m
[31m-          fillColor: const Color(0xFFF5F5F5), // Světle šedé pozadí pro input[m
[31m-          prefixIconColor: const Color(0xFF000000), // Černé ikony[m
[31m-          border: OutlineInputBorder([m
[31m-            borderRadius: BorderRadius.circular(30),[m
[31m-            borderSide: BorderSide.none,[m
[31m-          ),[m
[31m-          focusedBorder: OutlineInputBorder([m
[31m-            borderRadius: BorderRadius.circular(30),[m
[31m-            borderSide:[m
[31m-                const BorderSide(color: Color.fromARGB(255, 226, 71, 71)),[m
[31m-          ),[m
[31m-        ),[m
[31m-      ),[m
[31m-      darkTheme: ThemeData([m
[31m-        brightness: Brightness.dark,[m
[32m+[m[32m        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue.shade800),[m
         useMaterial3: true,[m
[31m-        colorScheme: const ColorScheme.dark([m
[31m-            primary: Color(0xFFDC2626), // Tmavě červená tlačítka[m
[31m-            onPrimary: Colors.white, // Bílý text na tlačítkách[m
[31m-            secondary: Colors.white, // Bílé texty[m
[31m-            onSurface: Colors.white, // Bílé texty[m
[31m-            surface: Color(0xFF2C2C2E), // Tmavé pozadí inputů[m
[31m-            tertiary: Color(0xFF2C2C2E),[m
[31m-            onTertiary: Color(0xFF1C1C1E),[m
[31m-            onSecondary: Color(0xFF2C2C2E)),[m
[31m-        scaffoldBackgroundColor: const Color(0xFF1C1C1E), // Tmavé pozadí[m
[31m-        textTheme: const TextTheme([m
[31m-          titleLarge: TextStyle([m
[31m-            fontSize: 36,[m
[31m-            fontWeight: FontWeight.bold,[m
[31m-            color: Colors.white,[m
[31m-          ),[m
[31m-          bodyMedium: TextStyle([m
[31m-            color: Colors.white70,[m
[31m-            fontSize: 16,[m
[31m-          ),[m
[31m-        ),[m
[31m-        inputDecorationTheme: InputDecorationTheme([m
[31m-          filled: true,[m
[31m-          fillColor: const Color(0xFF2C2C2E), // Tmavé pozadí pro input[m
[31m-          prefixIconColor: Colors.white70, // Bílé ikony[m
[31m-          border: OutlineInputBorder([m
[31m-            borderRadius: BorderRadius.circular(30),[m
[31m-            borderSide: BorderSide.none,[m
[31m-          ),[m
[31m-          focusedBorder: OutlineInputBorder([m
[31m-            borderRadius: BorderRadius.circular(30),[m
[31m-            borderSide: const BorderSide(color: Color(0xFFDC2626)),[m
[31m-          ),[m
[31m-        ),[m
       ),[m
[31m-      home: const LoginPage(),[m
[32m+[m[32m      home: const LoginPage(), // Nastavení LoginPage jako úvodní stránky[m
     );[m
   }[m
 }[m
[1mdiff --git a/lib/models/race_state.dart b/lib/models/race_state.dart[m
[1mdeleted file mode 100644[m
[1mindex 55e027d..0000000[m
[1m--- a/lib/models/race_state.dart[m
[1m+++ /dev/null[m
[36m@@ -1,50 +0,0 @@[m
[31m-import 'package:flutter/material.dart';[m
[31m-[m
[31m-class RaceState extends ChangeNotifier {[m
[31m-  bool raceStarted = false;[m
[31m-  bool raceEnded = false;[m
[31m-  int completedLaps = 0;[m
[31m-  double? fastestLap;[m
[31m-  double currentLatitude = 0.0;[m
[31m-  double currentLongitude = 0.0;[m
[31m-  List<double> lapTimes = [];[m
[31m-[m
[31m-  Stopwatch stopwatch = Stopwatch();[m
[31m-[m
[31m-  void startRace() {[m
[31m-    raceStarted = true;[m
[31m-    stopwatch.start();[m
[31m-    notifyListeners();[m
[31m-  }[m
[31m-[m
[31m-  void endRace() {[m
[31m-    raceEnded = true;[m
[31m-    stopwatch.stop();[m
[31m-    notifyListeners();[m
[31m-  }[m
[31m-[m
[31m-  void addLap(double lapTime) {[m
[31m-    lapTimes.add(lapTime);[m
[31m-    completedLaps++;[m
[31m-    if (fastestLap == null || lapTime < fastestLap!) {[m
[31m-      fastestLap = lapTime;[m
[31m-    }[m
[31m-    notifyListeners();[m
[31m-  }[m
[31m-[m
[31m-  void updateLocation(double latitude, double longitude) {[m
[31m-    currentLatitude = latitude;[m
[31m-    currentLongitude = longitude;[m
[31m-    notifyListeners();[m
[31m-  }[m
[31m-[m
[31m-  void resetRace() {[m
[31m-    raceStarted = false;[m
[31m-    raceEnded = false;[m
[31m-    completedLaps = 0;[m
[31m-    fastestLap = null;[m
[31m-    lapTimes.clear();[m
[31m-    stopwatch.reset();[m
[31m-    notifyListeners();[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/pages/login_page.dart b/lib/pages/login_page.dart[m
[1mindex 8363ac7..78f4ebb 100644[m
[1m--- a/lib/pages/login_page.dart[m
[1m+++ b/lib/pages/login_page.dart[m
[36m@@ -1,7 +1,6 @@[m
 import 'package:flutter/material.dart';[m
 import 'package:laplink/services/api_service.dart';[m
 import 'package:laplink/pages/menu_race_page.dart';[m
[31m-import 'package:lottie/lottie.dart';[m
 import 'package:shared_preferences/shared_preferences.dart';[m
 [m
 class LoginPage extends StatefulWidget {[m
[36m@@ -55,52 +54,70 @@[m [mclass _LoginPageState extends State<LoginPage> {[m
   }[m
 [m
   Future<void> _validateAndSubmit() async {[m
[31m-    if (_formKey.currentState!.validate()) {[m
[31m-      setState(() {[m
[31m-        _isLoading = true;[m
[31m-      });[m
[32m+[m[32m  if (_formKey.currentState!.validate()) {[m
[32m+[m[32m    print('Validation passed'); // Logování pro validaci[m
 [m
[31m-      final apiClient = ApiClient();[m
[31m-      await apiClient.initialize();[m
[32m+[m[32m    setState(() {[m
[32m+[m[32m      _isLoading = true;[m
[32m+[m[32m    });[m
 [m
[31m-      try {[m
[31m-        final value = await apiClient.login([m
[31m-          _webUserController.text,[m
[31m-          _passwordController.text,[m
[31m-        );[m
[32m+[m[32m    final apiClient = ApiClient();[m
[32m+[m[32m    await apiClient.initialize();[m
 [m
[31m-        if (value) {[m
[31m-          final prefs = await SharedPreferences.getInstance();[m
[31m-          await prefs.setString('web_user', _webUserController.text);[m
[31m-          await prefs.setString('web_password', _passwordController.text);[m
[31m-[m
[31m-          Navigator.pushReplacement([m
[31m-            context,[m
[31m-            MaterialPageRoute(builder: (context) => const MenuRacePage()),[m
[31m-          );[m
[31m-        } else {[m
[31m-          ScaffoldMessenger.of(context).showSnackBar([m
[31m-            const SnackBar(content: Text('Přihlášení se nezdařilo')),[m
[31m-          );[m
[31m-        }[m
[31m-      } catch (error) {[m
[32m+[m[32m    try {[m
[32m+[m[32m      // Volání API pro login[m
[32m+[m[32m      final value = await apiClient.login([m
[32m+[m[32m        _webUserController.text,[m
[32m+[m[32m        _passwordController.text,[m
[32m+[m[32m      );[m
[32m+[m
[32m+[m[32m      // Kontrola hodnoty response z loginu[m
[32m+[m[32m      if (value) {[m
[32m+[m[32m        final prefs = await SharedPreferences.getInstance();[m
[32m+[m[32m        await prefs.setString('web_user', _webUserController.text);[m
[32m+[m[32m        await prefs.setString('web_password', _passwordController.text);[m
[32m+[m
[32m+[m[32m        // Navigace do další stránky[m
[32m+[m[32m        Navigator.pushReplacement([m
[32m+[m[32m          context,[m
[32m+[m[32m          MaterialPageRoute(builder: (context) => const MenuRacePage()),[m
[32m+[m[32m        );[m
[32m+[m[32m      } else {[m
         ScaffoldMessenger.of(context).showSnackBar([m
[31m-          SnackBar(content: Text('Chyba přihlášení: $error')),[m
[32m+[m[32m          const SnackBar([m
[32m+[m[32m            content: Text('Přihlášení se nezdařilo'),[m
[32m+[m[32m          ),[m
         );[m
[31m-      } finally {[m
[31m-        setState(() {[m
[31m-          _isLoading = false;[m
[31m-        });[m
       }[m
[32m+[m
[32m+[m[32m      print('Login response: $value'); // Logování response z loginu[m
[32m+[m[32m    } catch (error, stackTrace) {[m
[32m+[m[32m      // Logování chyb a stack trace pro lepší diagnostiku[m
[32m+[m[32m      print('Chyba: $error');[m
[32m+[m[32m      print('StackTrace: $stackTrace');[m
[32m+[m
[32m+[m[32m      ScaffoldMessenger.of(context).showSnackBar([m
[32m+[m[32m        SnackBar([m
[32m+[m[32m          content: Text('Přihlášení se nezdařilo z důvodu: $error'),[m
[32m+[m[32m        ),[m
[32m+[m[32m      );[m
[32m+[m[32m    } finally {[m
[32m+[m[32m      setState(() {[m
[32m+[m[32m        _isLoading = false;[m
[32m+[m[32m      });[m
     }[m
[32m+[m[32m  } else {[m
[32m+[m[32m    print('Validation failed'); // Logování neúspěšné validace[m
   }[m
[32m+[m[32m}[m
[32m+[m
 [m
   @override[m
   Widget build(BuildContext context) {[m
     return Stack([m
       children: [[m
         Scaffold([m
[31m-          backgroundColor: Theme.of(context).scaffoldBackgroundColor,[m
[32m+[m[32m          backgroundColor: Colors.white,[m
           body: Padding([m
             padding: const EdgeInsets.symmetric(horizontal: 24.0),[m
             child: Center([m
[36m@@ -110,12 +127,12 @@[m [mclass _LoginPageState extends State<LoginPage> {[m
                   child: Column([m
                     mainAxisAlignment: MainAxisAlignment.center,[m
                     children: <Widget>[[m
[31m-                      Text([m
[32m+[m[32m                      const Text([m
                         'Přihlášení',[m
                         style: TextStyle([m
                           fontSize: 36,[m
                           fontWeight: FontWeight.bold,[m
[31m-                          color: Theme.of(context).colorScheme.secondary,[m
[32m+[m[32m                          color: Colors.black, // Červený text[m
                         ),[m
                       ),[m
                       const SizedBox(height: 40),[m
[36m@@ -135,7 +152,7 @@[m [mclass _LoginPageState extends State<LoginPage> {[m
                             _obscureText[m
                                 ? Icons.visibility[m
                                 : Icons.visibility_off,[m
[31m-                            color: Theme.of(context).colorScheme.onSurface,[m
[32m+[m[32m                            color: Colors.grey,[m
                           ),[m
                           onPressed: _togglePasswordView,[m
                         ),[m
[36m@@ -145,21 +162,18 @@[m [mclass _LoginPageState extends State<LoginPage> {[m
                         onPressed: _validateAndSubmit,[m
                         style: ElevatedButton.styleFrom([m
                           backgroundColor:[m
[31m-                              Theme.of(context).colorScheme.primary,[m
[32m+[m[32m                              const Color(0xFFFF8377), // Červená barva tlačítka[m
                           padding: const EdgeInsets.symmetric([m
[31m-                            horizontal: 50,[m
[31m-                            vertical: 15,[m
[31m-                          ),[m
[32m+[m[32m                              horizontal: 50, vertical: 15),[m
                           shape: RoundedRectangleBorder([m
                             borderRadius: BorderRadius.circular(30),[m
                           ),[m
                         ),[m
[31m-                        child: Text([m
[32m+[m[32m                        child: const Text([m
                           'Přihlásit se',[m
                           style: TextStyle([m
                             fontSize: 20,[m
[31m-                            fontWeight: FontWeight.bold,[m
[31m-                            color: Theme.of(context).colorScheme.onPrimary,[m
[32m+[m[32m                            color: Colors.white, // Bílý text tlačítka[m
                           ),[m
                         ),[m
                       ),[m
[36m@@ -172,12 +186,10 @@[m [mclass _LoginPageState extends State<LoginPage> {[m
         ),[m
         if (_isLoading)[m
           Container([m
[31m-            color: Colors.black.withAlpha((0.3 * 255).toInt()),[m
[31m-            child: Center([m
[31m-              child: Lottie.asset([m
[31m-                'assets/loading.json',[m
[31m-                width: 150,[m
[31m-                height: 150,[m
[32m+[m[32m            color: Colors.black.withOpacity(0.3),[m
[32m+[m[32m            child: const Center([m
[32m+[m[32m              child: CircularProgressIndicator([m
[32m+[m[32m                valueColor: AlwaysStoppedAnimation<Color>(Color(0xffdc2626)),[m
               ),[m
             ),[m
           ),[m
[36m@@ -194,29 +206,17 @@[m [mclass _LoginPageState extends State<LoginPage> {[m
   }) {[m
     return TextFormField([m
       controller: controller,[m
[31m-      style: TextStyle(color: Theme.of(context).colorScheme.onSurface),[m
       decoration: InputDecoration([m
         labelText: label,[m
[31m-        labelStyle: TextStyle([m
[31m-          color: Theme.of(context)[m
[31m-              .colorScheme[m
[31m-              .onSurface[m
[31m-              .withAlpha((0.7 * 255).toInt()),[m
[31m-        ),[m
[31m-        prefixIcon: Icon([m
[31m-          icon,[m
[31m-          color: Theme.of(context).colorScheme.primary,[m
[31m-        ),[m
[32m+[m[32m        labelStyle: const TextStyle(color: Colors.black54),[m
[32m+[m[32m        prefixIcon:[m
[32m+[m[32m            Icon(icon, color: Colors.black), // Ikona před textovým polem[m
         filled: true,[m
[31m-        fillColor: Theme.of(context).colorScheme.surface,[m
[32m+[m[32m        fillColor: Colors.grey[200], // Světle šedé pozadí textového pole[m
         border: OutlineInputBorder([m
           borderRadius: BorderRadius.circular(30),[m
           borderSide: BorderSide.none,[m
         ),[m
[31m-        focusedBorder: OutlineInputBorder([m
[31m-          borderRadius: BorderRadius.circular(30),[m
[31m-          borderSide: BorderSide(color: Theme.of(context).colorScheme.primary),[m
[31m-        ),[m
         suffixIcon: suffixIcon,[m
       ),[m
       obscureText: obscureText,[m
[1mdiff --git a/lib/pages/menu_race_page.dart b/lib/pages/menu_race_page.dart[m
[1mindex 45d98b4..e2372c0 100644[m
[1m--- a/lib/pages/menu_race_page.dart[m
[1m+++ b/lib/pages/menu_race_page.dart[m
[36m@@ -1,69 +1,71 @@[m
 import 'package:flutter/material.dart';[m
[31m-import 'package:flutter_background/flutter_background.dart';[m
[31m-import 'package:permission_handler/permission_handler.dart';[m
[31m-import 'package:laplink/services/race_service.dart';[m
[31m-import 'package:laplink/pages/results_page.dart';[m
[31m-import 'package:lottie/lottie.dart';[m
[31m-import 'package:laplink/pages/racebox_connection_page.dart';[m
[32m+[m[32mimport 'package:intl/intl.dart';[m
 import 'package:laplink/components/header.dart';[m
[32m+[m[32mimport 'package:laplink/pages/racebox_connection_page.dart';[m
[32m+[m[32mimport 'package:laplink/services/api_service.dart';[m
[32m+[m[32mimport 'package:shared_preferences/shared_preferences.dart';[m
[32m+[m[32mimport 'package:keep_screen_on/keep_screen_on.dart';[m
[32m+[m[32mimport 'package:laplink/pages/results_page.dart';[m
 [m
 class MenuRacePage extends StatelessWidget {[m
   const MenuRacePage({super.key});[m
 [m
[31m-  Future<void> _checkAndRequestPermissions() async {[m
[31m-    // Seznam požadovaných oprávnění[m
[31m-    List<Permission> permissions = [[m
[31m-      Permission.bluetooth,[m
[31m-      Permission.bluetoothScan,[m
[31m-      Permission.bluetoothConnect,[m
[31m-      Permission.location,[m
[31m-      Permission.notification, // Pro notifikace[m
[31m-    ];[m
[32m+[m[32m  Future<List<Map<String, dynamic>>> getDriverRaces() async {[m
[32m+[m[32m    KeepScreenOn.turnOff();[m
 [m
[31m-    // Kontrola dostupnosti oprávnění pro běh na pozadí[m
[31m-    bool hasBackgroundPermission = await FlutterBackground.hasPermissions;[m
[31m-    if (!hasBackgroundPermission) {[m
[31m-      bool initialized = await FlutterBackground.initialize([m
[31m-        androidConfig: const FlutterBackgroundAndroidConfig([m
[31m-          notificationTitle: "Aplikace běží na pozadí",[m
[31m-          notificationText: "Sbíráme data závodu na pozadí.",[m
[31m-          notificationImportance: AndroidNotificationImportance.high,[m
[31m-          notificationIcon:[m
[31m-              AndroidResource(name: 'background_icon', defType: 'drawable'),[m
[31m-        ),[m
[31m-      );[m
[31m-      if (initialized) {[m
[31m-        await FlutterBackground.enableBackgroundExecution();[m
[31m-      }[m
[32m+[m[32m    final prefs = await SharedPreferences.getInstance();[m
[32m+[m[32m    final apiClient = ApiClient();[m
[32m+[m[32m    await apiClient.initialize();[m
[32m+[m
[32m+[m[32m    // Získáme web_user z SharedPreferences[m
[32m+[m[32m    String? webUser = prefs.getString('web_user');[m
[32m+[m[32m    if (webUser == null) {[m
[32m+[m[32m      return []; // Pokud je webUser null, vrať prázdný seznam nebo ošetř chybu dle potřeby[m
     }[m
 [m
[31m-    // Žádost o ostatní oprávnění[m
[31m-    Map<Permission, PermissionStatus> statuses = await permissions.request();[m
[32m+[m[32m    try {[m
[32m+[m[32m      final races = await apiClient.getUserRaces(webUser);[m
[32m+[m[32m      List<Map<String, dynamic>> racesList =[m
[32m+[m[32m          List<Map<String, dynamic>>.from(races);[m
[32m+[m[32m      for (var race in racesList) {[m
[32m+[m[32m        bool isCompleted =[m
[32m+[m[32m            prefs.getBool('race_completed_${race['id']}') ?? false;[m
[32m+[m[32m        race['isCompleted'] = isCompleted;[m
[32m+[m[32m      }[m
[32m+[m[32m      return racesList;[m
[32m+[m[32m    } catch (error) {[m
[32m+[m[32m      return [];[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
 [m
[31m-    // Kontrola, zda všechna oprávnění byla udělena[m
[31m-    bool allGranted = statuses.values.every((status) => status.isGranted);[m
[31m-    /*if (!allGranted) {[m
[31m-      print("Některá oprávnění nebyla udělena.");[m
[31m-      // Zde můžete přidat dialog pro upozornění uživatele[m
[31m-    }*/[m
[32m+[m[32m  Future<void> _saveToPreferences(int eventPhaseId, int raceId) async {[m
[32m+[m[32m    final prefs = await SharedPreferences.getInstance();[m
[32m+[m[32m    await prefs.setInt('event_phase_id', eventPhaseId);[m
[32m+[m[32m    await prefs.setInt('race_id', raceId);[m
   }[m
 [m
   void _startTraining(BuildContext context, int raceId) async {[m
[31m-    await RaceService.saveEventPhase(1, raceId);[m
[31m-    _navigateToRaceStartPage(context);[m
[32m+[m[32m    await _saveToPreferences(1, raceId);[m
[32m+[m[32m    Navigator.push([m
[32m+[m[32m      context,[m
[32m+[m[32m      MaterialPageRoute([m
[32m+[m[32m        builder: (context) => const RaceStartPage(),[m
[32m+[m[32m      ),[m
[32m+[m[32m    );[m
   }[m
 [m
   void _startQualification(BuildContext context, int raceId) async {[m
[31m-    await RaceService.saveEventPhase(2, raceId);[m
[31m-    _navigateToRaceStartPage(context);[m
[32m+[m[32m    await _saveToPreferences(2, raceId);[m
[32m+[m[32m    Navigator.push([m
[32m+[m[32m      context,[m
[32m+[m[32m      MaterialPageRoute([m
[32m+[m[32m        builder: (context) => const RaceStartPage(),[m
[32m+[m[32m      ),[m
[32m+[m[32m    );[m
   }[m
 [m
   void _startRace(BuildContext context, int raceId) async {[m
[31m-    await RaceService.saveEventPhase(3, raceId);[m
[31m-    _navigateToRaceStartPage(context);[m
[31m-  }[m
[31m-[m
[31m-  void _navigateToRaceStartPage(BuildContext context) {[m
[32m+[m[32m    await _saveToPreferences(3, raceId);[m
     Navigator.push([m
       context,[m
       MaterialPageRoute([m
[36m@@ -72,20 +74,31 @@[m [mclass MenuRacePage extends StatelessWidget {[m
     );[m
   }[m
 [m
[31m-  void _navigateToRaceDetailsPage(BuildContext context, int raceId) async {[m
[31m-    final webUser = await RaceService.getWebUser();[m
[32m+[m[32m  String _formatDate(String dateString) {[m
[32m+[m[32m    DateTime parsedDate = DateTime.parse(dateString);[m
[32m+[m[32m    return DateFormat('dd.MM.yyyy').format(parsedDate);[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  Future<void> _navigateToRaceDetailsPage([m
[32m+[m[32m      BuildContext context, int eventPhaseId, int raceId) async {[m
[32m+[m[32m    // Získáme web_user ze SharedPreferences[m
[32m+[m[32m    final prefs = await SharedPreferences.getInstance();[m
[32m+[m[32m    String? webUser = prefs.getString('web_user');[m
     if (webUser == null) {[m
[32m+[m[32m      // Můžeme zobrazit chybu nebo dialog, pokud je null[m
       ScaffoldMessenger.of(context).showSnackBar([m
         const SnackBar(content: Text('Uživatel není přihlášen')),[m
       );[m
       return;[m
     }[m
[32m+[m
[32m+[m[32m    // Navigujeme na stránku s detaily závodu[m
     Navigator.push([m
       context,[m
       MaterialPageRoute([m
         builder: (context) => ResultsPage([m
[31m-          webUser: webUser,[m
[31m-          raceId: raceId,[m
[32m+[m[32m          webUser: webUser, // Předáme web_user[m
[32m+[m[32m          raceId: raceId, // Předáme race_id[m
         ),[m
       ),[m
     );[m
[36m@@ -93,211 +106,223 @@[m [mclass MenuRacePage extends StatelessWidget {[m
 [m
   @override[m
   Widget build(BuildContext context) {[m
[31m-    _checkAndRequestPermissions(); // Kontrola oprávnění při sestavení widgetu[m
[31m-[m
     return Scaffold([m
       appBar: AppBar([m
[31m-        automaticallyImplyLeading: false,[m
         title: const Header(),[m
[31m-        backgroundColor: Theme.of(context).colorScheme.tertiary,[m
[31m-        centerTitle: true,[m
[32m+[m[32m        backgroundColor: const Color(0xffdc2626),[m
       ),[m
[31m-      backgroundColor: Theme.of(context).scaffoldBackgroundColor,[m
       body: FutureBuilder<List<Map<String, dynamic>>>([m
[31m-        future: RaceService.getDriverRaces(),[m
[32m+[m[32m        future: getDriverRaces(),[m
         builder: (context, snapshot) {[m
           if (snapshot.connectionState == ConnectionState.waiting) {[m
[31m-            return Center([m
[31m-              child: Lottie.asset([m
[31m-                'assets/loading.json',[m
[31m-                width: 150,[m
[31m-                height: 150,[m
[31m-              ),[m
[31m-            );[m
[32m+[m[32m            return const Center(child: CircularProgressIndicator());[m
           } else if (snapshot.hasError) {[m
[31m-            return _buildErrorState(context);[m
[32m+[m[32m            return const Center(child: Text('Chyba při načítání závodů'));[m
           } else if (!snapshot.hasData || snapshot.data!.isEmpty) {[m
[31m-            return _buildEmptyState(context);[m
[32m+[m[32m            return const Center(child: Text('Žádné závody k dispozici'));[m
           } else {[m
             final races = snapshot.data!;[m
[31m-            return _buildRaceList(context, races);[m
[32m+[m[32m            return ListView.builder([m
[32m+[m[32m              itemCount: races.length,[m
[32m+[m[32m              itemBuilder: (context, index) {[m
[32m+[m[32m                final race = races[index];[m
[32m+[m[32m                return Padding([m
[32m+[m[32m                  padding:[m
[32m+[m[32m                      const EdgeInsets.symmetric(horizontal: 16, vertical: 8),[m
[32m+[m[32m                  child: Card([m
[32m+[m[32m                    shape: RoundedRectangleBorder([m
[32m+[m[32m                      borderRadius: BorderRadius.circular(16),[m
[32m+[m[32m                    ),[m
[32m+[m[32m                    elevation: 5,[m
[32m+[m[32m                    child: Padding([m
[32m+[m[32m                      padding: const EdgeInsets.all(16.0),[m
[32m+[m[32m                      child: Column([m
[32m+[m[32m                        crossAxisAlignment: CrossAxisAlignment.start,[m
[32m+[m[32m                        children: <Widget>[[m
[32m+[m[32m                          Row([m
[32m+[m[32m                            children: [[m
[32m+[m[32m                              Icon([m
[32m+[m[32m                                race['event_phase_id'] == 1[m
[32m+[m[32m                                    ? Icons.directions_car[m
[32m+[m[32m                                    : race['event_phase_id'] == 2[m
[32m+[m[32m                                        ? Icons.timer[m
[32m+[m[32m                                        : Icons.sports_motorsports,[m
[32m+[m[32m                                color: Colors.black,[m
[32m+[m[32m                                size: 40,[m
[32m+[m[32m                              ),[m
[32m+[m[32m                              const SizedBox(width: 16),[m
[32m+[m[32m                              Expanded([m
[32m+[m[32m                                child: Text([m
[32m+[m[32m                                  race['name'],[m
[32m+[m[32m                                  style: const TextStyle([m
[32m+[m[32m                                    fontSize: 24,[m
[32m+[m[32m                                    fontWeight: FontWeight.bold,[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ),[m
[32m+[m[32m                              ),[m
[32m+[m[32m                            ],[m
[32m+[m[32m                          ),[m
[32m+[m[32m                          const SizedBox(height: 16),[m
[32m+[m[32m                          Column([m
[32m+[m[32m                            crossAxisAlignment: CrossAxisAlignment.start,[m
[32m+[m[32m                            children: [[m
[32m+[m[32m                              Row([m
[32m+[m[32m                                children: [[m
[32m+[m[32m                                  const Icon(Icons.calendar_today,[m
[32m+[m[32m                                      color: Colors.grey),[m
[32m+[m[32m                                  const SizedBox(width: 8),[m
[32m+[m[32m                                  Text([m
[32m+[m[32m                                    'Datum: ${_formatDate(race['date'])}',[m
[32m+[m[32m                                    style: const TextStyle(fontSize: 16),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ],[m
[32m+[m[32m                              ),[m
[32m+[m[32m                              const SizedBox(height: 8),[m
[32m+[m[32m                              Row([m
[32m+[m[32m                                children: [[m
[32m+[m[32m                                  const Icon(Icons.location_on,[m
[32m+[m[32m                                      color: Colors.grey),[m
[32m+[m[32m                                  const SizedBox(width: 8),[m
[32m+[m[32m                                  Text([m
[32m+[m[32m                                    'Lokalita: ${race['location']}',[m
[32m+[m[32m                                    style: const TextStyle(fontSize: 16),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ],[m
[32m+[m[32m                              ),[m
[32m+[m[32m                              const SizedBox(height: 8),[m
[32m+[m[32m                              Row([m
[32m+[m[32m                                children: [[m
[32m+[m[32m                                  const Icon(Icons.flag, color: Colors.grey),[m
[32m+[m[32m                                  const SizedBox(width: 8),[m
[32m+[m[32m                                  Text([m
[32m+[m[32m                                    'Počet kol: ${race['number_of_laps']}',[m
[32m+[m[32m                                    style: const TextStyle(fontSize: 16),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ],[m
[32m+[m[32m                              ),[m
[32m+[m[32m                            ],[m
[32m+[m[32m                          ),[m
[32m+[m[32m                          const SizedBox(height: 20),[m
[32m+[m[32m                          Center([m
[32m+[m[32m                            child: Column([m
[32m+[m[32m                              children: [[m
[32m+[m[32m                                SizedBox([m
[32m+[m[32m                                  width: double.infinity,[m
[32m+[m[32m                                  child: ElevatedButton.icon([m
[32m+[m[32m                                    onPressed: race['event_phase_id'] == 1[m
[32m+[m[32m                                        ? () =>[m
[32m+[m[32m                                            _startTraining(context, race['id'])[m
[32m+[m[32m                                        : null,[m
[32m+[m[32m                                    icon: const Icon(Icons.directions_run,[m
[32m+[m[32m                                        color: Colors.white),[m
[32m+[m[32m                                    label: const Text([m
[32m+[m[32m                                      'Zahájit trénink',[m
[32m+[m[32m                                      style: TextStyle(color: Colors.white),[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                    style: ElevatedButton.styleFrom([m
[32m+[m[32m                                      backgroundColor: const Color(0xffFF7468),[m
[32m+[m[32m                                      padding: const EdgeInsets.symmetric([m
[32m+[m[32m                                          vertical: 15),[m
[32m+[m[32m                                      shape: RoundedRectangleBorder([m
[32m+[m[32m                                        borderRadius: BorderRadius.circular(30),[m
[32m+[m[32m                                      ),[m
[32m+[m[32m                                      elevation: 5,[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ),[m
[32m+[m[32m                                const SizedBox(height: 10),[m
[32m+[m[32m                                SizedBox([m
[32m+[m[32m                                  width: double.infinity,[m
[32m+[m[32m                                  child: ElevatedButton.icon([m
[32m+[m[32m                                    onPressed: race['event_phase_id'] == 2[m
[32m+[m[32m                                        ? () => _startQualification([m
[32m+[m[32m                                            context, race['id'])[m
[32m+[m[32m                                        : null,[m
[32m+[m[32m                                    icon: const Icon(Icons.emoji_events,[m
[32m+[m[32m                                        color: Colors.white),[m
[32m+[m[32m                                    label: const Text([m
[32m+[m[32m                                      'Zahájit Kvalifikaci',[m
[32m+[m[32m                                      style: TextStyle(color: Colors.white),[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                    style: ElevatedButton.styleFrom([m
[32m+[m[32m                                      backgroundColor: const Color(0xffFF7A71),[m
[32m+[m[32m                                      padding: const EdgeInsets.symmetric([m
[32m+[m[32m                                          vertical: 15),[m
[32m+[m[32m                                      shape: RoundedRectangleBorder([m
[32m+[m[32m                                        borderRadius: BorderRadius.circular(30),[m
[32m+[m[32m                                      ),[m
[32m+[m[32m                                      elevation: 5,[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ),[m
[32m+[m[32m                                const SizedBox(height: 10),[m
[32m+[m[32m                                SizedBox([m
[32m+[m[32m                                  width: double.infinity,[m
[32m+[m[32m                                  child: ElevatedButton.icon([m
[32m+[m[32m                                    onPressed: (race['event_phase_id'] == 3 &&[m
[32m+[m[32m                                            !race['isCompleted'])[m
[32m+[m[32m                                        ? () => _startRace(context, race['id'])[m
[32m+[m[32m                                        : null,[m
[32m+[m[32m                                    icon: const Icon(Icons.sports_score,[m
[32m+[m[32m                                        color: Colors.white),[m
[32m+[m[32m                                    label: const Text([m
[32m+[m[32m                                      'Začít závod',[m
[32m+[m[32m                                      style: TextStyle(color: Colors.white),[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                    style: ElevatedButton.styleFrom([m
[32m+[m[32m                                      backgroundColor: const Color(0xffFF7F7F),[m
[32m+[m[32m                                      padding: const EdgeInsets.symmetric([m
[32m+[m[32m                                          vertical: 15),[m
[32m+[m[32m                                      shape: RoundedRectangleBorder([m
[32m+[m[32m                                        borderRadius: BorderRadius.circular(30),[m
[32m+[m[32m                                      ),[m
[32m+[m[32m                                      elevation: 5,[m
[32m+[m[32m                                      foregroundColor: race['isCompleted'][m
[32m+[m[32m                                          ? Colors.grey[m
[32m+[m[32m                                          : Colors.white,[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ),[m
[32m+[m[32m                                const SizedBox(height: 10),[m
[32m+[m[32m                                SizedBox([m
[32m+[m[32m                                  width: double.infinity,[m
[32m+[m[32m                                  child: ElevatedButton.icon([m
[32m+[m[32m                                    onPressed: () => _navigateToRaceDetailsPage([m
[32m+[m[32m                                      context,[m
[32m+[m[32m                                      race[[m
[32m+[m[32m                                          'event_phase_id'], // Předáme event_phase_id[m
[32m+[m[32m                                      race['id'], // Předáme race_id[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                    icon: const Icon(Icons.access_time,[m
[32m+[m[32m                                        color: Colors.white),[m
[32m+[m[32m                                    label: const Text([m
[32m+[m[32m                                      'Zobrazit časy závodu',[m
[32m+[m[32m                                      style: TextStyle(color: Colors.white),[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                    style: ElevatedButton.styleFrom([m
[32m+[m[32m                                      backgroundColor: const Color(0xff607D8B),[m
[32m+[m[32m                                      padding: const EdgeInsets.symmetric([m
[32m+[m[32m                                          vertical: 15),[m
[32m+[m[32m                                      shape: RoundedRectangleBorder([m
[32m+[m[32m                                        borderRadius: BorderRadius.circular(30),[m
[32m+[m[32m                                      ),[m
[32m+[m[32m                                      elevation: 5,[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ),[m
[32m+[m[32m                              ],[m
[32m+[m[32m                            ),[m
[32m+[m[32m                          ),[m
[32m+[m[32m                        ],[m
[32m+[m[32m                      ),[m
[32m+[m[32m                    ),[m
[32m+[m[32m                  ),[m
[32m+[m[32m                );[m
[32m+[m[32m              },[m
[32m+[m[32m            );[m
           }[m
         },[m
       ),[m
     );[m
   }[m
[31m-[m
[31m-  Widget _buildRaceList([m
[31m-      BuildContext context, List<Map<String, dynamic>> races) {[m
[31m-    return ListView.builder([m
[31m-      itemCount: races.length,[m
[31m-      padding: const EdgeInsets.all(12),[m
[31m-      itemBuilder: (context, index) {[m
[31m-        final race = races[index];[m
[31m-        return Card([m
[31m-          color: Theme.of(context).colorScheme.surface,[m
[31m-          elevation: 3,[m
[31m-          shape: RoundedRectangleBorder([m
[31m-            borderRadius: BorderRadius.circular(12),[m
[31m-          ),[m
[31m-          child: Padding([m
[31m-            padding: const EdgeInsets.all(12.0),[m
[31m-            child: Column([m
[31m-              crossAxisAlignment: CrossAxisAlignment.start,[m
[31m-              children: [[m
[31m-                _buildRaceHeader(context, race),[m
[31m-                const SizedBox(height: 8),[m
[31m-                _buildRaceDetails(context, race),[m
[31m-                const SizedBox(height: 12),[m
[31m-                _buildActionButtons(context, race),[m
[31m-                const SizedBox(height: 8),[m
[31m-                _buildResultsButton(context, race['id']),[m
[31m-              ],[m
[31m-            ),[m
[31m-          ),[m
[31m-        );[m
[31m-      },[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  Widget _buildRaceHeader(BuildContext context, Map<String, dynamic> race) {[m
[31m-    return Center([m
[31m-      child: Text([m
[31m-        race['name'] ?? 'Unnamed Race',[m
[31m-        style: TextStyle([m
[31m-          fontSize: 24,[m
[31m-          fontWeight: FontWeight.bold,[m
[31m-          color: Theme.of(context).colorScheme.onSurface,[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  Widget _buildRaceDetails(BuildContext context, Map<String, dynamic> race) {[m
[31m-    String formattedDate = 'N/A';[m
[31m-    if (race['date'] != null) {[m
[31m-      try {[m
[31m-        final parsedDate = DateTime.parse(race['date']);[m
[31m-        formattedDate =[m
[31m-            "${parsedDate.day.toString().padLeft(2, '0')}.${parsedDate.month.toString().padLeft(2, '0')}.${parsedDate.year}";[m
[31m-      } catch (e) {[m
[31m-        formattedDate = 'Neplatné datum';[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    String lapsText =[m
[31m-        'Počet kol: ${(race['event_phase_id'] == 1 || race['event_phase_id'] == 2) ? 'Neomezeno' : (race['number_of_laps']?.toString() ?? 'N/A')}';[m
[31m-[m
[31m-    return Column([m
[31m-      crossAxisAlignment: CrossAxisAlignment.start,[m
[31m-      children: [[m
[31m-        _buildDetailRow(context, Icons.calendar_today, formattedDate),[m
[31m-        _buildDetailRow(context, Icons.location_pin,[m
[31m-            'Lokace: ${race['location'] ?? 'N/A'}'),[m
[31m-        _buildDetailRow(context, Icons.flag, lapsText),[m
[31m-      ],[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  Widget _buildDetailRow(BuildContext context, IconData icon, String text) {[m
[31m-    return Row([m
[31m-      children: [[m
[31m-        Icon(icon, color: Theme.of(context).colorScheme.primary, size: 20),[m
[31m-        const SizedBox(width: 8),[m
[31m-        Text([m
[31m-          text,[m
[31m-          style: TextStyle([m
[31m-            color: Theme.of(context)[m
[31m-                .colorScheme[m
[31m-                .onSurface[m
[31m-                .withAlpha((0.8 * 255).toInt()),[m
[31m-            fontSize: 16,[m
[31m-          ),[m
[31m-        ),[m
[31m-      ],[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  Widget _buildActionButtons(BuildContext context, Map<String, dynamic> race) {[m
[31m-    String buttonText;[m
[31m-    IconData buttonIcon;[m
[31m-    VoidCallback? onPressed;[m
[31m-[m
[31m-    switch (race['event_phase_id']) {[m
[31m-      case 1: // Trénink[m
[31m-        buttonText = 'Zahájit trénink';[m
[31m-        buttonIcon = Icons.directions_run;[m
[31m-        onPressed = () => _startTraining(context, race['id']);[m
[31m-        break;[m
[31m-      case 2: // Kvalifikace[m
[31m-        buttonText = 'Zahájit kvalifikaci';[m
[31m-        buttonIcon = Icons.timer;[m
[31m-        onPressed = () => _startQualification(context, race['id']);[m
[31m-        break;[m
[31m-      case 3: // Závod[m
[31m-        buttonText = 'Zahájit závod';[m
[31m-        buttonIcon = Icons.flag;[m
[31m-[m
[31m-        // Pokud je závod již ve stavu "finished == 1", tlačítko bude neaktivní[m
[31m-        if (race['finished'] == 1) {[m
[31m-          onPressed = null;[m
[31m-        } else {[m
[31m-          onPressed = () => _startRace(context, race['id']);[m
[31m-        }[m
[31m-        break;[m
[31m-      default:[m
[31m-        buttonText = 'Neznámá fáze';[m
[31m-        buttonIcon = Icons.help_outline;[m
[31m-        onPressed = () {}; // Kliknutí v neznámé fázi nedělá nic[m
[31m-    }[m
[31m-[m
[31m-    return ElevatedButton.icon([m
[31m-      // Pokud onPressed == null, ElevatedButton se sám vypne (disabled)[m
[31m-      onPressed: onPressed,[m
[31m-      icon: Icon(buttonIcon, color: Colors.white),[m
[31m-      label: Text(buttonText),[m
[31m-      style: ElevatedButton.styleFrom([m
[31m-        backgroundColor: Theme.of(context).colorScheme.primary,[m
[31m-        foregroundColor: Colors.white,[m
[31m-        minimumSize: const Size(double.infinity, 48),[m
[31m-        shape: RoundedRectangleBorder([m
[31m-          borderRadius: BorderRadius.circular(12),[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  Widget _buildResultsButton(BuildContext context, int raceId) {[m
[31m-    return OutlinedButton.icon([m
[31m-      onPressed: () => _navigateToRaceDetailsPage(context, raceId),[m
[31m-      icon: const Icon(Icons.access_time),[m
[31m-      label: const Text('Zobrazit výsledky'),[m
[31m-      style: OutlinedButton.styleFrom([m
[31m-        foregroundColor: Theme.of(context).colorScheme.primary,[m
[31m-        minimumSize: const Size(double.infinity, 48),[m
[31m-        shape: RoundedRectangleBorder([m
[31m-          borderRadius: BorderRadius.circular(12),[m
[31m-        ),[m
[31m-        side: BorderSide(color: Theme.of(context).colorScheme.primary),[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  Widget _buildErrorState(BuildContext context) {[m
[31m-    return Center([m
[31m-      child: Text([m
[31m-        'Chyba při načítání závodů',[m
[31m-        style: TextStyle(color: Theme.of(context).colorScheme.onSurface),[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  Widget _buildEmptyState(BuildContext context) {[m
[31m-    return Center([m
[31m-      child: Text([m
[31m-        'Žádné závody k dispozici',[m
[31m-        style: TextStyle(color: Theme.of(context).colorScheme.onSurface),[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
 }[m
[1mdiff --git a/lib/pages/race pages/live_data_page.dart b/lib/pages/race pages/live_data_page.dart[m
[1mdeleted file mode 100644[m
[1mindex 8f1cd39..0000000[m
[1m--- a/lib/pages/race pages/live_data_page.dart[m	
[1m+++ /dev/null[m
[36m@@ -1,195 +0,0 @@[m
[31m-import 'dart:async';[m
[31m-import 'dart:typed_data';[m
[31m-import 'package:flutter/material.dart';[m
[31m-import 'package:flutter_blue_plus/flutter_blue_plus.dart';[m
[31m-[m
[31m-class LiveDataPage extends StatefulWidget {[m
[31m-  final BluetoothDevice device;[m
[31m-  final BluetoothCharacteristic characteristic;[m
[31m-[m
[31m-  const LiveDataPage({[m
[31m-    super.key,[m
[31m-    required this.device,[m
[31m-    required this.characteristic,[m
[31m-  });[m
[31m-[m
[31m-  @override[m
[31m-  _LiveDataPageState createState() => _LiveDataPageState();[m
[31m-}[m
[31m-[m
[31m-class _LiveDataPageState extends State<LiveDataPage> {[m
[31m-  List<int> buffer = [];[m
[31m-  Map<String, dynamic> decodedData = {};[m
[31m-  String rawPacket = "";[m
[31m-  late StreamSubscription<List<int>> _notificationSubscription;[m
[31m-[m
[31m-  @override[m
[31m-  void initState() {[m
[31m-    super.initState();[m
[31m-    _listenToCharacteristic();[m
[31m-  }[m
[31m-[m
[31m-  void _listenToCharacteristic() {[m
[31m-    _notificationSubscription =[m
[31m-        widget.characteristic.lastValueStream.listen((data) {[m
[31m-      buffer.addAll(data);[m
[31m-      _processData();[m
[31m-    });[m
[31m-    widget.characteristic.setNotifyValue(true);[m
[31m-  }[m
[31m-[m
[31m-  void _processData() {[m
[31m-    if (buffer.length < 8) return;[m
[31m-[m
[31m-    int startIndex = buffer.indexOf(0xB5);[m
[31m-    if (startIndex == -1 || startIndex + 6 >= buffer.length) {[m
[31m-      buffer.clear();[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    if (buffer[startIndex + 1] == 0x62) {[m
[31m-      int length = buffer[startIndex + 4] | (buffer[startIndex + 5] << 8);[m
[31m-      int packetSize = 6 + length + 2;[m
[31m-[m
[31m-      if (startIndex + packetSize <= buffer.length) {[m
[31m-        Uint8List packet = Uint8List.fromList([m
[31m-            buffer.sublist(startIndex, startIndex + packetSize));[m
[31m-        buffer = buffer.sublist(startIndex + packetSize);[m
[31m-[m
[31m-        if (_validateChecksum(packet)) {[m
[31m-          setState(() {[m
[31m-            rawPacket = packet[m
[31m-                .map((byte) => byte.toRadixString(16).padLeft(2, '0'))[m
[31m-                .join(' ');[m
[31m-            _decodePacket(packet.sublist(6, 6 + length));[m
[31m-          });[m
[31m-        }[m
[31m-      }[m
[31m-    } else {[m
[31m-      buffer.removeAt(0);[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  void _decodePacket(Uint8List payload) {[m
[31m-    if (payload.isEmpty) return;[m
[31m-[m
[31m-    bool isCharging = (payload[67] & 0x80) != 0;[m
[31m-[m
[31m-    decodedData = {[m
[31m-      "iTOW": _getUint32(payload, 0),[m
[31m-      "Year": _getUint16(payload, 4),[m
[31m-      "Month": payload[6],[m
[31m-      "Day": payload[7],[m
[31m-      "Hour": payload[8],[m
[31m-      "Minute": payload[9],[m
[31m-      "Second": payload[10],[m
[31m-      "Validity Flags": payload[11],[m
[31m-      "Time Accuracy": _getUint32(payload, 12),[m
[31m-      "Nanoseconds": _getInt32(payload, 16),[m
[31m-      "Fix Status": payload[20],[m
[31m-      "Fix Status Flags": payload[21],[m
[31m-      "Date/Time Flags": payload[22],[m
[31m-      "Number of SVs": payload[23],[m
[31m-      "Longitude": _getInt32(payload, 24) / 1e7,[m
[31m-      "Latitude": _getInt32(payload, 28) / 1e7,[m
[31m-      "WGS Altitude": _getInt32(payload, 32) / 1000.0,[m
[31m-      "MSL Altitude": _getInt32(payload, 36) / 1000.0,[m
[31m-      "Horizontal Accuracy": _getUint32(payload, 40) / 1000.0,[m
[31m-      "Vertical Accuracy": _getUint32(payload, 44) / 1000.0,[m
[31m-      "Speed": _getInt32(payload, 48) / 1000.0,[m
[31m-      "Heading": _getInt32(payload, 52) / 1e5,[m
[31m-      "Speed Accuracy": _getUint32(payload, 56) / 1000.0,[m
[31m-      "Heading Accuracy": _getUint32(payload, 60) / 1e5,[m
[31m-      "PDOP": _getUint16(payload, 64) / 100.0,[m
[31m-      "Lat/Lon Flags": payload[66],[m
[31m-      "Battery Status": payload[67] & 0x7F,[m
[31m-      "Is Charging": isCharging ? "Yes" : "No",[m
[31m-      "GForceX": _getInt16(payload, 68) / 1000.0,[m
[31m-      "GForceY": _getInt16(payload, 70) / 1000.0,[m
[31m-      "GForceZ": _getInt16(payload, 72) / 1000.0,[m
[31m-      "Rotation Rate X": _getInt16(payload, 74) / 100.0,[m
[31m-      "Rotation Rate Y": _getInt16(payload, 76) / 100.0,[m
[31m-      "Rotation Rate Z": _getInt16(payload, 78) / 100.0,[m
[31m-    };[m
[31m-  }[m
[31m-[m
[31m-  bool _validateChecksum(Uint8List packet) {[m
[31m-    int length = packet.length;[m
[31m-    int ckA = 0, ckB = 0;[m
[31m-    for (int i = 2; i < length - 2; i++) {[m
[31m-      ckA = (ckA + packet[i]) & 0xFF;[m
[31m-      ckB = (ckB + ckA) & 0xFF;[m
[31m-    }[m
[31m-    return ckA == packet[length - 2] && ckB == packet[length - 1];[m
[31m-  }[m
[31m-[m
[31m-  int _getUint32(Uint8List data, int offset) {[m
[31m-    return data[offset] |[m
[31m-        (data[offset + 1] << 8) |[m
[31m-        (data[offset + 2] << 16) |[m
[31m-        (data[offset + 3] << 24);[m
[31m-  }[m
[31m-[m
[31m-  int _getUint16(Uint8List data, int offset) {[m
[31m-    return data[offset] | (data[offset + 1] << 8);[m
[31m-  }[m
[31m-[m
[31m-  int _getInt32(Uint8List data, int offset) {[m
[31m-    return data[offset] |[m
[31m-        (data[offset + 1] << 8) |[m
[31m-        (data[offset + 2] << 16) |[m
[31m-        (data[offset + 3] << 24);[m
[31m-  }[m
[31m-[m
[31m-  int _getInt16(Uint8List data, int offset) {[m
[31m-    return data[offset] | (data[offset + 1] << 8);[m
[31m-  }[m
[31m-[m
[31m-  @override[m
[31m-  void dispose() {[m
[31m-    _notificationSubscription.cancel();[m
[31m-    widget.characteristic.setNotifyValue(false);[m
[31m-    widget.device.disconnect();[m
[31m-    super.dispose();[m
[31m-  }[m
[31m-[m
[31m-  @override[m
[31m-  Widget build(BuildContext context) {[m
[31m-    return Scaffold([m
[31m-      appBar: AppBar([m
[31m-        title: const Text('Live Data View'),[m
[31m-        backgroundColor: Theme.of(context).colorScheme.tertiary,[m
[31m-      ),[m
[31m-      body: Padding([m
[31m-        padding: const EdgeInsets.all(16.0),[m
[31m-        child: Column([m
[31m-          crossAxisAlignment: CrossAxisAlignment.start,[m
[31m-          children: [[m
[31m-            Expanded([m
[31m-              child: ListView([m
[31m-                children: decodedData.entries.map((entry) {[m
[31m-                  return Padding([m
[31m-                    padding: const EdgeInsets.symmetric(vertical: 8.0),[m
[31m-                    child: Row([m
[31m-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
[31m-                      children: [[m
[31m-                        Text(entry.key,[m
[31m-                            style: Theme.of(context).textTheme.bodyMedium),[m
[31m-                        Text(entry.value.toString(),[m
[31m-                            style: Theme.of(context).textTheme.bodyMedium),[m
[31m-                      ],[m
[31m-                    ),[m
[31m-                  );[m
[31m-                }).toList(),[m
[31m-              ),[m
[31m-            ),[m
[31m-            const Divider(),[m
[31m-            const Text('Raw Packet:',[m
[31m-                style: TextStyle(fontWeight: FontWeight.bold)),[m
[31m-            Text(rawPacket, style: Theme.of(context).textTheme.bodySmall),[m
[31m-          ],[m
[31m-        ),[m
[31m-      ),[m
[31m-    );[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/pages/race pages/race_finished_page.dart b/lib/pages/race pages/race_finished_page.dart[m
[1mindex d23a97a..ba6c509 100644[m
[1m--- a/lib/pages/race pages/race_finished_page.dart[m	
[1m+++ b/lib/pages/race pages/race_finished_page.dart[m	
[36m@@ -5,8 +5,7 @@[m [mclass RaceFinishedPage extends StatelessWidget {[m
   final String message;[m
   final double time;[m
 [m
[31m-  const RaceFinishedPage([m
[31m-      {super.key, required this.message, required this.time});[m
[32m+[m[32m  const RaceFinishedPage({super.key, required this.message, required this.time});[m
 [m
   String formatTime(double timeInSeconds) {[m
     int minutes = timeInSeconds ~/ 60;[m
[36m@@ -20,39 +19,22 @@[m [mclass RaceFinishedPage extends StatelessWidget {[m
 [m
   @override[m
   Widget build(BuildContext context) {[m
[31m-    final theme = Theme.of(context);[m
[31m-[m
     return Scaffold([m
       appBar: AppBar([m
[31m-        title: Text([m
[31m-          'Závod dokončen',[m
[31m-          style: TextStyle([m
[31m-            color: theme.colorScheme.onSurface, // Dynamická barva textu[m
[31m-            fontWeight: FontWeight.bold,[m
[31m-            fontSize: 18,[m
[31m-          ),[m
[31m-        ),[m
[32m+[m[32m        title: const Text('Závod dokončen'),[m
         centerTitle: true,[m
[31m-        backgroundColor:[m
[31m-            Theme.of(context).scaffoldBackgroundColor, // Dynamická barva pozadí[m
[32m+[m[32m        backgroundColor: Colors.white,[m
         leading: IconButton([m
[31m-          icon: Icon(Icons.arrow_back, color: theme.colorScheme.onSurface),[m
[32m+[m[32m          icon: const Icon(Icons.arrow_back),[m
           onPressed: () {[m
             Navigator.pop(context);[m
           },[m
         ),[m
       ),[m
       body: Container([m
[31m-        decoration: BoxDecoration([m
[32m+[m[32m        decoration: const BoxDecoration([m
           gradient: LinearGradient([m
[31m-            colors: theme.brightness == Brightness.dark[m
[31m-                ? [[m
[31m-                    Theme.of(context).scaffoldBackgroundColor,[m
[31m-                  ][m
[31m-                : [[m
[31m-                    theme.colorScheme.onTertiary.withAlpha((0.1 * 255).toInt()),[m
[31m-                    theme.colorScheme.onTertiary.withAlpha((0.3 * 255).toInt()),[m
[31m-                  ], // Gradient se mění podle módu[m
[32m+[m[32m            colors: [Colors.white, Color.fromARGB(199, 255, 255, 255)],[m
             begin: Alignment.topLeft,[m
             end: Alignment.bottomRight,[m
           ),[m
[36m@@ -61,19 +43,20 @@[m [mclass RaceFinishedPage extends StatelessWidget {[m
           child: Column([m
             mainAxisAlignment: MainAxisAlignment.center,[m
             children: [[m
[31m-              Icon([m
[32m+[m[32m              const Icon([m
                 Icons.flag_rounded,[m
                 size: 100,[m
[31m-                color: theme.colorScheme.secondary, // Dynamická barva ikony[m
[32m+[m[32m                color: Colors.black,[m
               ),[m
               const SizedBox(height: 20),[m
[32m+[m[32m              // Conditional rendering of the message with formatted time[m
               Text([m
                 time == 0.0 ? message : '$message ${formatTime(time)}',[m
                 textAlign: TextAlign.center,[m
[31m-                style: TextStyle([m
[32m+[m[32m                style: const TextStyle([m
                   fontSize: 36,[m
                   fontWeight: FontWeight.bold,[m
[31m-                  color: theme.colorScheme.onSurface, // Dynamická barva textu[m
[32m+[m[32m                  color: Colors.black,[m
                 ),[m
               ),[m
               const SizedBox(height: 30),[m
[36m@@ -81,21 +64,16 @@[m [mclass RaceFinishedPage extends StatelessWidget {[m
                 onPressed: () {[m
                   Navigator.pushReplacement([m
                     context,[m
[31m-                    MaterialPageRoute([m
[31m-                        builder: (context) => const MenuRacePage()),[m
[32m+[m[32m                    MaterialPageRoute(builder: (context) => const MenuRacePage()),[m
                   );[m
                 },[m
[31m-                icon: Icon(Icons.home, color: theme.colorScheme.onSurface),[m
[31m-                label: Text([m
[32m+[m[32m                icon: const Icon(Icons.home, color: Colors.black),[m
[32m+[m[32m                label: const Text([m
                   'Zpět na hlavní obrazovku',[m
[31m-                  style: TextStyle([m
[31m-                    fontSize: 20,[m
[31m-                    color: theme.colorScheme.onPrimary, // Dynamická barva textu[m
[31m-                  ),[m
[32m+[m[32m                  style: TextStyle(fontSize: 20, color: Colors.white),[m
                 ),[m
                 style: ElevatedButton.styleFrom([m
[31m-                  backgroundColor:[m
[31m-                      theme.colorScheme.primary, // Primární barva tlačítka[m
[32m+[m[32m                  backgroundColor: const Color(0xFFFF8377),[m
                   padding: const EdgeInsets.symmetric([m
                     horizontal: 40,[m
                     vertical: 20,[m
[1mdiff --git a/lib/pages/race pages/race_page.dart b/lib/pages/race pages/race_page.dart[m
[1mindex 064988d..f3427ea 100644[m
[1m--- a/lib/pages/race pages/race_page.dart[m	
[1m+++ b/lib/pages/race pages/race_page.dart[m	
[36m@@ -1,22 +1,14 @@[m
[31m-// ignore_for_file: unused_field[m
[31m-[m
 import 'dart:async';[m
 import 'dart:typed_data';[m
 import 'package:flutter/material.dart';[m
 import 'package:flutter_blue_plus/flutter_blue_plus.dart';[m
[31m-import 'package:fluttertoast/fluttertoast.dart';[m
[31m-import 'package:laplink/utils/battery_helper.dart';[m
 import 'dart:math';[m
 import 'package:shared_preferences/shared_preferences.dart';[m
 import 'package:laplink/services/api_service.dart';[m
 import 'package:laplink/pages/race%20pages/race_finished_page.dart';[m
 import 'package:keep_screen_on/keep_screen_on.dart';[m
[32m+[m[32mimport 'package:flutter_background/flutter_background.dart';[m
 import 'package:awesome_notifications/awesome_notifications.dart';[m
[31m-import 'package:laplink/utils/time_formatters.dart';[m
[31m-import 'package:laplink/components/stat_card.dart';[m
[31m-import 'package:laplink/services/background_service.dart';[m
[31m-import 'package:laplink/components/lap_time_table.dart';[m
[31m-import 'package:battery_plus/battery_plus.dart';[m
 [m
 class RacePage extends StatefulWidget {[m
   final BluetoothDevice device;[m
[36m@@ -55,63 +47,23 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
   double currentLongitude = 0.0;[m
   bool isLoading = true;[m
   Timer? _notificationTimer;[m
[31m-  bool isNotificationActive = false;[m
 [m
   final ScrollController _scrollController = ScrollController();[m
   final _bufferStreamController = StreamController<Uint8List>.broadcast();[m
   late StreamSubscription _bufferSubscription;[m
[31m-  bool isCalibrating = true;[m
[31m-  final StatCard statCard = StatCard();[m
[31m-  final BatteryHelper batteryHelper = BatteryHelper();[m
[31m-  late BackgroundService _backgroundService;[m
[31m-  bool dnf = false;[m
[31m-  int lapsOnTires = 0;[m
[31m-[m
[31m-  final Battery _battery = Battery();[m
[31m-  BatteryState _batteryState = BatteryState.unknown;[m
[31m-  int? batteryLevel = 0;[m
[31m-  bool isBatteryLevelKnown = false; // Indikátor, zda je hodnota baterie známa[m
[31m-[m
[31m-  bool lowBatteryWarningShown = false;[m
[31m-  bool criticalBatteryWarningShown = false;[m
[31m-  bool isCharging = false;[m
[31m-[m
[31m-  Timer? _connectionStateTimer;[m
[31m-  bool _ignoreConnectionState = true;[m
 [m
   @override[m
   void initState() {[m
     super.initState();[m
[31m-[m
[31m-    _connectionStateTimer = Timer(const Duration(seconds: 3), () {[m
[31m-      _ignoreConnectionState = false;[m
[31m-      _listenToDeviceConnectionState(); // Spuštění sledování připojení[m
[31m-    });[m
[31m-[m
[31m-    // Resetování stavu[m
[31m-    isCalibrating = true; // Začátek kalibrace[m
[31m-    buffer.clear(); // Vymazání bufferu[m
[31m-    stopwatch.reset(); // Reset stopek[m
[31m-    stopwatch.stop();[m
[31m-    raceStarted = false; // Reset stavu závodu[m
[31m-    raceEnded = false;[m
[31m-    completedLaps = 0;[m
[31m-    lapTimes.clear(); // Vymazání seznamu časů kol[m
[31m-    currentLatitude = 0.0;[m
[31m-    currentLongitude = 0.0;[m
[31m-    lock = false; // Reset zámku[m
[31m-[m
[31m-    // Inicializace dalších komponent[m
[31m-    _backgroundService = BackgroundService(context: context);[m
     WidgetsBinding.instance.addObserver(this);[m
     _initializeRaceData();[m
     _listenToCharacteristic();[m
     checkNotificationPermission();[m
     _initializeNotifications();[m
[31m-    _backgroundService.showCalibrationDialog();[m
[31m-[m
[32m+[m[32m    // Nastavení asynchronního zpracování bufferu[m
     _bufferSubscription = _bufferStreamController.stream[m
         .transform(StreamTransformer.fromHandlers(handleData: (data, sink) {[m
[32m+[m[32m      // Přidání zpoždění (debounce) 300 ms[m
       Future.delayed(const Duration(milliseconds: 300), () {[m
         sink.add(data);[m
       });[m
[36m@@ -119,23 +71,53 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
       buffer.addAll(data as Uint8List);[m
       _processData();[m
     });[m
[32m+[m[32m  }[m
 [m
[31m-    _battery.onBatteryStateChanged.listen((BatteryState state) {[m
[31m-      setState(() {[m
[31m-        _batteryState = state;[m
[31m-      });[m
[31m-    });[m
[32m+[m[32m  Future<void> _configureGNSS() async {[m
[32m+[m[32m    Uint8List configPacket = Uint8List.fromList([[m
[32m+[m[32m      0xB5, 0x62, // Header[m
[32m+[m[32m      0xFF, 0x27, // Message Class and ID[m
[32m+[m[32m      0x03, 0x00, // Payload Length (3 bytes)[m
[32m+[m[32m      0x04, // Dynamic Platform Model (Automotive)[m
[32m+[m[32m      0x00, // 3D-Speed disabled[m
[32m+[m[32m      0x05, // Minimum horizontal accuracy (5 metrů)[m
[32m+[m[32m    ]);[m
[32m+[m
[32m+[m[32m    try {[m
[32m+[m[32m      await Future.delayed(const Duration(seconds: 1)); // Přidáno zpoždění[m
[32m+[m[32m      final services = await widget.device.discoverServices();[m
[32m+[m
[32m+[m[32m      // Najdi explicitně UART službu[m
[32m+[m[32m      final uartService = services.firstWhere([m
[32m+[m[32m        (service) =>[m
[32m+[m[32m            service.uuid.toString() == '6E400001-B5A3-F393-E0A9-E50E24DCCA9E',[m
[32m+[m[32m        //orElse: () => throw Exception('UART služba nebyla nalezena.'),[m
[32m+[m[32m      );[m
[32m+[m
[32m+[m[32m      // Najdi RX charakteristiku[m
[32m+[m[32m      final uartRxCharacteristic = uartService.characteristics.firstWhere([m
[32m+[m[32m        (c) => c.uuid.toString() == '6E400002-B5A3-F393-E0A9-E50E24DCCA9E',[m
[32m+[m[32m        /*orElse: () =>[m[41m [m
[32m+[m[32m            throw Exception('UART RX charakteristika nebyla nalezena.'),*/[m
[32m+[m[32m      );[m
[32m+[m
[32m+[m[32m      await uartRxCharacteristic.write(configPacket, withoutResponse: true);[m
[32m+[m[32m      //_showMessage('GNSS konfigurace byla úspěšně odeslána.');[m
[32m+[m[32m    } catch (e) {[m
[32m+[m[32m      //_showMessage('Chyba při konfiguraci GNSS: $e');[m
[32m+[m[32m    }[m
   }[m
 [m
   @override[m
   void didChangeAppLifecycleState(AppLifecycleState state) {[m
[31m-    if (state == AppLifecycleState.paused) {[m
[31m-      _backgroundService.enableBackgroundExecution();[m
[31m-      if (!isNotificationActive) {[m
[31m-        _startUpdatingNotification();[m
[31m-      }[m
[32m+[m[32m    if (state == AppLifecycleState.paused ||[m
[32m+[m[32m        state == AppLifecycleState.inactive) {[m
[32m+[m[32m      // Aplikace přechází do pozadí[m
[32m+[m[32m      _enableBackgroundExecution();[m
[32m+[m[32m      _startUpdatingNotification();[m
     } else if (state == AppLifecycleState.resumed) {[m
[31m-      _backgroundService.disableBackgroundExecution();[m
[32m+[m[32m      // Aplikace se vrací do popředí[m
[32m+[m[32m      _disableBackgroundExecution();[m
       _cancelNotification();[m
     }[m
   }[m
[36m@@ -164,37 +146,17 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
     );[m
   }[m
 [m
[31m-  void _listenToDeviceConnectionState() {[m
[31m-    widget.device.connectionState.listen((state) {[m
[31m-      if (_ignoreConnectionState) return; // Ignorace během kalibrace[m
[31m-[m
[31m-      if (state == BluetoothConnectionState.disconnected) {[m
[31m-        setState(() {[m
[31m-          dnf = true;[m
[31m-        });[m
[31m-        _endRace();[m
[31m-      }[m
[31m-    });[m
[31m-  }[m
[31m-[m
   void _startUpdatingNotification() {[m
[31m-    if (isNotificationActive) return;[m
[31m-[m
[31m-    _notificationTimer?.cancel();[m
[32m+[m[32m    _notificationTimer?.cancel(); // Zrušení případných starých timerů[m
     _notificationTimer = Timer.periodic(const Duration(seconds: 1), (timer) {[m
[31m-      if (isNotificationActive) return;[m
[31m-[m
[31m-      String currentTime = TimeFormatters.formattedStopwatchTime(stopwatch);[m
[32m+[m[32m      String currentTime = _formattedStopwatchTime();[m
       _showPersistentNotification(currentTime);[m
[31m-      isNotificationActive = true;[m
     });[m
   }[m
 [m
   void _cancelNotification() {[m
     _notificationTimer?.cancel();[m
[31m-    _notificationTimer = null;[m
[31m-    isNotificationActive = false;[m
[31m-    AwesomeNotifications().cancel(1);[m
[32m+[m[32m    AwesomeNotifications().cancel(1); // Cancel the specific notification ID[m
   }[m
 [m
   void _showPersistentNotification(String time) {[m
[36m@@ -203,7 +165,7 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
         id: 1,[m
         channelKey: 'race_channel',[m
         title: "Závod",[m
[31m-        body: 'Aplikace je spuštěna na pozadí',[m
[32m+[m[32m        body: 'Aktuální čas: $time',[m
         notificationLayout: NotificationLayout.Default,[m
         displayOnForeground: true,[m
         displayOnBackground: true,[m
[36m@@ -215,26 +177,38 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
   @override[m
   void dispose() {[m
     _disconnectDevice();[m
[31m-    _backgroundService.disableBackgroundExecution();[m
[32m+[m[32m    _disableBackgroundExecution();[m
     _bufferSubscription.cancel();[m
     WidgetsBinding.instance.removeObserver(this);[m
[31m-    _cancelNotification();[m
[32m+[m[32m    _cancelNotification(); // Ensure notification stops when disposed[m
     super.dispose();[m
   }[m
 [m
[31m-  Future<void> _saveLapsOnTires(int eventId, int laps) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    prefs.setInt('laps_on_tires_$eventId', laps);[m
[32m+[m[32m  Future<void> _disableBackgroundExecution() async {[m
[32m+[m[32m    if (await FlutterBackground.isBackgroundExecutionEnabled) {[m
[32m+[m[32m      await FlutterBackground.disableBackgroundExecution();[m
[32m+[m[32m    }[m
   }[m
 [m
[31m-  Future<int> _loadLapsOnTires(int eventId) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    return prefs.getInt('laps_on_tires_$eventId') ?? 0;[m
[31m-  }[m
[32m+[m[32m  Future<void> _enableBackgroundExecution() async {[m
[32m+[m[32m    const androidConfig = FlutterBackgroundAndroidConfig([m
[32m+[m[32m      notificationTitle: "Závodní aplikace běží na pozadí",[m
[32m+[m[32m      notificationText: "Sbíráme data závodu",[m
[32m+[m[32m      notificationImportance:[m
[32m+[m[32m          AndroidNotificationImportance.high, // Corrected constant[m
[32m+[m[32m      notificationIcon:[m
[32m+[m[32m          AndroidResource(name: 'background_icon', defType: 'drawable'),[m
[32m+[m[32m    );[m
 [m
[31m-  Future<void> _resetLapsOnTires(int eventId) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    prefs.remove('laps_on_tires_$eventId');[m
[32m+[m[32m    bool hasPermissions = await FlutterBackground.hasPermissions;[m
[32m+[m[32m    if (!hasPermissions) {[m
[32m+[m[32m      hasPermissions =[m
[32m+[m[32m          await FlutterBackground.initialize(androidConfig: androidConfig);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    if (hasPermissions) {[m
[32m+[m[32m      await FlutterBackground.enableBackgroundExecution();[m
[32m+[m[32m    }[m
   }[m
 [m
   Future<void> _initializeRaceData() async {[m
[36m@@ -249,11 +223,6 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
     eventPhaseId = prefs.getInt('event_phase_id') ?? 0;[m
     webUser = prefs.getString('web_user') ?? '';[m
 [m
[31m-    final laps = await _loadLapsOnTires(eventId);[m
[31m-    setState(() {[m
[31m-      lapsOnTires = laps;[m
[31m-    });[m
[31m-[m
     final ApiClient apiClient = ApiClient();[m
     apiClient.initialize();[m
 [m
[36m@@ -276,20 +245,9 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
     }[m
   }[m
 [m
[31m-  Future<void> _markRaceAsCompleted(int raceId, bool dnf) async {[m
[31m-    /*final prefs = await SharedPreferences.getInstance();[m
[31m-    await prefs.setBool('race_completed_$raceId', true);*/[m
[31m-    try {[m
[31m-      final ApiClient apiClient = ApiClient();[m
[31m-      apiClient.initialize();[m
[31m-      apiClient[m
[31m-          .postDriverEventState(webUser, eventId, dnf, raceEnded)[m
[31m-          .catchError((error, stackTrace) {[m
[31m-        _showMessage('Chyba při odesílání stavu závodu: $error');[m
[31m-      });[m
[31m-    } catch (error) {[m
[31m-      _showMessage('Nastala chyba při nastavení stavu závodu $error');[m
[31m-    }[m
[32m+[m[32m  Future<void> _markRaceAsCompleted(int raceId) async {[m
[32m+[m[32m    final prefs = await SharedPreferences.getInstance();[m
[32m+[m[32m    await prefs.setBool('race_completed_$raceId', true);[m
   }[m
 [m
   List<double> _parseCoordinate(String coordinate) {[m
[36m@@ -298,18 +256,9 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
   }[m
 [m
   void _listenToCharacteristic() {[m
[31m-    widget.characteristic.setNotifyValue(true).then((_) {[m
[31m-      // Nastavení časové bariéry[m
[31m-[m
[31m-      widget.characteristic.lastValueStream.listen((value) {[m
[31m-        if (value.isNotEmpty) {[m
[31m-          _bufferStreamController.add(Uint8List.fromList(value));[m
[31m-        }[m
[31m-      }, onError: (error) {[m
[31m-        _showMessage('Chyba při čtení BLE dat: $error');[m
[31m-      });[m
[31m-    }).catchError((error) {[m
[31m-      _showMessage('Chyba při nastavování notifikací: $error');[m
[32m+[m[32m    widget.characteristic.setNotifyValue(true);[m
[32m+[m[32m    widget.characteristic.lastValueStream.listen((value) {[m
[32m+[m[32m      _bufferStreamController.add(Uint8List.fromList(value));[m
     });[m
   }[m
 [m
[36m@@ -350,65 +299,43 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
   }[m
 [m
   void _decodePacket(Uint8List payload) {[m
[31m-    if (raceEnded || payload.isEmpty) return;[m
[32m+[m[32m    if (raceEnded) return;[m
 [m
[31m-    currentLongitude = _getInt32(payload, 24) / 1e7;[m
[31m-    currentLatitude = _getInt32(payload, 28) / 1e7;[m
[31m-    double speed = _getInt32(payload, 48) / 1e3 * 3.6;[m
[31m-    int currentBatteryLevel = payload[67] & 0x7F;[m
[31m-[m
[31m-    // Přidáme kontrolu na Fix Status, jestli je GNSS fix ve stavu 3D[m
[31m-    int fixStatus =[m
[31m-        payload[20]; // Hodnota Fix Status je na 20. pozici v payloadu[m
[31m-[m
[31m-    // Kontrola platnosti polohy a GNSS fixu (3 = 3D fix)[m
[31m-    if (isCalibrating &&[m
[31m-        fixStatus == 3 &&[m
[31m-        (currentLatitude != 0.0 || currentLongitude != 0.0)) {[m
[31m-      isCalibrating = false;[m
[31m-      Navigator.of(context).pop(); // Zavře dialog[m
[31m-    }[m
[32m+[m[32m    int hour = payload[8];[m
[32m+[m[32m    int minute = payload[9];[m
[32m+[m[32m    int second = payload[10];[m
 [m
[31m-    if (speed > maxValidSpeed) return;[m
[32m+[m[32m    double longitude = _getInt32(payload, 24) / 1e7;[m
[32m+[m[32m    double latitude = _getInt32(payload, 28) / 1e7;[m
[32m+[m[32m    double speed = _getInt32(payload, 48) / 1e3 * 3.6;[m
 [m
[31m-    setState(() {[m
[31m-      batteryLevel = currentBatteryLevel;[m
[31m-      isBatteryLevelKnown = true;[m
[31m-[m
[31m-      currentTime = DateTime.now().toLocal().toIso8601String();[m
[31m-      currentSpeed = speed;[m
[31m-[m
[31m-      bool crossingStart = _isCrossingLine([m
[31m-          currentLatitude, currentLongitude, startLineP1, startLineP2);[m
[31m-[m
[31m-      if (crossingStart && !lock) {[m
[31m-        lock = true;[m
[31m-        if (!raceStarted) {[m
[31m-          stopwatch.start();[m
[31m-          raceStarted = true;[m
[31m-          completedLaps = 1;[m
[31m-        } else {[m
[31m-          registerLap();[m
[32m+[m[32m    if (speed <= maxValidSpeed) {[m
[32m+[m[32m      setState(() {[m
[32m+[m[32m        currentTime = _formatTime('$hour:$minute:$second');[m
[32m+[m[32m        currentSpeed = speed;[m
[32m+[m[32m        currentLatitude = latitude;[m
[32m+[m[32m        currentLongitude = longitude;[m
[32m+[m
[32m+[m[32m        bool crossingStart = _isCrossingLine([m
[32m+[m[32m            currentLatitude, currentLongitude, startLineP1, startLineP2);[m
[32m+[m
[32m+[m[32m        if (crossingStart && !lock) {[m
[32m+[m[32m          lock = true;[m
[32m+[m
[32m+[m[32m          if (!raceStarted) {[m
[32m+[m[32m            stopwatch.start();[m
[32m+[m[32m            raceStarted = true;[m
[32m+[m[32m            completedLaps = 1;[m
[32m+[m[32m          } else {[m
[32m+[m[32m            registerLap();[m
[32m+[m[32m          }[m
[32m+[m
[32m+[m[32m          Future.delayed(const Duration(seconds: 5), () {[m
[32m+[m[32m            lock = false;[m
[32m+[m[32m          });[m
         }[m
[31m-[m
[31m-        Future.delayed(const Duration(seconds: 5), () {[m
[31m-          lock = false;[m
[31m-        });[m
[31m-      }[m
[31m-      if (currentBatteryLevel == 0) {[m
[31m-        _showMessage('Baterie je na 0%. Zařízení bude odpojeno.');[m
[31m-        Fluttertoast.showToast([m
[31m-          msg: 'Baterie je na 0%. Zařízení bude odpojeno.',[m
[31m-          toastLength: Toast.LENGTH_LONG,[m
[31m-          gravity: ToastGravity.TOP,[m
[31m-          backgroundColor: Colors.redAccent,[m
[31m-          textColor: Colors.white,[m
[31m-          fontSize: 16.0,[m
[31m-        );[m
[31m-        dnf = true;[m
[31m-        _endRace();[m
[31m-      }[m
[31m-    });[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
   }[m
 [m
   void registerLap() async {[m
[36m@@ -419,26 +346,22 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
       apiClient.initialize();[m
 [m
       apiClient[m
[31m-          .postLapData(eventId, webUser, TimeFormatters.formatLapTime(lapTime),[m
[31m-              eventPhaseId)[m
[32m+[m[32m          .postLapData(eventId, webUser, _formatLapTime(lapTime), eventPhaseId)[m
           .catchError((error, stackTrace) {[m
         _showMessage('Chyba při odesílání dat: $error');[m
       });[m
       lapTimes.add(lapTime);[m
[31m-      _scrollToBottom();[m
[32m+[m
       if (fastestLap == null || lapTime < fastestLap!) {[m
         fastestLap = lapTime;[m
       }[m
     }[m
[31m-    lapsOnTires++;[m
[31m-    await _saveLapsOnTires(eventId, lapsOnTires);[m
 [m
     stopwatch.stop();[m
     stopwatch.reset();[m
     stopwatch.start();[m
 [m
     int currentLap = completedLaps + 1;[m
[31m-[m
     if (currentLap > numberOfLaps) {[m
       completedLaps = numberOfLaps;[m
       _endRace();[m
[36m@@ -448,124 +371,26 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
   }[m
 [m
   void _endRace() async {[m
[31m-    setState(() {[m
[31m-      raceEnded = true;[m
[31m-    });[m
[32m+[m[32m    raceEnded = true;[m
     stopwatch.stop();[m
[31m-    _cancelNotification(); // Zruší notifikaci[m
[32m+[m[32m    _cancelNotification();[m
     double totalRaceTime = lapTimes.fold(0, (a, b) => a + b);[m
[31m-[m
[31m-    // Pokus o odpojení (pokud je zařízení stále connected).[m
[31m-    // Pokud už bylo odpojeno, isDisc může být rovnou true[m
[31m-    // (nebo false, pokud došlo k nějaké chybě).[m
     final isDisc = await _disconnectDevice();[m
[31m-[m
[31m-    // Vypneme background service[m
[31m-    await _backgroundService.disableBackgroundExecution();[m
[31m-[m
[31m-    // Nechceme závod zbytečně blokovat, i pokud je isDisc == false,[m
[31m-    // takže jen případně zalogujeme, ale pokračujeme:[m
[31m-    if (!isDisc) {[m
[31m-      _showMessage('Nepodařilo se odpojit zařízení (nebo už bylo odpojené), '[m
[31m-          'ale pokračuji v ukončení závodu.');[m
[31m-    }[m
[31m-[m
[31m-    // Uložíme stav (včetně DNF) na server[m
[31m-    await _markRaceAsCompleted(eventId, dnf).catchError((error, stackTrace) {[m
[31m-      _showMessage('Chyba při odesílání stavu závodu: $error');[m
[31m-    });[m
[31m-[m
[31m-    // A přejdeme na stránku s výsledkem[m
[31m-    if (dnf) {[m
[32m+[m[32m    await _disableBackgroundExecution();[m
[32m+[m[32m    if (isDisc) {[m
[32m+[m[32m      //_markRaceAsCompleted(eventId);[m
       Navigator.pushReplacement([m
         context,[m
         MaterialPageRoute([m
[31m-          builder: (context) => RaceFinishedPage([m
[31m-            message: 'Závod ukončen jako DNF.',[m
[31m-            time: totalRaceTime,[m
[31m-          ),[m
[31m-        ),[m
[32m+[m[32m            builder: (context) => RaceFinishedPage([m
[32m+[m[32m                message: 'Celkově jste ujeli závod za: ', time: totalRaceTime)),[m
       );[m
     } else {[m
[31m-      Navigator.pushReplacement([m
[31m-        context,[m
[31m-        MaterialPageRoute([m
[31m-          builder: (context) => RaceFinishedPage([m
[31m-            message: 'Celkový čas závodu: ',[m
[31m-            time: totalRaceTime,[m
[31m-          ),[m
[31m-        ),[m
[31m-      );[m
[32m+[m[32m      _showMessage([m
[32m+[m[32m          'Nelze ukončit závod, zařízení není připojeno, zkuste to prosím znovu.');[m
     }[m
   }[m
 [m
[31m-  void _handleTireChange() {[m
[31m-    showDialog([m
[31m-      context: context,[m
[31m-      builder: (BuildContext context) {[m
[31m-        final theme = Theme.of(context);[m
[31m-        return AlertDialog([m
[31m-          backgroundColor: theme.colorScheme.surface, // Dynamic background[m
[31m-          shape: RoundedRectangleBorder([m
[31m-            borderRadius: BorderRadius.circular(12.0),[m
[31m-          ),[m
[31m-          title: Text([m
[31m-            'Změna sady kol',[m
[31m-            style: TextStyle([m
[31m-              color: theme.colorScheme.onSurface,[m
[31m-              fontWeight: FontWeight.bold,[m
[31m-              fontSize: 18,[m
[31m-            ),[m
[31m-          ),[m
[31m-          content: Text([m
[31m-            'Opravdu chcete provést změnu sady kol? Počet kol na sadě bude resetován.',[m
[31m-            style: TextStyle([m
[31m-              color: theme.colorScheme.onSurface.withAlpha((0.7 * 255).toInt()),[m
[31m-              fontSize: 16,[m
[31m-            ),[m
[31m-          ),[m
[31m-          actions: <Widget>[[m
[31m-            TextButton([m
[31m-              onPressed: () {[m
[31m-                Navigator.of(context).pop();[m
[31m-              },[m
[31m-              style: TextButton.styleFrom([m
[31m-                foregroundColor: theme.colorScheme.primary, // Dynamic red[m
[31m-              ),[m
[31m-              child: const Text('Zrušit'),[m
[31m-            ),[m
[31m-            TextButton([m
[31m-              onPressed: () {[m
[31m-                _resetLapsOnTires(eventId).then((_) {[m
[31m-                  setState(() {[m
[31m-                    completedLaps = 0; // Reset aktuální hodnoty[m
[31m-                  });[m
[31m-                });[m
[31m-                Navigator.of(context).pop();[m
[31m-              },[m
[31m-              style: TextButton.styleFrom([m
[31m-                foregroundColor: Colors.green, // Confirm button color[m
[31m-              ),[m
[31m-              child: const Text('Potvrdit'),[m
[31m-            ),[m
[31m-          ],[m
[31m-        );[m
[31m-      },[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  void _scrollToBottom() {[m
[31m-    WidgetsBinding.instance.addPostFrameCallback((_) {[m
[31m-      if (_scrollController.hasClients) {[m
[31m-        _scrollController.animateTo([m
[31m-          _scrollController.position.maxScrollExtent,[m
[31m-          duration: const Duration(milliseconds: 300),[m
[31m-          curve: Curves.easeOut,[m
[31m-        );[m
[31m-      }[m
[31m-    });[m
[31m-  }[m
[31m-[m
   Color _getLapTimeColor() {[m
     if (lapTimes.isEmpty) return Colors.green;[m
 [m
[36m@@ -635,28 +460,48 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
 [m
   Future<bool> _disconnectDevice() async {[m
     try {[m
[31m-      // Zjistíme, zda je skutečně připojeno[m
[31m-      var currentState = await widget.device.connectionState.first;[m
[32m+[m[32m      await widget.characteristic.setNotifyValue(false);[m
 [m
[32m+[m[32m      var currentState = await widget.device.connectionState.first;[m
       if (currentState == BluetoothConnectionState.connected) {[m
[31m-        // Pokud je connected, vypneme notifikace a zkusíme odpojit[m
[31m-        await widget.characteristic.setNotifyValue(false);[m
         await widget.device.disconnect();[m
[32m+[m[32m        _showMessage('Device disconnected successfully.');[m
[32m+[m[32m        return true;[m
[32m+[m[32m      } else {[m
[32m+[m[32m        _showMessage('Device is already disconnected.');[m
[32m+[m[32m        return true;[m
       }[m
[31m-[m
[31m-      // V každém případě nastavíme batteryLevel na nulu (jen pro UI)[m
[31m-      setState(() {[m
[31m-        batteryLevel = 0;[m
[31m-      });[m
[31m-      // Když proběhne vše OK (nebo je už dávno odpojeno), vrátíme true[m
[31m-      return true;[m
     } catch (e) {[m
[31m-      // Pokud nastala nějaká chyba, odchytíme ji a vrátíme false[m
[31m-      debugPrint('Chyba při odpojování: $e');[m
[32m+[m[32m      _showMessage([m
[32m+[m[32m          'Failed to disconnect from ${widget.device.platformName}, retrying...');[m
       return false;[m
     }[m
   }[m
 [m
[32m+[m[32m  String _formatLapTimeToTable(double lapTime) {[m
[32m+[m[32m    final minutes = (lapTime ~/ 60).toString().padLeft(2, '0');[m
[32m+[m[32m    final seconds = (lapTime % 60).toInt().toString().padLeft(2, '0');[m
[32m+[m[32m    final milliseconds =[m
[32m+[m[32m        ((lapTime * 1000) % 1000).toInt().toString().padLeft(3, '0');[m
[32m+[m[32m    return '$minutes:$seconds.$milliseconds';[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  String _formatLapTime(double lapTime) {[m
[32m+[m[32m    final hours = (lapTime ~/ 3600).toString().padLeft(2, '0');[m
[32m+[m[32m    final minutes = ((lapTime % 3600) ~/ 60).toString().padLeft(2, '0');[m
[32m+[m[32m    final seconds = (lapTime % 60).toInt().toString().padLeft(2, '0');[m
[32m+[m[32m    final milliseconds =[m
[32m+[m[32m        ((lapTime * 1000) % 1000).toInt().toString().padLeft(3, '0');[m
[32m+[m[32m    return '$hours:$minutes:$seconds.$milliseconds';[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  String _formatTime(String time) {[m
[32m+[m[32m    List<String> parts = time.split(':');[m
[32m+[m[32m    String formattedTime =[m
[32m+[m[32m        '${parts[0].padLeft(2, '0')}:${parts[1].padLeft(2, '0')}:${parts[2].padLeft(2, '0')}';[m
[32m+[m[32m    return formattedTime;[m
[32m+[m[32m  }[m
[32m+[m
   void _showMessage(String message) {[m
     ScaffoldMessenger.of(context).showSnackBar([m
       SnackBar([m
[36m@@ -666,89 +511,61 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
     );[m
   }[m
 [m
[32m+[m[32m  String _formattedStopwatchTime() {[m
[32m+[m[32m    final duration = stopwatch.elapsed;[m
[32m+[m[32m    return '${duration.inMinutes.toString().padLeft(2, '0')}:${(duration.inSeconds % 60).toString().padLeft(2, '0')}.${(duration.inMilliseconds % 1000 ~/ 10).toString().padLeft(2, '0')}';[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  Widget _buildTableCell(String text,[m
[32m+[m[32m      {bool isHeader = false, bool isRedText = false}) {[m
[32m+[m[32m    return Padding([m
[32m+[m[32m      padding: const EdgeInsets.all(8.0),[m
[32m+[m[32m      child: Text([m
[32m+[m[32m        text,[m
[32m+[m[32m        textAlign: TextAlign.center,[m
[32m+[m[32m        style: TextStyle([m
[32m+[m[32m          fontSize: isHeader ? 16 : 14,[m
[32m+[m[32m          fontWeight: isHeader ? FontWeight.bold : FontWeight.normal,[m
[32m+[m[32m          color: isHeader[m
[32m+[m[32m              ? Colors.white[m
[32m+[m[32m              : isRedText[m
[32m+[m[32m                  ? Colors.red[m
[32m+[m[32m                  : Colors.white,[m
[32m+[m[32m        ),[m
[32m+[m[32m      ),[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
   @override[m
   Widget build(BuildContext context) {[m
[31m-    final theme = Theme.of(context);[m
     final size = MediaQuery.of(context).size;[m
 [m
     return PopScope([m
       canPop: false,[m
       child: Scaffold([m
[31m-        backgroundColor: theme.scaffoldBackgroundColor,[m
[32m+[m[32m        backgroundColor: Colors.white,[m
         appBar: AppBar([m
[31m-          backgroundColor: theme.colorScheme.surface,[m
[31m-          title: Text([m
[31m-            'Závod',[m
[31m-            style: TextStyle([m
[31m-              color: theme.colorScheme.onSurface,[m
[31m-              fontWeight: FontWeight.bold,[m
[31m-              fontSize: 20,[m
[31m-            ),[m
[31m-          ),[m
[31m-          elevation: 2,[m
[31m-          centerTitle: true,[m
[31m-          automaticallyImplyLeading: false, // No back button[m
[31m-          actions: [[m
[31m-            // Zobrazíme baterii pouze pokud máme validní data[m
[31m-            Row([m
[31m-              children: [[m
[31m-                Row([m
[31m-                  children: [[m
[31m-                    Icon([m
[31m-                      isBatteryLevelKnown[m
[31m-                          ? batteryHelper.getBatteryIcon(batteryLevel!, false)[m
[31m-                          : Icons[m
[31m-                              .battery_unknown, // Původně tam bylo getBatteryIcon() bez parametrů[m
[31m-                      color: isBatteryLevelKnown[m
[31m-                          ? batteryHelper.getBatteryColor(batteryLevel!)[m
[31m-                          : Colors.grey,[m
[31m-                    ),[m
[31m-                    const SizedBox(width: 4),[m
[31m-                    Text([m
[31m-                      isBatteryLevelKnown ? '$batteryLevel%' : 'N/A',[m
[31m-                      style: TextStyle([m
[31m-                        fontWeight: FontWeight.bold,[m
[31m-                        color: isBatteryLevelKnown[m
[31m-                            ? batteryHelper.getBatteryColor(batteryLevel!)[m
[31m-                            : Colors.grey,[m
[31m-                      ),[m
[31m-                    ),[m
[31m-                  ],[m
[31m-                ),[m
[31m-                const SizedBox(width: 4),[m
[31m-              ],[m
[31m-            ),[m
[31m-[m
[31m-            IconButton([m
[31m-              icon: const Icon(Icons.tire_repair_outlined),[m
[31m-              onPressed: _handleTireChange,[m
[31m-              tooltip: 'Změna sady kol',[m
[31m-            ),[m
[31m-          ],[m
[32m+[m[32m          backgroundColor: Colors.white,[m
[32m+[m[32m          title: const Text('Race Page', style: TextStyle(color: Colors.black)),[m
[32m+[m[32m          elevation: 0,[m
[32m+[m[32m          automaticallyImplyLeading: false, // Remove the back button[m
         ),[m
[31m-        body: LayoutBuilder([m
[31m-          builder: (context, constraints) {[m
[31m-            final double statCardHeight = constraints.maxHeight * 0.1;[m
[31m-            final double statCardWidth = constraints.maxWidth * 0.4;[m
[31m-            final double timerFontSize = constraints.maxHeight * 0.08;[m
[31m-            final double lapFontSize = constraints.maxHeight * 0.04;[m
[31m-[m
[31m-            return Center([m
[32m+[m[32m        body: Stack([m
[32m+[m[32m          children: [[m
[32m+[m[32m            Padding([m
[32m+[m[32m              padding: const EdgeInsets.all(16.0),[m
               child: Column([m
                 children: [[m
                   const SizedBox(height: 24),[m
[31m-                  // Timer display[m
                   Text([m
[31m-                    TimeFormatters.formattedStopwatchTime(stopwatch),[m
[31m-                    style: TextStyle([m
[31m-                      fontSize: timerFontSize,[m
[32m+[m[32m                    _formattedStopwatchTime(),[m
[32m+[m[32m                    style: const TextStyle([m
[32m+[m[32m                      fontSize: 64,[m
                       fontWeight: FontWeight.bold,[m
[31m-                      color: theme.colorScheme.onSurface,[m
[31m-                      letterSpacing: 2.0,[m
[32m+[m[32m                      color: Colors.black,[m
                     ),[m
                   ),[m
                   const SizedBox(height: 8),[m
[31m-                  // Lap time display[m
                   Text([m
                     lapTimes.length > 1[m
                         ? (lapTimes.last == fastestLap[m
[36m@@ -756,129 +573,141 @@[m [mclass _RacePageState extends State<RacePage> with WidgetsBindingObserver {[m
                             : (lapTimes.last - fastestLap!).toStringAsFixed(2))[m
                         : '',[m
                     style: TextStyle([m
[31m-                      fontSize: lapFontSize,[m
[31m-                      fontWeight: FontWeight.w600,[m
[32m+[m[32m                      fontSize: 36,[m
                       color: _getLapTimeColor(),[m
                     ),[m
                   ),[m
[32m+[m[32m                  const SizedBox(height: 8),[m
[32m+[m[32m                  Text([m
[32m+[m[32m                    'Aktuální kolo: $completedLaps / $numberOfLaps',[m
[32m+[m[32m                    style: const TextStyle([m
[32m+[m[32m                      fontSize: 24,[m
[32m+[m[32m                      color: Colors.black,[m
[32m+[m[32m                    ),[m
[32m+[m[32m                  ),[m
[32m+[m[32m                  /*const SizedBox(height: 16),[m
[32m+[m[32m                  ElevatedButton([m
[32m+[m[32m                    onPressed: registerLap,[m
[32m+[m[32m                    style: ElevatedButton.styleFrom([m
[32m+[m[32m                      padding: const EdgeInsets.symmetric([m
[32m+[m[32m                          horizontal: 32, vertical: 16),[m
[32m+[m[32m                      backgroundColor: const Color(0xFFFF8377),[m
[32m+[m[32m                      shape: RoundedRectangleBorder([m
[32m+[m[32m                        borderRadius: BorderRadius.circular(32.0),[m
[32m+[m[32m                      ),[m
[32m+[m[32m                    ),[m
[32m+[m[32m                    child: const Text('Zaregistrovat kolo',[m
[32m+[m[32m                        style: TextStyle([m
[32m+[m[32m                          fontSize: 24,[m
[32m+[m[32m                          color: Colors.white,[m
[32m+[m[32m                        )),[m
[32m+[m[32m                  ),*/[m
                   const SizedBox(height: 16),[m
[31m-                  // Statistics grid (responsive)[m
[31m-                  Padding([m
[31m-                    padding: const EdgeInsets.symmetric(horizontal: 16.0),[m
[31m-                    child: Wrap([m
[31m-                      spacing: 16,[m
[31m-                      runSpacing: 16,[m
[31m-                      alignment: WrapAlignment.center,[m
[31m-                      children: [[m
[31m-                        statCard.buildStatCard([m
[31m-                          context: context,[m
[31m-                          title: 'Poslední kolo',[m
[31m-                          value: lapTimes.isNotEmpty[m
[31m-                              ? lapTimes.last.toStringAsFixed(3)[m
[31m-                              : '0:00.000',[m
[31m-                          height: statCardHeight,[m
[31m-                          width: statCardWidth,[m
[31m-                        ),[m
[31m-                        statCard.buildStatCard([m
[31m-                          context: context,[m
[31m-                          title: 'Nejrychlejší kolo',[m
[31m-                          value: fastestLap != null[m
[31m-                              ? fastestLap!.toStringAsFixed(3)[m
[31m-                              : '0:00.000',[m
[31m-                          valueColor: Colors.green,[m
[31m-                          height: statCardHeight,[m
[31m-                          width: statCardWidth,[m
[31m-                        ),[m
[31m-                        statCard.buildStatCard([m
[31m-                          context: context,[m
[31m-                          title: 'Kol na sadě',[m
[31m-                          value: lapsOnTires.toString(),[m
[31m-                          height: statCardHeight,[m
[31m-                          width: statCardWidth,[m
[31m-                        ),[m
[31m-                        statCard.buildStatCard([m
[31m-                          context: context,[m
[31m-                          title: 'Aktuální kolo',[m
[31m-                          value: '$completedLaps / $numberOfLaps',[m
[31m-                          height: statCardHeight,[m
[31m-                          width: statCardWidth,[m
[31m-                        ),[m
[31m-                      ],[m
[32m+[m[32m                  ElevatedButton([m
[32m+[m[32m                    onPressed: _endRace,[m
[32m+[m[32m                    style: ElevatedButton.styleFrom([m
[32m+[m[32m                      padding: const EdgeInsets.symmetric([m
[32m+[m[32m                          horizontal: 32, vertical: 16),[m
[32m+[m[32m                      backgroundColor: const Color(0xFFFF8377),[m
[32m+[m[32m                      shape: RoundedRectangleBorder([m
[32m+[m[32m                        borderRadius: BorderRadius.circular(32.0),[m
[32m+[m[32m                      ),[m
                     ),[m
[32m+[m[32m                    child: const Text('Stop',[m
[32m+[m[32m                        style: TextStyle([m
[32m+[m[32m                          fontSize: 24,[m
[32m+[m[32m                          color: Colors.white,[m
[32m+[m[32m                        )),[m
                   ),[m
[31m-                  const SizedBox(height: 24),[m
[31m-                  // Lap time table[m
[32m+[m[32m                  const SizedBox(height: 16),[m
                   ConstrainedBox([m
                     constraints: BoxConstraints([m
[31m-                      maxHeight: size.height * 0.3,[m
[32m+[m[32m                      maxHeight: size.height * 0.4, // Maximální výška tabulky[m
                     ),[m
                     child: Container([m
                       width: size.width * 0.9,[m
                       decoration: BoxDecoration([m
[31m-                        color: theme.colorScheme.tertiary,[m
[32m+[m[32m                        color: Colors.black,[m
                         borderRadius: BorderRadius.circular(8.0),[m
[31m-                        boxShadow: [[m
[31m-                          BoxShadow([m
[31m-                            color: theme.shadowColor[m
[31m-                                .withAlpha((0.3 * 255).toInt()),[m
[31m-                            blurRadius: 6,[m
[31m-                            offset: const Offset(0, 3),[m
[31m-                          ),[m
[31m-                        ],[m
                       ),[m
[31m-                      child: LapTimeTable([m
[31m-                        lapTimes: lapTimes,[m
[31m-                        scrollController: _scrollController,[m
[32m+[m[32m                      child: ListView.builder([m
[32m+[m[32m                        controller: _scrollController,[m
[32m+[m[32m                        shrinkWrap: true,[m
[32m+[m[32m                        physics: lapTimes.length <= 3[m
[32m+[m[32m                            ? const NeverScrollableScrollPhysics()[m
[32m+[m[32m                            : const AlwaysScrollableScrollPhysics(),[m
[32m+[m[32m                        itemCount: lapTimes.length + 1,[m
[32m+[m[32m                        itemBuilder: (context, index) {[m
[32m+[m[32m                          if (index == 0) {[m
[32m+[m[32m                            return const ListTile([m
[32m+[m[32m                              title: Row([m
[32m+[m[32m                                mainAxisAlignment:[m
[32m+[m[32m                                    MainAxisAlignment.spaceBetween,[m
[32m+[m[32m                                children: [[m
[32m+[m[32m                                  Text([m
[32m+[m[32m                                    '#',[m
[32m+[m[32m                                    style: TextStyle([m
[32m+[m[32m                                        color: Colors.white,[m
[32m+[m[32m                                        fontWeight: FontWeight.bold),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                  Text([m
[32m+[m[32m                                    'Čas',[m
[32m+[m[32m                                    style: TextStyle([m
[32m+[m[32m                                        color: Colors.white,[m
[32m+[m[32m                                        fontWeight: FontWeight.bold),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ],[m
[32m+[m[32m                              ),[m
[32m+[m[32m                            );[m
[32m+[m[32m                          } else {[m
[32m+[m[32m                            return ListTile([m
[32m+[m[32m                              title: Row([m
[32m+[m[32m                                mainAxisAlignment:[m
[32m+[m[32m                                    MainAxisAlignment.spaceBetween,[m
[32m+[m[32m                                children: [[m
[32m+[m[32m                                  Text([m
[32m+[m[32m                                    (index).toString(),[m
[32m+[m[32m                                    style: const TextStyle(color: Colors.white),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                  Text([m
[32m+[m[32m                                    _formatLapTimeToTable(lapTimes[index - 1]),[m
[32m+[m[32m                                    style: TextStyle([m
[32m+[m[32m                                      color: index - 1 == lapTimes.length - 1[m
[32m+[m[32m                                          ? Colors.red[m
[32m+[m[32m                                          : Colors.white,[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ],[m
[32m+[m[32m                              ),[m
[32m+[m[32m                            );[m
[32m+[m[32m                          }[m
[32m+[m[32m                        },[m
                       ),[m
                     ),[m
                   ),[m
[31m-                  const Spacer(),[m
[31m-                  // STOP button and location aligned to the bottom[m
[31m-                  Column([m
[31m-                    mainAxisAlignment: MainAxisAlignment.end,[m
[31m-                    children: [[m
[31m-                      Padding([m
[31m-                        padding: const EdgeInsets.symmetric(horizontal: 16.0),[m
[31m-                        child: ElevatedButton([m
[31m-                          onPressed: () {[m
[31m-                            dnf = true;[m
[31m-                            _endRace();[m
[31m-                          },[m
[31m-                          onLongPress: registerLap,[m
[31m-                          style: ElevatedButton.styleFrom([m
[31m-                            backgroundColor: theme.colorScheme.primary,[m
[31m-                            padding:[m
[31m-                                EdgeInsets.all(constraints.maxWidth * 0.08),[m
[31m-                            shape: const CircleBorder(),[m
[31m-                          ),[m
[31m-                          child: const Text([m
[31m-                            'STOP',[m
[31m-                            style: TextStyle([m
[31m-                              color: Colors.white,[m
[31m-                              fontWeight: FontWeight.bold,[m
[31m-                            ),[m
[31m-                          ),[m
[31m-                        ),[m
[31m-                      ),[m
[31m-                      Padding([m
[31m-                        padding: const EdgeInsets.symmetric(horizontal: 16),[m
[31m-                        child: Text([m
[31m-                          'Aktuální pozice: $currentLatitude, $currentLongitude',[m
[31m-                          style: TextStyle([m
[31m-                            fontSize: constraints.maxHeight * 0.02,[m
[31m-                            color: theme.colorScheme.onSurface[m
[31m-                                .withAlpha((0.7 * 255).toInt()),[m
[31m-                          ),[m
[31m-                          textAlign: TextAlign.center,[m
[31m-                        ),[m
[31m-                      ),[m
[31m-                      const SizedBox(height: 16),[m
[31m-                    ],[m
[32m+[m[32m                  const SizedBox(height: 16),[m
[32m+[m[32m                  Text([m
[32m+[m[32m                    'Aktuální pozice: $currentLatitude, $currentLongitude',[m
[32m+[m[32m                    style: const TextStyle([m
[32m+[m[32m                      fontSize: 18,[m
[32m+[m[32m                      color: Colors.black,[m
[32m+[m[32m                    ),[m
[32m+[m[32m                    textAlign: TextAlign.center,[m
                   ),[m
                 ],[m
               ),[m
[31m-            );[m
[31m-          },[m
[32m+[m[32m            ),[m
[32m+[m[32m            if (isLoading)[m
[32m+[m[32m              Container([m
[32m+[m[32m                color: Colors.transparent,[m
[32m+[m[32m                child: const Center([m
[32m+[m[32m                  child: CircularProgressIndicator([m
[32m+[m[32m                    valueColor:[m
[32m+[m[32m                        AlwaysStoppedAnimation<Color>(Color(0xffdc2626)),[m
[32m+[m[32m                  ),[m
[32m+[m[32m                ),[m
[32m+[m[32m              ),[m
[32m+[m[32m          ],[m
         ),[m
       ),[m
     );[m
[1mdiff --git a/lib/pages/race pages/training_qualification_page.dart b/lib/pages/race pages/training_qualification_page.dart[m
[1mindex 4b36fce..bcf6b06 100644[m
[1m--- a/lib/pages/race pages/training_qualification_page.dart[m	
[1m+++ b/lib/pages/race pages/training_qualification_page.dart[m	
[36m@@ -1,22 +1,14 @@[m
[31m-// ignore_for_file: unused_field[m
[31m-[m
 import 'dart:async';[m
 import 'dart:typed_data';[m
 import 'package:flutter/material.dart';[m
 import 'package:flutter_blue_plus/flutter_blue_plus.dart';[m
[31m-import 'package:fluttertoast/fluttertoast.dart';[m
[31m-import 'package:laplink/components/lap_time_table.dart';[m
 import 'dart:math';[m
 import 'package:shared_preferences/shared_preferences.dart';[m
 import 'package:laplink/services/api_service.dart';[m
 import 'package:laplink/pages/race%20pages/race_finished_page.dart';[m
 import 'package:keep_screen_on/keep_screen_on.dart';[m
[32m+[m[32mimport 'package:flutter_background/flutter_background.dart';[m
 import 'package:awesome_notifications/awesome_notifications.dart';[m
[31m-import 'package:laplink/utils/time_formatters.dart';[m
[31m-import 'package:laplink/components/stat_card.dart';[m
[31m-import 'package:laplink/services/background_service.dart';[m
[31m-import 'package:battery_plus/battery_plus.dart';[m
[31m-import 'package:laplink/utils/battery_helper.dart';[m
 [m
 class TrainingQualificationPage extends StatefulWidget {[m
   final BluetoothDevice device;[m
[36m@@ -36,6 +28,7 @@[m [mclass TrainingQualificationPage extends StatefulWidget {[m
 class _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
     with WidgetsBindingObserver {[m
   List<int> buffer = [];[m
[32m+[m[32m  double currentSpeed = 0.0;[m
   String currentTime = '';[m
   int completedLaps = 0;[m
   List<double> lapTimes = [];[m
[36m@@ -53,73 +46,33 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
   double currentLatitude = 0.0;[m
   double currentLongitude = 0.0;[m
   Timer? _notificationTimer;[m
[32m+[m[32m  bool batteryAlertShown = false;[m
[32m+[m[32m  bool criticalBatteryAlertShown = false;[m
   late String notificationMessage = 'Trénink';[m
[31m-  double? fastestLap;[m
[31m-  int lapsOnTires = 0;[m
 [m
   final ScrollController _scrollController = ScrollController();[m
   final _bufferStreamController = StreamController<Uint8List>.broadcast();[m
   late StreamSubscription _bufferSubscription;[m
[31m-  bool isNotificationActive = false;[m
[31m-  bool isCalibrating = true;[m
[31m-  final StatCard statCard = StatCard();[m
[31m-  final BatteryHelper batteryHelper = BatteryHelper();[m
[31m-  late BackgroundService _backgroundService;[m
[31m-[m
[31m-  final Battery _battery = Battery();[m
[31m-  int? batteryLevel = 69;[m
[31m-  bool isCharging = false;[m
[31m-  bool isBatteryLevelKnown = false;[m
[31m-[m
[31m-  Timer? _connectionStateTimer;[m
[31m-  bool _ignoreConnectionState = true;[m
 [m
   @override[m
   void initState() {[m
     super.initState();[m
[31m-[m
[31m-    _connectionStateTimer = Timer(const Duration(seconds: 3), () {[m
[31m-      _ignoreConnectionState = false;[m
[31m-      _listenToDeviceConnectionState(); // Spuštění sledování připojení[m
[31m-    });[m
[31m-[m
[31m-    isCalibrating = true; // Začátek kalibrace[m
[31m-    buffer.clear(); // Vymazání bufferu[m
[31m-    stopwatch.reset(); // Resetování stopek[m
[31m-    stopwatch.stop();[m
[31m-    raceStarted = false; // Reset stavu závodu[m
[31m-    raceEnded = false;[m
[31m-    completedLaps = 0;[m
[31m-    lapTimes.clear(); // Vymazání seznamu časů kol[m
[31m-[m
[31m-    _backgroundService = BackgroundService(context: context);[m
     WidgetsBinding.instance.addObserver(this);[m
     _initializeRaceData();[m
     _listenToCharacteristic();[m
     checkNotificationPermission();[m
     _initializeNotifications();[m
[31m-    _backgroundService.showCalibrationDialog();[m
 [m
     // Nastavení asynchronního zpracování bufferu[m
     _bufferSubscription = _bufferStreamController.stream[m
         .transform(StreamTransformer.fromHandlers(handleData: (data, sink) {[m
[31m-      // Debounce 300 ms[m
[32m+[m[32m      // Přidání zpoždění (debounce) 300 ms[m
       Future.delayed(const Duration(milliseconds: 300), () {[m
         sink.add(data);[m
       });[m
     })).listen((data) {[m
       buffer.addAll(data as Uint8List);[m
[31m-      _processData(); // <-- volá se dekódování[m
[31m-    });[m
[31m-  }[m
[31m-[m
[31m-  void _listenToDeviceConnectionState() {[m
[31m-    widget.device.connectionState.listen((state) {[m
[31m-      if (_ignoreConnectionState) return; // Ignorace během kalibrace[m
[31m-[m
[31m-      if (state == BluetoothConnectionState.disconnected) {[m
[31m-        _endRace(); // Ukončení závodu při odpojení[m
[31m-      }[m
[32m+[m[32m      _processData();[m
     });[m
   }[m
 [m
[36m@@ -130,44 +83,81 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
     }[m
   }[m
 [m
[31m-  Future<void> _saveLapsOnTires(int eventId, int laps) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    prefs.setInt('laps_on_tires_$eventId', laps);[m
[31m-  }[m
[31m-[m
[31m-  Future<int> _loadLapsOnTires(int eventId) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    return prefs.getInt('laps_on_tires_$eventId') ?? 0;[m
[31m-  }[m
[31m-[m
[31m-  Future<void> _resetLapsOnTires(int eventId) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    prefs.remove('laps_on_tires_$eventId');[m
[31m-  }[m
[31m-[m
   @override[m
   void dispose() {[m
[31m-    _connectionStateTimer?.cancel(); // Zrušení časovače[m
     _disconnectDevice();[m
[31m-    _bufferSubscription.cancel();[m
[32m+[m[32m    _disableBackgroundExecution();[m
     WidgetsBinding.instance.removeObserver(this);[m
[31m-    _cancelNotification();[m
[32m+[m[32m    _cancelNotification(); // Ensure notification stops when disposed[m
     super.dispose();[m
   }[m
 [m
   @override[m
   void didChangeAppLifecycleState(AppLifecycleState state) {[m
     if (state == AppLifecycleState.paused) {[m
[31m-      _backgroundService.enableBackgroundExecution();[m
[31m-      if (!isNotificationActive) {[m
[31m-        _startUpdatingNotification();[m
[31m-      }[m
[32m+[m[32m      _enableBackgroundExecution();[m
[32m+[m[32m      _startUpdatingNotification();[m
     } else if (state == AppLifecycleState.resumed) {[m
[31m-      _backgroundService.disableBackgroundExecution();[m
[32m+[m[32m      _disableBackgroundExecution();[m
       _cancelNotification();[m
     }[m
   }[m
 [m
[32m+[m[32m  void _checkBatteryLevel(Uint8List value) {[m
[32m+[m[32m    // Zkontrolujeme, zda je hodnota baterie k dispozici[m
[32m+[m[32m    if (value.length > 67) {[m
[32m+[m[32m      int batteryLevel =[m
[32m+[m[32m          value[67] & 0x7F; // Extrahovat úroveň baterie v procentech[m
[32m+[m
[32m+[m[32m      // Zobrazí upozornění při první detekci nízké baterie (20 % nebo méně)[m
[32m+[m[32m      if (batteryLevel <= 20 && !batteryAlertShown) {[m
[32m+[m[32m        batteryAlertShown = true;[m
[32m+[m[32m        _showBatteryLowAlert(batteryLevel);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      // Zobrazí kritické upozornění při dosažení 10 % nebo méně[m
[32m+[m[32m      if (batteryLevel <= 10 && !criticalBatteryAlertShown) {[m
[32m+[m[32m        criticalBatteryAlertShown = true;[m
[32m+[m[32m        _showCriticalBatteryAlert();[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  void _showBatteryLowAlert(int batteryLevel) {[m
[32m+[m[32m    showDialog([m
[32m+[m[32m      context: context,[m
[32m+[m[32m      builder: (context) => AlertDialog([m
[32m+[m[32m        title: const Text("Racebox - Nízká úroveň baterie"),[m
[32m+[m[32m        content: Text("Úroveň baterie RaceBoxu je pouze $batteryLevel%."),[m
[32m+[m[32m        actions: [[m
[32m+[m[32m          TextButton([m
[32m+[m[32m            onPressed: () => Navigator.pop(context),[m
[32m+[m[32m            child: const Text("OK"),[m
[32m+[m[32m          ),[m
[32m+[m[32m        ],[m
[32m+[m[32m      ),[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  void _showCriticalBatteryAlert() {[m
[32m+[m[32m    showDialog([m
[32m+[m[32m      context: context,[m
[32m+[m[32m      builder: (context) => AlertDialog([m
[32m+[m[32m        title: const Text("Racebox - Kritická úroveň baterie"),[m
[32m+[m[32m        content: const Text([m
[32m+[m[32m          "Úroveň baterie je kritická, prosím nabijte Racebox",[m
[32m+[m[32m          style: TextStyle(color: Colors.red),[m
[32m+[m[32m        ),[m
[32m+[m[32m        actions: [[m
[32m+[m[32m          TextButton([m
[32m+[m[32m            onPressed: () => Navigator.pop(context),[m
[32m+[m[32m            child: const Text("OK"),[m
[32m+[m[32m          ),[m
[32m+[m[32m        ],[m
[32m+[m[32m      ),[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
   void _initializeNotifications() {[m
     AwesomeNotifications().initialize([m
       null, // icon can be customized here[m
[36m@@ -186,24 +176,16 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
   }[m
 [m
   void _startUpdatingNotification() {[m
[31m-    if (isNotificationActive) return;[m
[31m-[m
[31m-    _notificationTimer?.cancel();[m
[32m+[m[32m    _notificationTimer?.cancel(); // Zrušení případných starých timerů[m
     _notificationTimer = Timer.periodic(const Duration(seconds: 1), (timer) {[m
[31m-      if (isNotificationActive) return;[m
[31m-[m
[31m-      String currentTime =[m
[31m-          TimeFormatters.formattedNotificationStopwatchTime(stopwatch);[m
[32m+[m[32m      String currentTime = _formatedNotificationStopwatchTime();[m
       _showPersistentNotification(currentTime);[m
[31m-      isNotificationActive = true;[m
     });[m
   }[m
 [m
   void _cancelNotification() {[m
     _notificationTimer?.cancel();[m
[31m-    _notificationTimer = null;[m
[31m-    isNotificationActive = false;[m
[31m-    AwesomeNotifications().cancel(1);[m
[32m+[m[32m    AwesomeNotifications().cancel(1); // Cancel the specific notification ID[m
   }[m
 [m
   void _showPersistentNotification(String time) {[m
[36m@@ -212,7 +194,7 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
         id: 1,[m
         channelKey: 'race_channel',[m
         title: notificationMessage,[m
[31m-        body: 'Aplikace je spuštěna na pozadí',[m
[32m+[m[32m        body: 'Aktuální čas: $time',[m
         notificationLayout: NotificationLayout.Default,[m
         displayOnForeground: true,[m
         displayOnBackground: true,[m
[36m@@ -230,12 +212,6 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
     webUser = prefs.getString('web_user') ?? '';[m
     notificationMessage = eventPhaseId == 1 ? 'Trénink' : 'Kvalifikace';[m
 [m
[31m-    // Načtení počtu kol na sadě až po nastavení eventId[m
[31m-    final laps = await _loadLapsOnTires(eventId);[m
[31m-    setState(() {[m
[31m-      lapsOnTires = laps;[m
[31m-    });[m
[31m-[m
     final ApiClient apiClient = ApiClient();[m
     apiClient.initialize();[m
 [m
[36m@@ -253,27 +229,42 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
     }[m
   }[m
 [m
[32m+[m[32m  Future<void> _enableBackgroundExecution() async {[m
[32m+[m[32m    const androidConfig = FlutterBackgroundAndroidConfig([m
[32m+[m[32m      notificationTitle: "Závodní aplikace běží na pozadí",[m
[32m+[m[32m      notificationText: "Sbíráme data závodu",[m
[32m+[m[32m      notificationImportance: AndroidNotificationImportance.high,[m
[32m+[m[32m      notificationIcon:[m
[32m+[m[32m          AndroidResource(name: 'background_icon', defType: 'drawable'),[m
[32m+[m[32m    );[m
[32m+[m
[32m+[m[32m    bool hasPermissions = await FlutterBackground.hasPermissions;[m
[32m+[m[32m    if (!hasPermissions) {[m
[32m+[m[32m      hasPermissions =[m
[32m+[m[32m          await FlutterBackground.initialize(androidConfig: androidConfig);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    if (hasPermissions) {[m
[32m+[m[32m      await FlutterBackground.enableBackgroundExecution();[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  Future<void> _disableBackgroundExecution() async {[m
[32m+[m[32m    if (FlutterBackground.isBackgroundExecutionEnabled) {[m
[32m+[m[32m      await FlutterBackground.disableBackgroundExecution();[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
   List<double> _parseCoordinate(String coordinate) {[m
     final parts = coordinate.split(',');[m
     return [double.parse(parts[0]), double.parse(parts[1])];[m
   }[m
 [m
   void _listenToCharacteristic() {[m
[31m-    // Aktivace notifikací[m
[31m-    widget.characteristic.setNotifyValue(true).then((_) {[m
[31m-      // Nastavení časové bariéry[m
[31m-[m
[31m-      // Poslouchání příchozích hodnot[m
[31m-      widget.characteristic.lastValueStream.listen((value) {[m
[31m-        if (value.isNotEmpty) {[m
[31m-          // Tady předej data do bufferStreamController[m
[31m-          _bufferStreamController.add(Uint8List.fromList(value));[m
[31m-        }[m
[31m-      }, onError: (error) {[m
[31m-        _showMessage('Chyba při čtení BLE dat: $error');[m
[31m-      });[m
[31m-    }).catchError((error) {[m
[31m-      _showMessage('Chyba při nastavování notifikací: $error');[m
[32m+[m[32m    widget.characteristic.setNotifyValue(true);[m
[32m+[m[32m    widget.characteristic.lastValueStream.listen((value) {[m
[32m+[m[32m      _checkBatteryLevel(Uint8List.fromList(value));[m
[32m+[m[32m      _bufferStreamController.add(Uint8List.fromList(value));[m
     });[m
   }[m
 [m
[36m@@ -318,23 +309,13 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
 [m
     currentLongitude = _getInt32(payload, 24) / 1e7;[m
     currentLatitude = _getInt32(payload, 28) / 1e7;[m
[31m-    int currentBatteryLevel = payload[67] & 0x7F;[m
[32m+[m[32m    double speed = _getInt32(payload, 48) / 1e3 * 3.6;[m
 [m
[31m-    int fixStatus = payload[20];[m
[31m-[m
[31m-    // Kontrola platnosti polohy a GNSS fixu (3 = 3D fix)[m
[31m-    if (isCalibrating &&[m
[31m-        fixStatus == 3 &&[m
[31m-        (currentLatitude != 0.0 || currentLongitude != 0.0)) {[m
[31m-      isCalibrating = false;[m
[31m-      Navigator.of(context).pop(); // Zavření dialogu kalibrace[m
[31m-    }[m
[32m+[m[32m    if (speed > maxValidSpeed) return;[m
 [m
     setState(() {[m
[31m-      batteryLevel = currentBatteryLevel;[m
[31m-      isBatteryLevelKnown = true;[m
[31m-[m
       currentTime = DateTime.now().toLocal().toIso8601String();[m
[32m+[m[32m      currentSpeed = speed;[m
 [m
       bool crossingStart = _isCrossingLine([m
           currentLatitude, currentLongitude, startLineP1, startLineP2);[m
[36m@@ -353,18 +334,6 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
           lock = false;[m
         });[m
       }[m
[31m-      if (currentBatteryLevel == 0) {[m
[31m-        _showMessage('Baterie je na 0%. Zařízení bude odpojeno.');[m
[31m-        Fluttertoast.showToast([m
[31m-          msg: 'Baterie je na 0%. Zařízení bude odpojeno.',[m
[31m-          toastLength: Toast.LENGTH_LONG,[m
[31m-          gravity: ToastGravity.TOP,[m
[31m-          backgroundColor: Colors.redAccent,[m
[31m-          textColor: Colors.white,[m
[31m-          fontSize: 16.0,[m
[31m-        );[m
[31m-        _endRace();[m
[31m-      }[m
     });[m
   }[m
 [m
[36m@@ -425,17 +394,20 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
 [m
   Future<bool> _disconnectDevice() async {[m
     try {[m
[32m+[m[32m      await widget.characteristic.setNotifyValue(false);[m
       var currentState = await widget.device.connectionState.first;[m
       if (currentState == BluetoothConnectionState.connected) {[m
[31m-        await widget.characteristic.setNotifyValue(false);[m
         await widget.device.disconnect();[m
[32m+[m[32m        _showMessage([m
[32m+[m[32m            'Successfully disconnected from ${widget.device.platformName}');[m
         return true;[m
       } else {[m
[31m-        // Pokud zařízení není připojeno, není potřeba ho odpojovat[m
[32m+[m[32m        _showMessage('Device is already disconnected.');[m
         return true;[m
       }[m
     } catch (e) {[m
[31m-      _showMessage('Selhání odpojení od ${widget.device.platformName}: $e');[m
[32m+[m[32m      _showMessage([m
[32m+[m[32m          'Failed to disconnect from ${widget.device.platformName}: $e');[m
       return false;[m
     }[m
   }[m
[36m@@ -444,39 +416,31 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
     double lapTime = stopwatch.elapsedMilliseconds / 1000.0;[m
 [m
     if (lapTime > 0.0) {[m
[31m-      if (fastestLap == null || lapTime < fastestLap!) {[m
[31m-        fastestLap = lapTime;[m
[31m-      }[m
[31m-[m
       final apiClient = ApiClient();[m
       apiClient.initialize();[m
       apiClient[m
[31m-          .postLapData(eventId, webUser, TimeFormatters.formatLapTime(lapTime),[m
[31m-              eventPhaseId)[m
[32m+[m[32m          .postLapData(eventId, webUser, _formatLapTime(lapTime), eventPhaseId)[m
           .catchError((error, stackTrace) {[m
[32m+[m[32m        /*_showMessage([m
[32m+[m[32m            'Event ID: $eventId, Web User: $webUser, Lap Time: ${_formatLapTime(lapTime)}, Event Phase ID: $eventPhaseId');*/[m
         _showMessage('Chyba při odesílání dat: $error');[m
       });[m
       lapTimes.add(lapTime);[m
       _scrollToBottom();[m
     }[m
 [m
[31m-    // Aktualizace počtu kol na sadě[m
[31m-    lapsOnTires++;[m
[31m-    await _saveLapsOnTires(eventId, lapsOnTires);[m
[31m-[m
     // Zastaví, resetuje a spustí stopky[m
     stopwatch.stop();[m
     stopwatch.reset();[m
     stopwatch.start();[m
 [m
[31m-    // Pouze pro aktuální závod (ne na sadě)[m
     completedLaps++;[m
   }[m
 [m
   void _endRace() async {[m
     raceEnded = true;[m
     final isDisconected = await _disconnectDevice();[m
[31m-    await _backgroundService.disableBackgroundExecution();[m
[32m+[m[32m    await _disableBackgroundExecution();[m
     // Zkontroluje, zda je zařízení odpojeno[m
     var currentState = await widget.device.connectionState.first;[m
     if (currentState != BluetoothConnectionState.connected && isDisconected) {[m
[36m@@ -485,7 +449,7 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
           validLapTimes.isNotEmpty ? validLapTimes.reduce(min) : 0.0;[m
       String message = lapTimes.isEmpty[m
           ? 'Závod byl ukončen bez ujetého kola'[m
[31m-          : 'Nejrychlejší čas kola: ';[m
[32m+[m[32m          : 'Nejrychlejší kolo trvalo: ';[m
 [m
       // Přesměrování na stránku s výsledky[m
       Navigator.pushReplacement([m
[36m@@ -503,6 +467,13 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
     }[m
   }[m
 [m
[32m+[m[32m  String _formatTime(String time) {[m
[32m+[m[32m    List<String> parts = time.split(':');[m
[32m+[m[32m    String formattedTime =[m
[32m+[m[32m        '${parts[0].padLeft(2, '0')}:${parts[1].padLeft(2, '0')}:${parts[2].padLeft(2, '0')}';[m
[32m+[m[32m    return formattedTime;[m
[32m+[m[32m  }[m
[32m+[m
   void _showMessage(String message) {[m
     setState(() {[m
       ScaffoldMessenger.of(context).showSnackBar([m
[36m@@ -526,244 +497,175 @@[m [mclass _TrainingQualificationPageState extends State<TrainingQualificationPage>[m
     });[m
   }[m
 [m
[31m-  void _handleTireChange() {[m
[31m-    showDialog([m
[31m-      context: context,[m
[31m-      builder: (BuildContext context) {[m
[31m-        final theme = Theme.of(context);[m
[31m-        return AlertDialog([m
[31m-          backgroundColor: theme.colorScheme.surface, // Dynamic background[m
[31m-          shape: RoundedRectangleBorder([m
[31m-            borderRadius: BorderRadius.circular(12.0),[m
[31m-          ),[m
[31m-          title: Text([m
[31m-            'Změna sady kol',[m
[31m-            style: TextStyle([m
[31m-              color: theme.colorScheme.onSurface,[m
[31m-              fontWeight: FontWeight.bold,[m
[31m-              fontSize: 18,[m
[31m-            ),[m
[31m-          ),[m
[31m-          content: Text([m
[31m-            'Opravdu chcete provést změnu sady kol? Počet kol na sadě bude resetován.',[m
[31m-            style: TextStyle([m
[31m-              color: theme.colorScheme.onSurface.withAlpha((0.7 * 255).toInt()),[m
[31m-              fontSize: 16,[m
[31m-            ),[m
[31m-          ),[m
[31m-          actions: <Widget>[[m
[31m-            TextButton([m
[31m-              onPressed: () {[m
[31m-                Navigator.of(context).pop();[m
[31m-              },[m
[31m-              style: TextButton.styleFrom([m
[31m-                foregroundColor: theme.colorScheme.primary, // Dynamic red[m
[31m-              ),[m
[31m-              child: const Text('Zrušit'),[m
[31m-            ),[m
[31m-            TextButton([m
[31m-              onPressed: () {[m
[31m-                _resetLapsOnTires(eventId).then((_) {[m
[31m-                  setState(() {[m
[31m-                    completedLaps = 0; // Reset aktuální hodnoty[m
[31m-                  });[m
[31m-                });[m
[31m-                Navigator.of(context).pop();[m
[31m-              },[m
[31m-              style: TextButton.styleFrom([m
[31m-                foregroundColor: Colors.green, // Confirm button color[m
[31m-              ),[m
[31m-              child: const Text('Potvrdit'),[m
[31m-            ),[m
[31m-          ],[m
[31m-        );[m
[31m-      },[m
[31m-    );[m
[31m-  }[m
[31m-[m
   @override[m
   Widget build(BuildContext context) {[m
[31m-    final theme = Theme.of(context);[m
     final size = MediaQuery.of(context).size;[m
 [m
[31m-    return Scaffold([m
[31m-      backgroundColor: theme.scaffoldBackgroundColor,[m
[31m-      appBar: AppBar([m
[31m-        backgroundColor: theme.colorScheme.surface,[m
[31m-        centerTitle: false,[m
[31m-        leadingWidth: 0, // Zarovná titulek doleva[m
[31m-        title: Text([m
[31m-          'Trénink / Kvalifikace',[m
[31m-          style: TextStyle([m
[31m-            color: theme.colorScheme.onSurface,[m
[31m-            fontWeight: FontWeight.bold,[m
[31m-            fontSize: 18.0,[m
[31m-          ),[m
[32m+[m[32m    return PopScope([m
[32m+[m[32m      canPop: false,[m
[32m+[m[32m      child: Scaffold([m
[32m+[m[32m        backgroundColor: Colors.white,[m
[32m+[m[32m        appBar: AppBar([m
[32m+[m[32m          backgroundColor: Colors.white,[m
[32m+[m[32m          title: const Text('Závodní stránka',[m
[32m+[m[32m              style: TextStyle(color: Colors.black)),[m
[32m+[m[32m          elevation: 0,[m
[32m+[m[32m          automaticallyImplyLeading: false,[m
         ),[m
[31m-        automaticallyImplyLeading: false,[m
[31m-        actions: [[m
[31m-          // Zobrazení stavu baterie[m
[31m-          Row([m
[32m+[m[32m        body: Padding([m
[32m+[m[32m          padding: const EdgeInsets.all(16.0),[m
[32m+[m[32m          child: Column([m
             children: [[m
[31m-              Row([m
[31m-                children: [[m
[31m-                  Icon([m
[31m-                    isBatteryLevelKnown[m
[31m-                        ? batteryHelper.getBatteryIcon(batteryLevel!, false)[m
[31m-                        : Icons[m
[31m-                            .battery_unknown, // Původně tam bylo getBatteryIcon() bez parametrů[m
[31m-                    color: isBatteryLevelKnown[m
[31m-                        ? batteryHelper.getBatteryColor(batteryLevel!)[m
[31m-                        : Colors.grey,[m
[32m+[m[32m              const SizedBox(height: 24),[m
[32m+[m[32m              Text([m
[32m+[m[32m                _formattedStopwatchTime(),[m
[32m+[m[32m                style: const TextStyle([m
[32m+[m[32m                  fontSize: 64,[m
[32m+[m[32m                  fontWeight: FontWeight.bold,[m
[32m+[m[32m                  color: Colors.black,[m
[32m+[m[32m                ),[m
[32m+[m[32m              ),[m
[32m+[m[32m              /*const SizedBox(height: 16),[m
[32m+[m[32m              ElevatedButton([m
[32m+[m[32m                onPressed: registerLap,[m
[32m+[m[32m                style: ElevatedButton.styleFrom([m
[32m+[m[32m                  padding:[m
[32m+[m[32m                      const EdgeInsets.symmetric(horizontal: 32, vertical: 16),[m
[32m+[m[32m                  backgroundColor: const Color(0xFFFF8377),[m
[32m+[m[32m                  shape: RoundedRectangleBorder([m
[32m+[m[32m                    borderRadius: BorderRadius.circular(32.0),[m
                   ),[m
[31m-                  const SizedBox(width: 4),[m
[31m-                  Text([m
[31m-                    isBatteryLevelKnown ? '$batteryLevel%' : 'N/A',[m
[32m+[m[32m                ),[m
[32m+[m[32m                child: const Text('Zaregistrovat kolo',[m
                     style: TextStyle([m
[31m-                      fontWeight: FontWeight.bold,[m
[31m-                      color: isBatteryLevelKnown[m
[31m-                          ? batteryHelper.getBatteryColor(batteryLevel!)[m
[31m-                          : Colors.grey,[m
[31m-                    ),[m
[32m+[m[32m                      fontSize: 24,[m
[32m+[m[32m                      color: Colors.white,[m
[32m+[m[32m                    )),[m
[32m+[m[32m              ),*/[m
[32m+[m[32m              const SizedBox(height: 16),[m
[32m+[m[32m              ElevatedButton([m
[32m+[m[32m                onPressed: _endRace,[m
[32m+[m[32m                style: ElevatedButton.styleFrom([m
[32m+[m[32m                  padding:[m
[32m+[m[32m                      const EdgeInsets.symmetric(horizontal: 32, vertical: 16),[m
[32m+[m[32m                  backgroundColor: const Color(0xFFFF8377),[m
[32m+[m[32m                  shape: RoundedRectangleBorder([m
[32m+[m[32m                    borderRadius: BorderRadius.circular(32.0),[m
                   ),[m
[31m-                ],[m
[31m-              ),[m
[31m-              const SizedBox(width: 4),[m
[31m-            ],[m
[31m-          ),[m
[31m-          IconButton([m
[31m-            icon: const Icon(Icons.tire_repair_outlined),[m
[31m-            onPressed: _handleTireChange,[m
[31m-            tooltip: 'Změna sady kol',[m
[31m-          ),[m
[31m-        ],[m
[31m-      ),[m
[31m-      body: LayoutBuilder([m
[31m-        builder: (context, constraints) {[m
[31m-          final double statCardHeight = constraints.maxHeight * 0.1;[m
[31m-          final double statCardWidth = constraints.maxWidth * 0.4;[m
[31m-          final double timerFontSize = constraints.maxHeight * 0.08;[m
[31m-[m
[31m-          return Center([m
[31m-            child: Column([m
[31m-              children: [[m
[31m-                const SizedBox(height: 24),[m
[31m-                Text([m
[31m-                  TimeFormatters.formattedStopwatchTime(stopwatch),[m
[32m+[m[32m                ),[m
[32m+[m[32m                child: const Text([m
[32m+[m[32m                  'Stop',[m
                   style: TextStyle([m
[31m-                    fontSize: timerFontSize,[m
[31m-                    fontWeight: FontWeight.bold,[m
[31m-                    color: theme.colorScheme.onSurface,[m
[31m-                    letterSpacing: 2.0,[m
[32m+[m[32m                    fontSize: 24,[m
[32m+[m[32m                    color: Colors.white,[m
                   ),[m
                 ),[m
[31m-                const SizedBox(height: 16),[m
[31m-                Padding([m
[31m-                  padding: const EdgeInsets.symmetric(horizontal: 16.0),[m
[31m-                  child: Wrap([m
[31m-                    spacing: 16,[m
[31m-                    runSpacing: 16,[m
[31m-                    alignment: WrapAlignment.center,[m
[31m-                    children: [[m
[31m-                      statCard.buildStatCard([m
[31m-                        context: context,[m
[31m-                        title: 'Poslední kolo',[m
[31m-                        value: lapTimes.isNotEmpty[m
[31m-                            ? lapTimes.last.toStringAsFixed(3)[m
[31m-                            : '0:00.000',[m
[31m-                        height: statCardHeight,[m
[31m-                        width: statCardWidth,[m
[31m-                      ),[m
[31m-                      statCard.buildStatCard([m
[31m-                        context: context,[m
[31m-                        title: 'Nejrychlejší kolo',[m
[31m-                        value: fastestLap != null[m
[31m-                            ? fastestLap!.toStringAsFixed(3)[m
[31m-                            : '0:00.000',[m
[31m-                        valueColor: Colors.green,[m
[31m-                        height: statCardHeight,[m
[31m-                        width: statCardWidth,[m
[31m-                      ),[m
[31m-                      statCard.buildStatCard([m
[31m-                        context: context,[m
[31m-                        title: 'Kol na sadě',[m
[31m-                        value: lapsOnTires.toString(),[m
[31m-                        height: statCardHeight,[m
[31m-                        width: statCardWidth,[m
[31m-                      ),[m
[31m-                      statCard.buildStatCard([m
[31m-                        context: context,[m
[31m-                        title: 'Aktuální kolo',[m
[31m-                        value: completedLaps.toString(),[m
[31m-                        height: statCardHeight,[m
[31m-                        width: statCardWidth,[m
[31m-                      ),[m
[31m-                    ],[m
[31m-                  ),[m
[32m+[m[32m              ),[m
[32m+[m[32m              const SizedBox(height: 16),[m
[32m+[m[32m              // Tabulka kol s dynamickou velikostí[m
[32m+[m[32m              ConstrainedBox([m
[32m+[m[32m                constraints: BoxConstraints([m
[32m+[m[32m                  maxHeight: size.height * 0.4, // Maximální výška tabulky[m
                 ),[m
[31m-                const SizedBox(height: 24),[m
[31m-                ConstrainedBox([m
[31m-                  constraints: BoxConstraints([m
[31m-                    maxHeight: size.height * 0.3,[m
[31m-                  ),[m
[31m-                  child: Container([m
[31m-                    width: size.width * 0.9,[m
[31m-                    decoration: BoxDecoration([m
[31m-                      color: theme.colorScheme.tertiary,[m
[31m-                      borderRadius: BorderRadius.circular(8.0),[m
[31m-                      boxShadow: [[m
[31m-                        BoxShadow([m
[31m-                          color:[m
[31m-                              theme.shadowColor.withAlpha((0.3 * 255).toInt()),[m
[31m-                          blurRadius: 6,[m
[31m-                          offset: const Offset(0, 3),[m
[31m-                        ),[m
[31m-                      ],[m
[31m-                    ),[m
[31m-                    child: LapTimeTable([m
[31m-                      lapTimes: lapTimes,[m
[31m-                      scrollController: _scrollController,[m
[31m-                    ),[m
[32m+[m[32m                child: Container([m
[32m+[m[32m                  width: size.width * 0.9,[m
[32m+[m[32m                  decoration: BoxDecoration([m
[32m+[m[32m                    color: Colors.black,[m
[32m+[m[32m                    borderRadius: BorderRadius.circular(8.0),[m
                   ),[m
[31m-                ),[m
[31m-                const Spacer(),[m
[31m-                Padding([m
[31m-                  padding: const EdgeInsets.symmetric(horizontal: 16.0),[m
[31m-                  child: ElevatedButton([m
[31m-                    onPressed: _endRace,[m
[31m-                    onLongPress: registerLap,[m
[31m-                    style: ElevatedButton.styleFrom([m
[31m-                      backgroundColor: theme.colorScheme.primary,[m
[31m-                      padding: EdgeInsets.all(constraints.maxWidth * 0.08),[m
[31m-                      shape: const CircleBorder(),[m
[31m-                    ),[m
[31m-                    child: const Text([m
[31m-                      'STOP',[m
[31m-                      style: TextStyle([m
[31m-                        color: Colors.white,[m
[31m-                        fontWeight: FontWeight.bold,[m
[31m-                      ),[m
[31m-                    ),[m
[32m+[m[32m                  child: ListView.builder([m
[32m+[m[32m                    controller: _scrollController,[m
[32m+[m[32m                    shrinkWrap: true,[m
[32m+[m[32m                    physics: lapTimes.length <= 3[m
[32m+[m[32m                        ? const NeverScrollableScrollPhysics()[m
[32m+[m[32m                        : const AlwaysScrollableScrollPhysics(),[m
[32m+[m[32m                    itemCount: lapTimes.length + 1,[m
[32m+[m[32m                    itemBuilder: (context, index) {[m
[32m+[m[32m                      if (index == 0) {[m
[32m+[m[32m                        return const ListTile([m
[32m+[m[32m                          title: Row([m
[32m+[m[32m                            mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
[32m+[m[32m                            children: [[m
[32m+[m[32m                              Text([m
[32m+[m[32m                                '#',[m
[32m+[m[32m                                style: TextStyle([m
[32m+[m[32m                                    color: Colors.white,[m
[32m+[m[32m                                    fontWeight: FontWeight.bold),[m
[32m+[m[32m                              ),[m
[32m+[m[32m                              Text([m
[32m+[m[32m                                'Čas',[m
[32m+[m[32m                                style: TextStyle([m
[32m+[m[32m                                    color: Colors.white,[m
[32m+[m[32m                                    fontWeight: FontWeight.bold),[m
[32m+[m[32m                              ),[m
[32m+[m[32m                            ],[m
[32m+[m[32m                          ),[m
[32m+[m[32m                        );[m
[32m+[m[32m                      } else {[m
[32m+[m[32m                        return ListTile([m
[32m+[m[32m                          title: Row([m
[32m+[m[32m                            mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
[32m+[m[32m                            children: [[m
[32m+[m[32m                              Text([m
[32m+[m[32m                                (index).toString(),[m
[32m+[m[32m                                style: const TextStyle(color: Colors.white),[m
[32m+[m[32m                              ),[m
[32m+[m[32m                              Text([m
[32m+[m[32m                                _formatLapTimeToTable(lapTimes[index - 1]),[m
[32m+[m[32m                                style: TextStyle([m
[32m+[m[32m                                  color: index - 1 == lapTimes.length - 1[m
[32m+[m[32m                                      ? Colors.red[m
[32m+[m[32m                                      : Colors.white,[m
[32m+[m[32m                                ),[m
[32m+[m[32m                              ),[m
[32m+[m[32m                            ],[m
[32m+[m[32m                          ),[m
[32m+[m[32m                        );[m
[32m+[m[32m                      }[m
[32m+[m[32m                    },[m
                   ),[m
                 ),[m
[31m-                Padding([m
[31m-                  padding: const EdgeInsets.symmetric(horizontal: 16),[m
[31m-                  child: Text([m
[31m-                    'Aktuální pozice: $currentLatitude, $currentLongitude',[m
[31m-                    style: TextStyle([m
[31m-                      fontSize: constraints.maxHeight * 0.02,[m
[31m-                      color: theme.colorScheme.onSurface[m
[31m-                          .withAlpha((0.7 * 255).toInt()),[m
[31m-                    ),[m
[31m-                    textAlign: TextAlign.center,[m
[31m-                  ),[m
[32m+[m[32m              ),[m
[32m+[m[32m              const SizedBox(height: 16),[m
[32m+[m[32m              Text([m
[32m+[m[32m                'Aktuální pozice: $currentLatitude, $currentLongitude',[m
[32m+[m[32m                style: const TextStyle([m
[32m+[m[32m                  fontSize: 18,[m
[32m+[m[32m                  color: Colors.black,[m
                 ),[m
[31m-                const SizedBox(height: 16),[m
[31m-              ],[m
[31m-            ),[m
[31m-          );[m
[31m-        },[m
[32m+[m[32m                textAlign: TextAlign.center,[m
[32m+[m[32m              ),[m
[32m+[m[32m            ],[m
[32m+[m[32m          ),[m
[32m+[m[32m        ),[m
       ),[m
     );[m
   }[m
[32m+[m
[32m+[m[32m  String _formattedStopwatchTime() {[m
[32m+[m[32m    final duration = stopwatch.elapsed;[m
[32m+[m[32m    return '${duration.inMinutes.toString().padLeft(2, '0')}:${(duration.inSeconds % 60).toString().padLeft(2, '0')}.${(duration.inMilliseconds % 1000 ~/ 10).toString().padLeft(2, '0')}';[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  String _formatedNotificationStopwatchTime() {[m
[32m+[m[32m    final duration = stopwatch.elapsed;[m
[32m+[m[32m    return '${duration.inMinutes.toString().padLeft(2, '0')}:${(duration.inSeconds % 60).toString().padLeft(2, '0')}';[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  String _formatLapTimeToTable(double lapTime) {[m
[32m+[m[32m    final minutes = (lapTime ~/ 60).toString().padLeft(2, '0');[m
[32m+[m[32m    final seconds = (lapTime % 60).toInt().toString().padLeft(2, '0');[m
[32m+[m[32m    final milliseconds =[m
[32m+[m[32m        ((lapTime * 1000) % 1000).toInt().toString().padLeft(3, '0');[m
[32m+[m[32m    return '$minutes:$seconds.$milliseconds';[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  String _formatLapTime(double lapTime) {[m
[32m+[m[32m    final hours = (lapTime ~/ 3600).toString().padLeft(2, '0');[m
[32m+[m[32m    final minutes = ((lapTime % 3600) ~/ 60).toString().padLeft(2, '0');[m
[32m+[m[32m    final seconds = (lapTime % 60).toInt().toString().padLeft(2, '0');[m
[32m+[m[32m    final milliseconds =[m
[32m+[m[32m        ((lapTime * 1000) % 1000).toInt().toString().padLeft(3, '0');[m
[32m+[m[32m    return '$hours:$minutes:$seconds.$milliseconds';[m
[32m+[m[32m  }[m
 }[m
[1mdiff --git a/lib/pages/racebox_connection_page.dart b/lib/pages/racebox_connection_page.dart[m
[1mindex b45853b..4309af9 100644[m
[1m--- a/lib/pages/racebox_connection_page.dart[m
[1m+++ b/lib/pages/racebox_connection_page.dart[m
[36m@@ -1,15 +1,11 @@[m
[31m-import 'dart:async';[m
 import 'dart:typed_data';[m
 import 'package:flutter/material.dart';[m
 import 'package:flutter_blue_plus/flutter_blue_plus.dart';[m
[31m-import 'package:laplink/components/bluetooth_device_list.dart';[m
[31m-import 'package:laplink/pages/race%20pages/race_page.dart';[m
[31m-import 'package:laplink/pages/race%20pages/training_qualification_page.dart';[m
[31m-import 'package:laplink/services/bluetooth_service.dart';[m
[31m-import 'package:laplink/services/preferences_service.dart';[m
[31m-import 'package:laplink/utils/battery_helper.dart';[m
[31m-import 'package:lottie/lottie.dart';[m
[31m-import 'package:fluttertoast/fluttertoast.dart';[m
[32m+[m[32mimport 'package:laplink/components/header.dart';[m
[32m+[m[32mimport 'package:permission_handler/permission_handler.dart';[m
[32m+[m[32mimport 'package:shared_preferences/shared_preferences.dart';[m
[32m+[m[32mimport 'package:laplink/pages/race pages/race_page.dart';[m
[32m+[m[32mimport 'package:laplink/pages/race pages/training_qualification_page.dart';[m
 [m
 class RaceStartPage extends StatefulWidget {[m
   const RaceStartPage({super.key});[m
[36m@@ -19,429 +15,315 @@[m [mclass RaceStartPage extends StatefulWidget {[m
 }[m
 [m
 class _RaceStartPageState extends State<RaceStartPage> {[m
[31m-  final LaplinkBluetoothService bluetoothService = LaplinkBluetoothService();[m
[31m-  final PreferencesService preferencesService = PreferencesService();[m
[31m-  final BatteryHelper batteryHelper = BatteryHelper();[m
[31m-[m
   List<BluetoothDevice> devicesList = [];[m
   BluetoothDevice? connectedDevice;[m
   BluetoothCharacteristic? txCharacteristic;[m
   bool isScanning = false;[m
[31m-  bool isBluetoothEnabled = false;[m
[31m-  bool _navigatingToRacePage = false;[m
[31m-  StreamSubscription<BluetoothAdapterState>? bluetoothStateSubscription;[m
[31m-  Timer? disconnectTimer;[m
 [m
[31m-  /// Baterie[m
[31m-  int batteryLevel = 100;[m
[31m-  bool isCharging = false;[m
[31m-  bool isBatteryLevelKnown = false;[m
[32m+[m[32m  final uartServiceUuid = Guid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");[m
[32m+[m[32m  final txCharacteristicUuid = Guid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");[m
 [m
[31m-  /// Další proměnné[m
   int? eventPhaseId;[m
   int? raceId;[m
[31m-  List<int> buffer = [];[m
[31m-  Map<String, dynamic> decodedData = {};[m
[31m-  String rawPacket = "";[m
[31m-  late StreamSubscription<List<int>> _notificationSubscription;[m
[31m-  bool canCheckBattery = false;[m
[31m-[m
[31m-  /// 1) CHANGES: Přidaná proměnná určující, zda zrovna probíhá připojování[m
[31m-  bool isConnecting = false;[m
 [m
   @override[m
   void initState() {[m
     super.initState();[m
[31m-    _loadPreferences();[m
[31m-    _listenToBluetoothState();[m
[32m+[m[32m    loadPreferences();[m
[32m+[m[32m    checkPermissions();[m
   }[m
 [m
   @override[m
   void dispose() {[m
[31m-    disconnectTimer?.cancel();[m
[31m-    bluetoothStateSubscription?.cancel();[m
[31m-    if (!_navigatingToRacePage && connectedDevice != null) {[m
[31m-      _disconnectDevice();[m
[31m-    }[m
[32m+[m[32m    // Nepřipojujeme disconnectDevice v dispose, aby spojení zůstalo[m
     super.dispose();[m
   }[m
 [m
[31m-  Future<void> _loadPreferences() async {[m
[31m-    final prefs = await PreferencesService.getPreferences();[m
[32m+[m[32m  void loadPreferences() async {[m
[32m+[m[32m    final prefs = await SharedPreferences.getInstance();[m
     setState(() {[m
       eventPhaseId = prefs.getInt('event_phase_id');[m
       raceId = prefs.getInt('race_id');[m
     });[m
   }[m
 [m
[31m-  void _listenToBluetoothState() {[m
[31m-    bluetoothStateSubscription = FlutterBluePlus.adapterState.listen((state) {[m
[31m-      final isEnabled = state == BluetoothAdapterState.on;[m
[31m-      if (isBluetoothEnabled != isEnabled) {[m
[31m-        setState(() {[m
[31m-          isBluetoothEnabled = isEnabled;[m
[31m-        });[m
[31m-        if (isEnabled) {[m
[31m-          _startScan();[m
[31m-        } else {[m
[31m-          devicesList.clear();[m
[31m-          _showMessage([m
[31m-              'Bluetooth není zapnuto. Zapněte jej pro hledání zařízení.');[m
[31m-        }[m
[31m-      }[m
[31m-    });[m
[31m-  }[m
[31m-[m
[31m-  /// -------------------------------------------------[m
[31m-  /// Zde zpracováváš data z Rx characteristic[m
[31m-  /// -------------------------------------------------[m
[31m-  void _processData() {[m
[31m-    if (buffer.length < 8) return;[m
[31m-[m
[31m-    int startIndex = buffer.indexOf(0xB5);[m
[31m-    if (startIndex == -1 || startIndex + 6 >= buffer.length) {[m
[31m-      buffer.clear();[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    if (buffer[startIndex + 1] == 0x62) {[m
[31m-      int length = buffer[startIndex + 4] | (buffer[startIndex + 5] << 8);[m
[31m-      int packetSize = 6 + length + 2;[m
[31m-[m
[31m-      if (startIndex + packetSize <= buffer.length) {[m
[31m-        Uint8List packet = Uint8List.fromList([m
[31m-            buffer.sublist(startIndex, startIndex + packetSize));[m
[31m-        buffer = buffer.sublist(startIndex + packetSize);[m
[31m-[m
[31m-        if (_validateChecksum(packet)) {[m
[31m-          setState(() {[m
[31m-            rawPacket = packet[m
[31m-                .map((byte) => byte.toRadixString(16).padLeft(2, '0'))[m
[31m-                .join(' ');[m
[31m-            _decodePacket(packet.sublist(6, 6 + length));[m
[31m-          });[m
[31m-        }[m
[31m-      }[m
[32m+[m[32m  void checkPermissions() async {[m
[32m+[m[32m    if (await Permission.bluetooth.isGranted &&[m
[32m+[m[32m        await Permission.location.isGranted) {[m
[32m+[m[32m      startScan();[m
     } else {[m
[31m-      buffer.removeAt(0);[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  void _decodePacket(Uint8List payload) {[m
[31m-    if (payload.isEmpty) return;[m
[31m-[m
[31m-    bool charging = (payload[67] & 0x80) != 0;[m
[31m-    int currentBatteryLevel = payload[67] & 0x7F; // spodních 7 bitů je level[m
[31m-[m
[31m-    setState(() {[m
[31m-      isCharging = charging;[m
[31m-      batteryLevel = currentBatteryLevel;[m
[31m-      isBatteryLevelKnown = true;[m
[31m-    });[m
[31m-[m
[31m-    if (canCheckBattery && currentBatteryLevel == 0 && isBatteryLevelKnown) {[m
[31m-      _showMessage('Baterie je na 0%. Zařízení bude odpojeno.');[m
[31m-      _disconnectDevice();[m
[31m-      Fluttertoast.showToast([m
[31m-        msg: 'Baterie je na 0%. Zařízení bude odpojeno.',[m
[31m-        toastLength: Toast.LENGTH_LONG,[m
[31m-        gravity: ToastGravity.TOP,[m
[31m-        backgroundColor: Colors.redAccent,[m
[31m-        textColor: Colors.white,[m
[31m-        fontSize: 16.0,[m
[31m-      );[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  bool _validateChecksum(Uint8List packet) {[m
[31m-    int length = packet.length;[m
[31m-    int ckA = 0, ckB = 0;[m
[31m-    for (int i = 2; i < length - 2; i++) {[m
[31m-      ckA = (ckA + packet[i]) & 0xFF;[m
[31m-      ckB = (ckB + ckA) & 0xFF;[m
[32m+[m[32m      await [Permission.bluetooth, Permission.location].request();[m
[32m+[m[32m      checkPermissions();[m
     }[m
[31m-    return ckA == packet[length - 2] && ckB == packet[length - 1];[m
   }[m
 [m
[31m-  Future<void> _startScan() async {[m
[31m-    if (!isBluetoothEnabled) {[m
[31m-      _showMessage('Bluetooth není zapnuto.');[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[32m+[m[32m  void startScan() {[m
     setState(() {[m
       isScanning = true;[m
     });[m
[31m-    devicesList = await bluetoothService.scanForDevices();[m
[31m-    setState(() {[m
[31m-      isScanning = false;[m
[31m-    });[m
[31m-  }[m
 [m
[31m-  /// 2) CHANGES: Připojování nastavíme `isConnecting = true`,[m
[31m-  /// ať víme, že probíhá connect a můžeme zobrazit loader[m
[31m-  Future<void> _connectToDevice(BluetoothDevice device) async {[m
[31m-    setState(() {[m
[31m-      isConnecting = true;[m
[32m+[m[32m    FlutterBluePlus.startScan(timeout: const Duration(seconds: 4))[m
[32m+[m[32m        .catchError((error) {[m
[32m+[m[32m      setState(() {[m
[32m+[m[32m        isScanning = false;[m
[32m+[m[32m      });[m
     });[m
 [m
[31m-    // Pokud už je nějaké zařízení připojené, nejprve se odpojíme[m
[31m-    if (connectedDevice != null) {[m
[31m-      await _disconnectDevice();[m
[31m-    }[m
[32m+[m[32m    FlutterBluePlus.scanResults.listen((results) {[m
[32m+[m[32m      setState(() {[m
[32m+[m[32m        isScanning = false;[m
[32m+[m[32m        devicesList = results[m
[32m+[m[32m            .map((r) => r.device)[m
[32m+[m[32m            .where((device) => device.platformName.contains("RaceBox"))[m
[32m+[m[32m            .toList();[m
[32m+[m[32m      });[m
[32m+[m[32m    }).onError((error) {[m
[32m+[m[32m      setState(() {[m
[32m+[m[32m        isScanning = false;[m
[32m+[m[32m      });[m
[32m+[m[32m    });[m
[32m+[m[32m  }[m
 [m
[32m+[m[32m  void connectToDevice(BluetoothDevice device) async {[m
     try {[m
[31m-      txCharacteristic = await bluetoothService.connectToDevice(device);[m
[31m-[m
[31m-      if (txCharacteristic != null) {[m
[31m-        setState(() {[m
[31m-          connectedDevice = device;[m
[31m-          isBatteryLevelKnown = false;[m
[31m-          // 3) CHANGES: Úspěšné připojení -> isConnecting = false[m
[31m-          isConnecting = false;[m
[31m-        });[m
[32m+[m[32m      // Disconnect from the currently connected device (if any)[m
[32m+[m[32m      if (connectedDevice != null && connectedDevice != device) {[m
[32m+[m[32m        await disconnectDevice();[m
[32m+[m[32m      }[m
 [m
[31m-        _startDisconnectTimer();[m
[31m-        _showMessage('Připojeno k ${device.platformName}');[m
[32m+[m[32m      // Connect to the new device with retry mechanism[m
[32m+[m[32m      await device.connect(timeout: const Duration(seconds: 5));[m
[32m+[m[32m      setState(() {[m
[32m+[m[32m        connectedDevice = device;[m
[32m+[m[32m      });[m
[32m+[m[32m      showMessage("Připojeno k ${device.platformName}");[m
 [m
[31m-        /// Odebírání notifikací[m
[31m-        _notificationSubscription =[m
[31m-            txCharacteristic!.lastValueStream.listen((data) {[m
[31m-          buffer.addAll(data);[m
[31m-          _processData();[m
[31m-        });[m
[32m+[m[32m      // Objevíme služby a nastavíme txCharacteristic po úspěšném připojení[m
[32m+[m[32m      await discoverServices(device);[m
 [m
[31m-        Future.delayed(const Duration(seconds: 3), () {[m
[31m-          setState(() {[m
[31m-            canCheckBattery = true;[m
[31m-          });[m
[31m-        });[m
[31m-      } else {[m
[31m-        // Pokud se nepodařilo připojit[m
[31m-        setState(() {[m
[31m-          isConnecting = false;[m
[31m-        });[m
[31m-        _showMessage('Nepodařilo se připojit k ${device.platformName}');[m
[32m+[m[32m      // Pokud je nalezena txCharacteristic, zapněte notifikace[m
[32m+[m[32m      if (txCharacteristic != null) {[m
[32m+[m[32m        await Future.delayed(const Duration(seconds: 1));[m
[32m+[m[32m        await txCharacteristic!.setNotifyValue(true);[m
       }[m
     } catch (e) {[m
[31m-      // Pokud došlo k chybě:[m
[31m-      setState(() {[m
[31m-        isConnecting = false;[m
[31m-      });[m
[31m-      _showMessage('Chyba při připojování: $e');[m
[32m+[m[32m      showMessage('Nepodařilo se připojit k ${device.platformName}');[m
     }[m
   }[m
 [m
[31m-  Future<void> _disconnectDevice() async {[m
[32m+[m[32m  Future<void> disconnectDevice() async {[m
     if (connectedDevice != null) {[m
[31m-      await bluetoothService.disconnectFromDevice(connectedDevice!);[m
[31m-      setState(() {[m
[31m-        connectedDevice = null;[m
[31m-        txCharacteristic = null;[m
[31m-      });[m
[32m+[m[32m      try {[m
[32m+[m[32m        final deviceName = connectedDevice!.platformName;[m
[32m+[m[32m        await connectedDevice!.disconnect();[m
[32m+[m[32m        setState(() {[m
[32m+[m[32m          connectedDevice = null;[m
[32m+[m[32m          txCharacteristic = null;[m
[32m+[m[32m        });[m
[32m+[m[32m        showMessage('Odpojeno od $deviceName');[m
[32m+[m[32m      } catch (e) {[m
[32m+[m[32m        showMessage([m
[32m+[m[32m            'Nepodařilo se odpojit od ${connectedDevice!.platformName}');[m
[32m+[m[32m      }[m
     }[m
   }[m
 [m
[31m-  void _startDisconnectTimer() {[m
[31m-    disconnectTimer?.cancel();[m
[31m-    disconnectTimer = Timer(const Duration(minutes: 2), () {[m
[31m-      if (connectedDevice != null && mounted) {[m
[31m-        _disconnectDevice();[m
[31m-        _showMessage('Automaticky odpojeno z důvodu nečinnosti.');[m
[32m+[m[32m  Future<void> discoverServices(BluetoothDevice device) async {[m
[32m+[m[32m    List<BluetoothService> services = await device.discoverServices();[m
[32m+[m[32m    for (BluetoothService service in services) {[m
[32m+[m[32m      if (service.uuid == uartServiceUuid) {[m
[32m+[m[32m        for (BluetoothCharacteristic c in service.characteristics) {[m
[32m+[m[32m          if (c.uuid == txCharacteristicUuid) {[m
[32m+[m[32m            setState(() {[m
[32m+[m[32m              txCharacteristic = c;[m
[32m+[m[32m            });[m
[32m+[m[32m          }[m
[32m+[m[32m        }[m
       }[m
[31m-    });[m
[31m-  }[m
[31m-[m
[31m-  void _cancelDisconnectTimer() {[m
[31m-    disconnectTimer?.cancel();[m
[32m+[m[32m    }[m
   }[m
 [m
[31m-  void _startRace() {[m
[32m+[m[32m  void startRace() {[m
     if (connectedDevice != null && txCharacteristic != null) {[m
[31m-      _cancelDisconnectTimer();[m
[31m-      setState(() {[m
[31m-        _navigatingToRacePage = true;[m
[31m-      });[m
[31m-      _navigateToPhase();[m
[32m+[m[32m      selectFunctionBasedOnEventPhase();[m
     } else {[m
[31m-      _showMessage('Zařízení není připojeno.');[m
[32m+[m[32m      showMessage('Zařízení není připojeno.');[m
     }[m
   }[m
 [m
[31m-  void _navigateToPhase() {[m
[32m+[m[32m  Future<void> selectFunctionBasedOnEventPhase() async {[m
[32m+[m[32m    SharedPreferences prefs = await SharedPreferences.getInstance();[m
[32m+[m[32m    int eventPhaseId = prefs.getInt('event_phase_id') ?? 1;[m
[32m+[m
     switch (eventPhaseId) {[m
       case 1:[m
[32m+[m[32m        trainingPhase();[m
[32m+[m[32m        break;[m
       case 2:[m
[31m-        Navigator.pushReplacement([m
[31m-          context,[m
[31m-          MaterialPageRoute([m
[31m-            builder: (context) => TrainingQualificationPage([m
[31m-              device: connectedDevice!,[m
[31m-              characteristic: txCharacteristic!,[m
[31m-            ),[m
[31m-          ),[m
[31m-        );[m
[32m+[m[32m        qualificationPhase();[m
         break;[m
       case 3:[m
[31m-        Navigator.pushReplacement([m
[31m-          context,[m
[31m-          MaterialPageRoute([m
[31m-            builder: (context) => RacePage([m
[31m-              device: connectedDevice!,[m
[31m-              characteristic: txCharacteristic!,[m
[31m-            ),[m
[31m-          ),[m
[31m-        );[m
[32m+[m[32m        racePhase();[m
         break;[m
       default:[m
[31m-        _showMessage('Neplatná fáze závodu.');[m
[32m+[m[32m        disconnectDevice();[m
[32m+[m[32m        if (Navigator.canPop(context)) {[m
[32m+[m[32m          Navigator.pop(context);[m
[32m+[m[32m        }[m
[32m+[m[32m        break;[m
     }[m
   }[m
 [m
[31m-  void _showMessage(String message) {[m
[31m-    ScaffoldMessenger.of(context).showSnackBar([m
[31m-      SnackBar(content: Text(message)),[m
[32m+[m[32m  void trainingPhase() {[m
[32m+[m[32m    Navigator.pushReplacement([m
[32m+[m[32m      context,[m
[32m+[m[32m      MaterialPageRoute([m
[32m+[m[32m        builder: (context) => TrainingQualificationPage([m
[32m+[m[32m          device: connectedDevice!,[m
[32m+[m[32m          characteristic: txCharacteristic!,[m
[32m+[m[32m        ),[m
[32m+[m[32m      ),[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  void qualificationPhase() {[m
[32m+[m[32m    Navigator.pushReplacement([m
[32m+[m[32m      context,[m
[32m+[m[32m      MaterialPageRoute([m
[32m+[m[32m        builder: (context) => TrainingQualificationPage([m
[32m+[m[32m          device: connectedDevice!,[m
[32m+[m[32m          characteristic: txCharacteristic!,[m
[32m+[m[32m        ),[m
[32m+[m[32m      ),[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  void racePhase() {[m
[32m+[m[32m    Navigator.pushReplacement([m
[32m+[m[32m      context,[m
[32m+[m[32m      MaterialPageRoute([m
[32m+[m[32m        builder: (context) => RacePage([m
[32m+[m[32m          device: connectedDevice!,[m
[32m+[m[32m          characteristic: txCharacteristic!,[m
[32m+[m[32m        ),[m
[32m+[m[32m      ),[m
     );[m
   }[m
 [m
[32m+[m[32m  void showMessage(String message) {[m
[32m+[m[32m    ScaffoldMessenger.of(context)[m
[32m+[m[32m        .showSnackBar(SnackBar(content: Text(message)));[m
[32m+[m[32m  }[m
[32m+[m
   @override[m
   Widget build(BuildContext context) {[m
     return Scaffold([m
[31m-      backgroundColor: Theme.of(context).scaffoldBackgroundColor,[m
       appBar: AppBar([m
[31m-        title: const Text('Výběr RaceBoxu'),[m
[31m-        titleTextStyle: const TextStyle([m
[31m-          fontSize: 18,[m
[32m+[m[32m        title: const Header(),[m
[32m+[m[32m        backgroundColor: const Color(0xffdc2626),[m
[32m+[m[32m        iconTheme: const IconThemeData([m
[32m+[m[32m          color: Colors.white,[m
         ),[m
[31m-        backgroundColor: Theme.of(context).colorScheme.surface,[m
[31m-        actions: [[m
[31m-          if (connectedDevice != null)[m
[31m-            Row([m
[31m-              children: [[m
[31m-                Icon([m
[31m-                  isBatteryLevelKnown[m
[31m-                      ? batteryHelper.getBatteryIcon(batteryLevel, isCharging)[m
[31m-                      : Icons.battery_unknown,[m
[31m-                  color: isBatteryLevelKnown[m
[31m-                      ? batteryHelper.getBatteryColor(batteryLevel)[m
[31m-                      : Colors.grey,[m
[31m-                ),[m
[31m-                const SizedBox(width: 4),[m
[31m-                Text([m
[31m-                  isBatteryLevelKnown ? '$batteryLevel%' : 'N/A',[m
[31m-                  style: TextStyle([m
[31m-                    fontWeight: FontWeight.bold,[m
[31m-                    color: isBatteryLevelKnown[m
[31m-                        ? batteryHelper.getBatteryColor(batteryLevel)[m
[31m-                        : Colors.grey,[m
[31m-                  ),[m
[31m-                ),[m
[31m-              ],[m
[31m-            ),[m
[31m-          IconButton([m
[31m-            icon: Icon([m
[31m-              Icons.refresh,[m
[31m-              color: Theme.of(context).colorScheme.secondary,[m
[31m-            ),[m
[31m-            onPressed: _startScan,[m
[31m-          ),[m
[31m-        ],[m
       ),[m
       body: Padding([m
         padding: const EdgeInsets.all(16.0),[m
         child: Column([m
[31m-          crossAxisAlignment: CrossAxisAlignment.stretch,[m
           children: [[m
[31m-            Text([m
[31m-              'Vyberte váš RaceBox',[m
[32m+[m[32m            const Center(),[m
[32m+[m[32m            const Text([m
[32m+[m[32m              'Vyberte váš racebox',[m
               style: TextStyle([m
                 fontSize: 24,[m
                 fontWeight: FontWeight.bold,[m
[31m-                color: Theme.of(context).colorScheme.onSurface,[m
[32m+[m[32m                color: Colors.black,[m
               ),[m
[31m-              textAlign: TextAlign.center,[m
             ),[m
             const SizedBox(height: 20),[m
[31m-            if (!isBluetoothEnabled)[m
[31m-              Text([m
[31m-                'Bluetooth není zapnuto. Zapněte jej pro hledání zařízení.',[m
[31m-                style: TextStyle([m
[31m-                  fontSize: 16,[m
[31m-                  color: Theme.of(context).colorScheme.error,[m
[31m-                ),[m
[31m-                textAlign: TextAlign.center,[m
[31m-              )[m
[31m-            else if (isScanning)[m
[31m-              Center([m
[31m-                child: Lottie.asset([m
[31m-                  'assets/loading.json',[m
[31m-                  width: 150,[m
[31m-                  height: 150,[m
[31m-                  fit: BoxFit.contain,[m
[31m-                ),[m
[31m-              )[m
[31m-            else if (devicesList.isEmpty)[m
[31m-              Text([m
[31m-                'Žádná zařízení nenalezena',[m
[31m-                style: TextStyle([m
[31m-                  fontSize: 16,[m
[31m-                  color: Theme.of(context)[m
[31m-                      .colorScheme[m
[31m-                      .onSurface[m
[31m-                      .withAlpha((0.7 * 255).toInt()),[m
[31m-                ),[m
[31m-                textAlign: TextAlign.center,[m
[31m-              )[m
[31m-            else[m
[31m-[m
[31m-              /// Zde se renderuje seznam zařízení a tlačítka "Connect"[m
[31m-              BluetoothDeviceList([m
[31m-                devices: devicesList,[m
[31m-                onConnect: _connectToDevice,[m
[31m-              ),[m
[31m-[m
[31m-            const SizedBox(height: 16),[m
[31m-[m
[31m-            /// 4) CHANGES: Tlačítko "Odstartovat Jízdu!" se zobrazí jen,[m
[31m-            /// když je nějaké zařízení připojené. Loader se přidá JEN vedle textu.[m
[32m+[m[32m            isScanning[m
[32m+[m[32m                ? const CircularProgressIndicator([m
[32m+[m[32m                    valueColor:[m
[32m+[m[32m                        AlwaysStoppedAnimation<Color>(Color(0xffdc2626)),[m
[32m+[m[32m                  )[m
[32m+[m[32m                : devicesList.isEmpty[m
[32m+[m[32m                    ? const Text([m
[32m+[m[32m                        'Žádná zařízení nenalezena',[m
[32m+[m[32m                        style: TextStyle(fontSize: 16),[m
[32m+[m[32m                      )[m
[32m+[m[32m                    : Expanded([m
[32m+[m[32m                        child: ListView.builder([m
[32m+[m[32m                          itemCount: devicesList.length,[m
[32m+[m[32m                          itemBuilder: (context, index) {[m
[32m+[m[32m                            final device = devicesList[index];[m
[32m+[m[32m                            final isDeviceConnected = connectedDevice != null &&[m
[32m+[m[32m                                connectedDevice!.remoteId == device.remoteId;[m
[32m+[m[32m                            return Padding([m
[32m+[m[32m                              padding:[m
[32m+[m[32m                                  const EdgeInsets.symmetric(vertical: 5.0),[m
[32m+[m[32m                              child: Container([m
[32m+[m[32m                                decoration: BoxDecoration([m
[32m+[m[32m                                  color: Colors.white,[m
[32m+[m[32m                                  borderRadius: BorderRadius.circular(12.0),[m
[32m+[m[32m                                  boxShadow: [[m
[32m+[m[32m                                    BoxShadow([m
[32m+[m[32m                                      color: Colors.grey.withOpacity(0.3),[m
[32m+[m[32m                                      spreadRadius: 3,[m
[32m+[m[32m                                      blurRadius: 5,[m
[32m+[m[32m                                      offset: const Offset(0, 3),[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                  ],[m
[32m+[m[32m                                ),[m
[32m+[m[32m                                child: ListTile([m
[32m+[m[32m                                  title: Text([m
[32m+[m[32m                                    device.platformName,[m
[32m+[m[32m                                    style: const TextStyle([m
[32m+[m[32m                                        fontSize: 18,[m
[32m+[m[32m                                        fontWeight: FontWeight.w500),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                  trailing: ElevatedButton([m
[32m+[m[32m                                    style: ElevatedButton.styleFrom([m
[32m+[m[32m                                      backgroundColor: isDeviceConnected[m
[32m+[m[32m                                          ? Colors.black[m
[32m+[m[32m                                          : const Color(0xFFFF8377),[m
[32m+[m[32m                                      padding: const EdgeInsets.symmetric([m
[32m+[m[32m                                          horizontal: 20.0, vertical: 10.0),[m
[32m+[m[32m                                      shape: RoundedRectangleBorder([m
[32m+[m[32m                                        borderRadius:[m
[32m+[m[32m                                            BorderRadius.circular(20.0),[m
[32m+[m[32m                                      ),[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                    onPressed: isDeviceConnected[m
[32m+[m[32m                                        ? null[m
[32m+[m[32m                                        : () {[m
[32m+[m[32m                                            connectToDevice(device);[m
[32m+[m[32m                                          },[m
[32m+[m[32m                                    child: Text([m
[32m+[m[32m                                      isDeviceConnected[m
[32m+[m[32m                                          ? 'Připojeno'[m
[32m+[m[32m                                          : 'Připojit se',[m
[32m+[m[32m                                      style: const TextStyle([m
[32m+[m[32m                                          fontSize: 16, color: Colors.white),[m
[32m+[m[32m                                    ),[m
[32m+[m[32m                                  ),[m
[32m+[m[32m                                ),[m
[32m+[m[32m                              ),[m
[32m+[m[32m                            );[m
[32m+[m[32m                          },[m
[32m+[m[32m                        ),[m
[32m+[m[32m                      ),[m
             if (connectedDevice != null)[m
               ElevatedButton([m
[31m-                // Až v momentě, kdy isConnecting == false, to může zavolat _startRace[m
[31m-                onPressed: isConnecting ? null : _startRace,[m
                 style: ElevatedButton.styleFrom([m
[31m-                  backgroundColor: Theme.of(context).colorScheme.primary,[m
[32m+[m[32m                  backgroundColor: const Color(0xFFFF8377),[m
                   padding: const EdgeInsets.symmetric([m
[31m-                    horizontal: 20.0,[m
[31m-                    vertical: 12.0,[m
[31m-                  ),[m
[32m+[m[32m                      horizontal: 20.0, vertical: 12.0),[m
                   shape: RoundedRectangleBorder([m
                     borderRadius: BorderRadius.circular(25.0),[m
                   ),[m
                 ),[m
[31m-                child: Row([m
[31m-                  mainAxisAlignment: MainAxisAlignment.center,[m
[31m-                  children: [[m
[31m-                    // Zachováme původní text beze změny[m
[31m-                    const Text([m
[31m-                      'Odstartovat Jízdu!',[m
[31m-                      style: TextStyle([m
[31m-                        fontSize: 18,[m
[31m-                        color: Colors.white,[m
[31m-                      ),[m
[31m-                    ),[m
[31m-                    // Pokud je isConnecting, zobrazíme malý loader vedle textu[m
[31m-                    if (isConnecting) ...[[m
[31m-                      const SizedBox(width: 12),[m
[31m-                      const SizedBox([m
[31m-                        width: 18,[m
[31m-                        height: 18,[m
[31m-                        child: CircularProgressIndicator([m
[31m-                          strokeWidth: 2.0,[m
[31m-                          color: Colors.white,[m
[31m-                        ),[m
[31m-                      ),[m
[31m-                    ],[m
[31m-                  ],[m
[32m+[m[32m                onPressed: startRace,[m
[32m+[m[32m                child: const Text([m
[32m+[m[32m                  'Odstartovat Jízdu!',[m
[32m+[m[32m                  style: TextStyle(fontSize: 18, color: Colors.white),[m
                 ),[m
               ),[m
           ],[m
[1mdiff --git a/lib/pages/results_page.dart b/lib/pages/results_page.dart[m
[1mindex 907e1b0..eedf544 100644[m
[1m--- a/lib/pages/results_page.dart[m
[1m+++ b/lib/pages/results_page.dart[m
[36m@@ -27,61 +27,35 @@[m [mclass ResultsPage extends StatelessWidget {[m
   @override[m
   Widget build(BuildContext context) {[m
     return DefaultTabController([m
[31m-      length: 3,[m
[32m+[m[32m      length: 3, // Počet karet (Trénink, Kvalifikace, Závod)[m
       child: Scaffold([m
[31m-        backgroundColor: Theme.of(context).scaffoldBackgroundColor,[m
         appBar: AppBar([m
[31m-          automaticallyImplyLeading: true, // Bez šipky zpět[m
[31m-          backgroundColor: Theme.of(context).colorScheme.tertiary,[m
[31m-          title: Text([m
[31m-            'Detaily závodu',[m
[31m-            style: TextStyle([m
[31m-              color: Theme.of(context).colorScheme.onPrimary,[m
[31m-              fontWeight: FontWeight.bold,[m
[31m-              fontSize: 20,[m
[31m-            ),[m
[31m-          ),[m
[31m-          bottom: TabBar([m
[31m-            labelColor: Theme.of(context).colorScheme.primary,[m
[31m-            unselectedLabelColor: Theme.of(context)[m
[31m-                .colorScheme[m
[31m-                .onPrimary[m
[31m-                .withAlpha((0.9 * 255).toInt()),[m
[31m-            indicatorColor: Theme.of(context).colorScheme.primary,[m
[31m-            tabs: const [[m
[32m+[m[32m          title: const Text('Detaily závodu'),[m
[32m+[m[32m          bottom: const TabBar([m
[32m+[m[32m            tabs: [[m
               Tab(text: 'Trénink'),[m
               Tab(text: 'Kvalifikace'),[m
               Tab(text: 'Závod'),[m
             ],[m
           ),[m
[31m-          centerTitle: true,[m
         ),[m
         body: FutureBuilder<Map<String, dynamic>>([m
           future: _getRaceDetails(),[m
           builder: (context, snapshot) {[m
             if (snapshot.connectionState == ConnectionState.waiting) {[m
[31m-              return Center([m
[31m-                child: CircularProgressIndicator([m
[31m-                  valueColor: AlwaysStoppedAnimation<Color>([m
[31m-                      Theme.of(context).colorScheme.primary),[m
[31m-                ),[m
[31m-              );[m
[32m+[m[32m              return const Center(child: CircularProgressIndicator());[m
             } else if (snapshot.hasError) {[m
[31m-              return Center([m
[31m-                child: Text([m
[31m-                  'Chyba při načítání detailů závodu',[m
[31m-                  style: TextStyle([m
[31m-                    color: Theme.of(context).colorScheme.onSurface,[m
[31m-                  ),[m
[31m-                ),[m
[31m-              );[m
[32m+[m[32m              return const Center([m
[32m+[m[32m                  child: Text('Chyba při načítání detailů závodu'));[m
[32m+[m[32m            } else if (!snapshot.hasData) {[m
[32m+[m[32m              return const Center(child: Text('Žádné detaily k dispozici'));[m
             } else {[m
               final raceDetails = snapshot.data!;[m
               return TabBarView([m
                 children: [[m
[31m-                  _buildPhaseContent(context, 'Trénink', raceDetails, 1),[m
[31m-                  _buildPhaseContent(context, 'Kvalifikace', raceDetails, 2),[m
[31m-                  _buildPhaseContent(context, 'Závod', raceDetails, 3),[m
[32m+[m[32m                  _buildPhaseContent('Trénink', raceDetails, 1),[m
[32m+[m[32m                  _buildPhaseContent('Kvalifikace', raceDetails, 2),[m
[32m+[m[32m                  _buildPhaseContent('Závod', raceDetails, 3),[m
                 ],[m
               );[m
             }[m
[36m@@ -91,175 +65,250 @@[m [mclass ResultsPage extends StatelessWidget {[m
     );[m
   }[m
 [m
[31m-  Widget _buildPhaseContent(BuildContext context, String phase,[m
[31m-      Map<String, dynamic> raceDetails, int phaseId) {[m
[32m+[m[32m  Widget _buildPhaseContent([m
[32m+[m[32m      String phase, Map<String, dynamic> raceDetails, int phaseId) {[m
     return FutureBuilder([m
       future: apiClient.getEventPhaseResults([m
           raceDetails['web_user'], raceId, phaseId),[m
       builder: (context, snapshot) {[m
         if (snapshot.connectionState == ConnectionState.waiting) {[m
[31m-          return Center([m
[31m-            child: CircularProgressIndicator([m
[31m-              valueColor: AlwaysStoppedAnimation<Color>([m
[31m-                  Theme.of(context).colorScheme.primary),[m
[31m-            ),[m
[31m-          );[m
[32m+[m[32m          return const Center(child: CircularProgressIndicator());[m
[32m+[m[32m        } else if (snapshot.hasError) {[m
[32m+[m[32m          return const Center(child: Text('Chyba při načítání výsledků'));[m
         } else if (!snapshot.hasData || (snapshot.data as List).isEmpty) {[m
[31m-          return Center([m
[32m+[m[32m          return const Center([m
             child: Text([m
               'Žádná data pro tuto fázi závodu',[m
[31m-              style: TextStyle([m
[31m-                color: Theme.of(context).colorScheme.onSurface,[m
[31m-                fontSize: 18,[m
[31m-              ),[m
[32m+[m[32m              style: TextStyle(fontSize: 18),[m
             ),[m
           );[m
         } else {[m
           final results = snapshot.data as List<dynamic>;[m
[31m-          return _buildResultsTable(context, results, phase);[m
[32m+[m
[32m+[m[32m          return Padding([m
[32m+[m[32m            padding: const EdgeInsets.all(16.0),[m
[32m+[m[32m            child: Column([m
[32m+[m[32m              crossAxisAlignment: CrossAxisAlignment.start,[m
[32m+[m[32m              children: [[m
[32m+[m[32m                const SizedBox(height: 20),[m
[32m+[m[32m                const Text([m
[32m+[m[32m                  'Výsledky:',[m
[32m+[m[32m                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),[m
[32m+[m[32m                ),[m
[32m+[m[32m                const SizedBox(height: 10),[m
[32m+[m[32m                _buildResultsTable(results, phase, context),[m
[32m+[m[32m              ],[m
[32m+[m[32m            ),[m
[32m+[m[32m          );[m
         }[m
       },[m
     );[m
   }[m
 [m
[32m+[m[32m  void _showMessage(String message) {[m
[32m+[m[32m    SnackBar([m
[32m+[m[32m      content: Text(message),[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
   Widget _buildResultsTable([m
[31m-      BuildContext context, List<dynamic> results, String phase) {[m
[32m+[m[32m      List<dynamic> results, String phase, BuildContext context) {[m
[32m+[m[32m    // If the results list is empty, display a message and no table[m
[32m+[m[32m    if (results.isEmpty) {[m
[32m+[m[32m      return const Center([m
[32m+[m[32m        child: Padding([m
[32m+[m[32m          padding: EdgeInsets.symmetric(vertical: 20.0),[m
[32m+[m[32m          child: Text([m
[32m+[m[32m            'Nebyla zajeta žádná kola',[m
[32m+[m[32m            style: TextStyle([m
[32m+[m[32m              color: Colors.white, // White text[m
[32m+[m[32m              fontSize: 18, // Font size of the message[m
[32m+[m[32m            ),[m
[32m+[m[32m          ),[m
[32m+[m[32m        ),[m
[32m+[m[32m      );[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Find the fastest lap (assuming the 'time' field is in a comparable format)[m
     final fastestLap =[m
         results.reduce((a, b) => a['time'].compareTo(b['time']) < 0 ? a : b);[m
[31m-    final fastestLapIndex = results.indexOf(fastestLap) + 1;[m
[32m+[m[32m    final fastestLapIndex =[m
[32m+[m[32m        results.indexOf(fastestLap) + 1; // Get lap number (1-based index)[m
 [m
[32m+[m[32m    // If phase is "Závod", calculate the total time of all laps[m
     String totalTime = '';[m
     if (phase == 'Závod') {[m
       totalTime = _calculateTotalTime(results);[m
     }[m
 [m
[31m-    return Container([m
[31m-      decoration: BoxDecoration([m
[31m-        color: Theme.of(context).colorScheme.surface,[m
[31m-        borderRadius: BorderRadius.circular(12),[m
[31m-        boxShadow: [[m
[31m-          BoxShadow([m
[31m-            color: Colors.black.withAlpha((0.1 * 255).toInt()),[m
[31m-            blurRadius: 6,[m
[31m-            offset: const Offset(0, 3),[m
[31m-          ),[m
[31m-        ],[m
[31m-      ),[m
[31m-      margin: const EdgeInsets.symmetric(vertical: 16, horizontal: 12),[m
[31m-      padding: const EdgeInsets.all(12),[m
[31m-      child: Column([m
[31m-        crossAxisAlignment: CrossAxisAlignment.start,[m
[31m-        children: [[m
[31m-          Text([m
[31m-            'Výsledky: $phase',[m
[31m-            style: TextStyle([m
[31m-              fontSize: 20,[m
[31m-              fontWeight: FontWeight.bold,[m
[31m-              color: Theme.of(context).colorScheme.secondary,[m
[32m+[m[32m    return Center([m
[32m+[m[32m      child: Container([m
[32m+[m[32m        width: MediaQuery.of(context).size.width * 0.9, // 90% of screen width[m
[32m+[m[32m        decoration: BoxDecoration([m
[32m+[m[32m          color: Colors.black, // Black background[m
[32m+[m[32m          borderRadius: BorderRadius.circular(12), // Rounded corners[m
[32m+[m[32m          boxShadow: [[m
[32m+[m[32m            BoxShadow([m
[32m+[m[32m              color: Colors.grey.withOpacity(0.5), // Shadow for floating effect[m
[32m+[m[32m              spreadRadius: 5,[m
[32m+[m[32m              blurRadius: 7,[m
[32m+[m[32m              offset: const Offset(0, 3), // Position of shadow[m
             ),[m
[31m-          ),[m
[31m-          const SizedBox(height: 10),[m
[31m-          Expanded([m
[31m-            child: ListView.builder([m
[31m-              padding: EdgeInsets.zero,[m
[31m-              itemCount: results.length,[m
[31m-              itemBuilder: (context, index) {[m
[31m-                final result = results[index];[m
[31m-                final isFastest = index + 1 == fastestLapIndex;[m
[31m-[m
[31m-                return Column([m
[31m-                  children: [[m
[31m-                    Padding([m
[31m-                      padding: const EdgeInsets.symmetric([m
[31m-                          vertical: 6.0, horizontal: 12.0),[m
[31m-                      child: Row([m
[31m-                        mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
[31m-                        children: [[m
[31m-                          Text([m
[31m-                            'Kolo ${index + 1}',[m
[31m-                            style: TextStyle([m
[31m-                              color: isFastest[m
[31m-                                  ? Theme.of(context).colorScheme.primary[m
[31m-                                  : Theme.of(context).colorScheme.onSurface,[m
[31m-                              fontWeight: isFastest[m
[31m-                                  ? FontWeight.bold[m
[31m-                                  : FontWeight.normal,[m
[31m-                            ),[m
[31m-                          ),[m
[31m-                          Text([m
[31m-                            result['time'],[m
[31m-                            style: TextStyle([m
[31m-                              color: isFastest[m
[31m-                                  ? Theme.of(context).colorScheme.primary[m
[31m-                                  : Theme.of(context).colorScheme.onSurface,[m
[31m-                              fontWeight: isFastest[m
[31m-                                  ? FontWeight.bold[m
[31m-                                  : FontWeight.normal,[m
[31m-                            ),[m
[31m-                          ),[m
[31m-                        ],[m
[31m-                      ),[m
[32m+[m[32m          ],[m
[32m+[m[32m        ),[m
[32m+[m[32m        padding: const EdgeInsets.all(16),[m
[32m+[m[32m        child: Column([m
[32m+[m[32m          crossAxisAlignment: CrossAxisAlignment.start,[m
[32m+[m[32m          children: [[m
[32m+[m[32m            // Header row, styled like the ListTile design[m
[32m+[m[32m            const Padding([m
[32m+[m[32m              padding: EdgeInsets.symmetric(vertical: 8.0),[m
[32m+[m[32m              child: Row([m
[32m+[m[32m                mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
[32m+[m[32m                children: [[m
[32m+[m[32m                  Text([m
[32m+[m[32m                    'Kolo',[m
[32m+[m[32m                    style: TextStyle([m
[32m+[m[32m                      color: Colors.white, // White text for headers[m
[32m+[m[32m                      fontWeight: FontWeight.bold,[m
                     ),[m
[31m-                    Divider([m
[31m-                      color: Theme.of(context)[m
[31m-                          .colorScheme[m
[31m-                          .onSurface[m
[31m-                          .withAlpha((0.2 * 255).toInt()),[m
[31m-                      thickness: 1,[m
[31m-                      indent: 20,[m
[31m-                      endIndent: 20,[m
[32m+[m[32m                  ),[m
[32m+[m[32m                  Text([m
[32m+[m[32m                    'Čas',[m
[32m+[m[32m                    style: TextStyle([m
[32m+[m[32m                      color: Colors.white, // White text for headers[m
[32m+[m[32m                      fontWeight: FontWeight.bold,[m
                     ),[m
[31m-                  ],[m
[31m-                );[m
[31m-              },[m
[32m+[m[32m                  ),[m
[32m+[m[32m                ],[m
[32m+[m[32m              ),[m
             ),[m
[31m-          ),[m
[31m-          const SizedBox(height: 25),[m
[31m-          if (phase != 'Závod')[m
[31m-            Center([m
[31m-              child: Text([m
[31m-                'Nejrychlejší kolo: Kolo $fastestLapIndex - ${fastestLap['time']}',[m
[31m-                style: TextStyle([m
[31m-                  fontSize: 16,[m
[31m-                  fontWeight: FontWeight.bold,[m
[31m-                  color: Theme.of(context).colorScheme.primary,[m
[32m+[m[32m            const Divider([m
[32m+[m[32m                color: Colors.white), // Divider between header and rows[m
[32m+[m[32m            // Use Expanded + ListView.builder to make the table scrollable[m
[32m+[m[32m            SizedBox([m
[32m+[m[32m              height: 300, // Define a maximum height for the table[m
[32m+[m[32m              child: SingleChildScrollView([m
[32m+[m[32m                child: ListView.builder([m
[32m+[m[32m                  shrinkWrap: true, // Adjusts height based on content[m
[32m+[m[32m                  physics:[m
[32m+[m[32m                      const NeverScrollableScrollPhysics(), // Disable internal scrolling[m
[32m+[m[32m                  itemCount: results.length,[m
[32m+[m[32m                  itemBuilder: (context, index) {[m
[32m+[m[32m                    return Column([m
[32m+[m[32m                      children: [[m
[32m+[m[32m                        Padding([m
[32m+[m[32m                          padding: const EdgeInsets.symmetric(vertical: 8.0),[m
[32m+[m[32m                          child: Row([m
[32m+[m[32m                            mainAxisAlignment: MainAxisAlignment.spaceBetween,[m
[32m+[m[32m                            children: [[m
[32m+[m[32m                              Text([m
[32m+[m[32m                                (index + 1).toString(), // Display lap number[m
[32m+[m[32m                                style: const TextStyle(color: Colors.white),[m
[32m+[m[32m                              ),[m
[32m+[m[32m                              Text([m
[32m+[m[32m                                results[index]['time'], // Display time[m
[32m+[m[32m                                style: TextStyle([m
[32m+[m[32m                                  color: index == results.length - 1[m
[32m+[m[32m                                      ? Colors.red // Last item in red[m
[32m+[m[32m                                      : Colors.white,[m
[32m+[m[32m                                ),[m
[32m+[m[32m                              ),[m
[32m+[m[32m                            ],[m
[32m+[m[32m                          ),[m
[32m+[m[32m                        ),[m
[32m+[m[32m                        Divider([m
[32m+[m[32m                          color: Colors.white[m
[32m+[m[32m                              .withOpacity(0.5), // Divider between rows[m
[32m+[m[32m                        ),[m
[32m+[m[32m                      ],[m
[32m+[m[32m                    );[m
[32m+[m[32m                  },[m
                 ),[m
               ),[m
             ),[m
[31m-          if (phase == 'Závod')[m
[31m-            Center([m
[31m-              child: Text([m
[31m-                'Celkový čas: $totalTime',[m
[31m-                style: TextStyle([m
[31m-                  fontSize: 16,[m
[31m-                  fontWeight: FontWeight.bold,[m
[31m-                  color: Theme.of(context).colorScheme.primary,[m
[32m+[m[32m            // If phase is "Trénink" or "Kvalifikace", show fastest lap[m
[32m+[m[32m            if (phase == 'Trénink' || phase == 'Kvalifikace') ...[[m
[32m+[m[32m              const SizedBox(height: 20),[m
[32m+[m[32m              const Center([m
[32m+[m[32m                child: Text([m
[32m+[m[32m                  'Nejrychlejší kolo',[m
[32m+[m[32m                  style: TextStyle([m
[32m+[m[32m                    color: Colors.white,[m
[32m+[m[32m                    fontSize: 16,[m
[32m+[m[32m                    fontWeight: FontWeight.bold,[m
[32m+[m[32m                  ),[m
                 ),[m
               ),[m
[31m-            ),[m
[31m-        ],[m
[32m+[m[32m              const SizedBox(height: 5),[m
[32m+[m[32m              Center([m
[32m+[m[32m                child: Text([m
[32m+[m[32m                  'Kolo $fastestLapIndex: ${fastestLap['time']}', // Display lap number and time[m
[32m+[m[32m                  style: const TextStyle([m
[32m+[m[32m                    color: Colors.red,[m
[32m+[m[32m                    fontSize: 20,[m
[32m+[m[32m                  ),[m
[32m+[m[32m                ),[m
[32m+[m[32m              ),[m
[32m+[m[32m            ],[m
[32m+[m[32m            // If phase is "Závod", show total race time[m
[32m+[m[32m            if (phase == 'Závod') ...[[m
[32m+[m[32m              const SizedBox(height: 20),[m
[32m+[m[32m              const Center([m
[32m+[m[32m                child: Text([m
[32m+[m[32m                  'Celkový čas závodu:',[m
[32m+[m[32m                  style: TextStyle([m
[32m+[m[32m                    color: Colors.white,[m
[32m+[m[32m                    fontSize: 16,[m
[32m+[m[32m                    fontWeight: FontWeight.bold,[m
[32m+[m[32m                  ),[m
[32m+[m[32m                ),[m
[32m+[m[32m              ),[m
[32m+[m[32m              const SizedBox(height: 5),[m
[32m+[m[32m              Center([m
[32m+[m[32m                child: Text([m
[32m+[m[32m                  totalTime, // Display total time[m
[32m+[m[32m                  style: const TextStyle([m
[32m+[m[32m                    color: Colors.red,[m
[32m+[m[32m                    fontSize: 20,[m
[32m+[m[32m                  ),[m
[32m+[m[32m                ),[m
[32m+[m[32m              )[m
[32m+[m[32m            ],[m
[32m+[m[32m          ],[m
[32m+[m[32m        ),[m
       ),[m
     );[m
   }[m
 [m
[32m+[m[32m  // Function to calculate the total time from lap times[m
   String _calculateTotalTime(List<dynamic> results) {[m
     Duration totalDuration = Duration.zero;[m
[32m+[m
     for (var result in results) {[m
[31m-      final timeString = result['time'];[m
[31m-      final parts = timeString.split(':');[m
[31m-      final hours = int.parse(parts[0]);[m
[31m-      final minutes = int.parse(parts[1]);[m
[31m-      final seconds = int.parse(parts[2].split('.')[0]);[m
[31m-      final milliseconds = int.parse(parts[2].split('.')[1]);[m
[32m+[m[32m      final timeString = result['time']; // Example: "00:00:05.356"[m
[32m+[m[32m      final timeParts = timeString.split(':');[m
[32m+[m
[32m+[m[32m      final hours = int.parse(timeParts[0]);[m
[32m+[m[32m      final minutes = int.parse(timeParts[1]);[m
[32m+[m[32m      final secondsParts = timeParts[2].split('.');[m
[32m+[m[32m      final seconds = int.parse(secondsParts[0]);[m
[32m+[m[32m      final milliseconds = int.parse(secondsParts[1]);[m
 [m
       totalDuration += Duration([m
[31m-        hours: hours,[m
[31m-        minutes: minutes,[m
[31m-        seconds: seconds,[m
[31m-        milliseconds: milliseconds,[m
[31m-      );[m
[32m+[m[32m          hours: hours,[m
[32m+[m[32m          minutes: minutes,[m
[32m+[m[32m          seconds: seconds,[m
[32m+[m[32m          milliseconds: milliseconds);[m
     }[m
 [m
[31m-    return totalDuration.toString().split('.').first;[m
[32m+[m[32m    // Return the total time in the format hh:mm:ss.SSS[m
[32m+[m[32m    final hours = totalDuration.inHours.toString().padLeft(2, '0');[m
[32m+[m[32m    final minutes = (totalDuration.inMinutes % 60).toString().padLeft(2, '0');[m
[32m+[m[32m    final seconds = (totalDuration.inSeconds % 60).toString().padLeft(2, '0');[m
[32m+[m[32m    final milliseconds =[m
[32m+[m[32m        (totalDuration.inMilliseconds % 1000).toString().padLeft(3, '0');[m
[32m+[m
[32m+[m[32m    return '$hours:$minutes:$seconds.$milliseconds';[m
   }[m
 }[m
[1mdiff --git a/lib/provider/theme_provider.dart b/lib/provider/theme_provider.dart[m
[1mdeleted file mode 100644[m
[1mindex 2e7c029..0000000[m
[1m--- a/lib/provider/theme_provider.dart[m
[1m+++ /dev/null[m
[36m@@ -1,31 +0,0 @@[m
[31m-import 'package:flutter/material.dart';[m
[31m-import 'package:shared_preferences/shared_preferences.dart';[m
[31m-[m
[31m-class ThemeProvider with ChangeNotifier {[m
[31m-  ThemeMode _themeMode = ThemeMode.dark;[m
[31m-[m
[31m-  ThemeMode get themeMode => _themeMode;[m
[31m-[m
[31m-  ThemeProvider() {[m
[31m-    _loadThemeMode();[m
[31m-  }[m
[31m-[m
[31m-  void toggleTheme(bool isDarkMode) {[m
[31m-    print('Dark mode: $isDarkMode');[m
[31m-    _themeMode = isDarkMode ? ThemeMode.dark : ThemeMode.light;[m
[31m-    _saveThemeMode();[m
[31m-    notifyListeners();[m
[31m-  }[m
[31m-[m
[31m-  Future<void> _loadThemeMode() async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    final isDark = prefs.getBool('isDarkMode') ?? true;[m
[31m-    _themeMode = isDark ? ThemeMode.dark : ThemeMode.light;[m
[31m-    notifyListeners();[m
[31m-  }[m
[31m-[m
[31m-  Future<void> _saveThemeMode() async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    await prefs.setBool('isDarkMode', _themeMode == ThemeMode.dark);[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/services/api_service.dart b/lib/services/api_service.dart[m
[1mindex 7ba3bf5..c09cf20 100644[m
[1m--- a/lib/services/api_service.dart[m
[1m+++ b/lib/services/api_service.dart[m
[36m@@ -46,17 +46,21 @@[m [mclass ApiClient {[m
       }),[m
     );[m
 [m
[32m+[m[32m    print('API response status: ${response.statusCode}');[m
[32m+[m[32m    print('API response body: ${response.body}');[m
[32m+[m
     if (response.statusCode == 200) {[m
       final responseBody = json.decode(utf8.decode(response.bodyBytes));[m
       return responseBody['message'] == 'Authentication successful';[m
     } else if (response.statusCode == 404) {[m
[31m-      throw Exception('Uživatel nenalezen');[m
[32m+[m[32m      throw Exception('User not found');[m
     } else if (response.statusCode == 400) {[m
       throw Exception('Špatné jméno nebo heslo');[m
     } else {[m
[31m-      throw Exception('Nepovedlo se přihlásit');[m
[32m+[m[32m      throw Exception('Failed to login');[m
     }[m
[31m-  }[m
[32m+[m[32m}[m
[32m+[m
 [m
   Future<dynamic> getUserRaces(String webUser) async {[m
     final url = Uri.parse('$_baseUrl/drivers/drivers/$webUser/races');[m
[36m@@ -98,19 +102,6 @@[m [mclass ApiClient {[m
     }[m
   }[m
 [m
[31m-  Future<dynamic> postDriverEventState([m
[31m-      String webUser, int eventId, bool dnf, bool finished) async {[m
[31m-    final url = Uri.parse('$_baseUrl/drivers/event/driver/state/$webUser');[m
[31m-    final response = await http.post([m
[31m-      url,[m
[31m-      headers: _getHeaders(),[m
[31m-      body: jsonEncode({'event_id': eventId, 'dnf': dnf, 'finished': finished}),[m
[31m-    );[m
[31m-    if (response.statusCode == 400) {[m
[31m-      throw Exception('Něco se pokazilo ${response.body}');[m
[31m-    }[m
[31m-  }[m
[31m-[m
   Future<dynamic> getEventPhaseResults([m
       String webUser, int eventId, int eventPhaseId) async {[m
     final url = Uri.parse('$_baseUrl/laps/get/event/phase/driver/results')[m
[1mdiff --git a/lib/services/background_service.dart b/lib/services/background_service.dart[m
[1mdeleted file mode 100644[m
[1mindex f0f037c..0000000[m
[1m--- a/lib/services/background_service.dart[m
[1m+++ /dev/null[m
[36m@@ -1,91 +0,0 @@[m
[31m-import 'package:flutter/material.dart';[m
[31m-import 'package:flutter_background/flutter_background.dart';[m
[31m-import 'package:keep_screen_on/keep_screen_on.dart';[m
[31m-import 'package:lottie/lottie.dart';[m
[31m-[m
[31m-class BackgroundService {[m
[31m-  final BuildContext context;[m
[31m-[m
[31m-  BackgroundService({required this.context});[m
[31m-[m
[31m-  Future<void> enableBackgroundExecution() async {[m
[31m-    const androidConfig = FlutterBackgroundAndroidConfig([m
[31m-      notificationTitle: "Závodní aplikace běží na pozadí",[m
[31m-      notificationText: "Sbíráme data závodu",[m
[31m-      notificationImportance: AndroidNotificationImportance.high,[m
[31m-      notificationIcon:[m
[31m-          AndroidResource(name: 'background_icon', defType: 'drawable'),[m
[31m-    );[m
[31m-[m
[31m-    bool hasPermissions = await FlutterBackground.hasPermissions;[m
[31m-    if (!hasPermissions) {[m
[31m-      hasPermissions =[m
[31m-          await FlutterBackground.initialize(androidConfig: androidConfig);[m
[31m-    }[m
[31m-[m
[31m-    if (hasPermissions) {[m
[31m-      await FlutterBackground.enableBackgroundExecution();[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  Future<void> disableBackgroundExecution() async {[m
[31m-    if (FlutterBackground.isBackgroundExecutionEnabled) {[m
[31m-      await FlutterBackground.disableBackgroundExecution();[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  void showCalibrationDialog() {[m
[31m-    showDialog([m
[31m-      context: context,[m
[31m-      barrierDismissible: false,[m
[31m-      builder: (BuildContext context) {[m
[31m-        return AlertDialog([m
[31m-          backgroundColor: Theme.of(context).colorScheme.surface,[m
[31m-          shape: RoundedRectangleBorder([m
[31m-            borderRadius: BorderRadius.circular(16.0),[m
[31m-          ),[m
[31m-          title: Text([m
[31m-            "Kalibrace zařízení",[m
[31m-            style: TextStyle([m
[31m-              color: Theme.of(context).colorScheme.onSurface,[m
[31m-              fontWeight: FontWeight.bold,[m
[31m-              fontSize: 20,[m
[31m-            ),[m
[31m-          ),[m
[31m-          content: Column([m
[31m-            mainAxisSize: MainAxisSize.min,[m
[31m-            children: [[m
[31m-              Text([m
[31m-                "Probíhá kalibrace zařízení. Nehýbejte se prosím...",[m
[31m-                style: TextStyle([m
[31m-                  color: Theme.of(context)[m
[31m-                      .colorScheme[m
[31m-                      .onSurface[m
[31m-                      .withAlpha((0.7 * 255).toInt()),[m
[31m-                  fontSize: 16,[m
[31m-                ),[m
[31m-                textAlign: TextAlign.center,[m
[31m-              ),[m
[31m-              const SizedBox(height: 20),[m
[31m-              // Lottie spinner nahrazuje CircularProgressIndicator[m
[31m-              Lottie.asset([m
[31m-                'assets/loading.json', // Cesta k tvé Lottie animaci[m
[31m-                width: 150,[m
[31m-                height: 150,[m
[31m-                fit: BoxFit.contain,[m
[31m-              ),[m
[31m-            ],[m
[31m-          ),[m
[31m-        );[m
[31m-      },[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  void turnScreenOn() {[m
[31m-    KeepScreenOn.turnOn();[m
[31m-  }[m
[31m-[m
[31m-  void turnScreenOff() {[m
[31m-    KeepScreenOn.turnOff();[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/services/bluetooth_service.dart b/lib/services/bluetooth_service.dart[m
[1mdeleted file mode 100644[m
[1mindex e25d8b6..0000000[m
[1m--- a/lib/services/bluetooth_service.dart[m
[1m+++ /dev/null[m
[36m@@ -1,58 +0,0 @@[m
[31m-import 'dart:async';[m
[31m-import 'dart:typed_data';[m
[31m-import 'package:flutter_blue_plus/flutter_blue_plus.dart';[m
[31m-[m
[31m-class LaplinkBluetoothService {[m
[31m-  final uartServiceUuid = Guid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");[m
[31m-  final txCharacteristicUuid = Guid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");[m
[31m-[m
[31m-  Stream<Uint8List>? notificationStream;[m
[31m-[m
[31m-  Future<List<BluetoothDevice>> scanForDevices() async {[m
[31m-    List<BluetoothDevice> devicesList = [];[m
[31m-    try {[m
[31m-      FlutterBluePlus.startScan(timeout: const Duration(seconds: 4));[m
[31m-      await Future.delayed(const Duration(seconds: 4));[m
[31m-      var results = await FlutterBluePlus.scanResults.first;[m
[31m-      devicesList = results[m
[31m-          .map((r) => r.device)[m
[31m-          .where((device) => device.platformName.contains("RaceBox"))[m
[31m-          .toList();[m
[31m-    } catch (e) {[m
[31m-      print('Chyba při skenování zařízení: $e');[m
[31m-    }[m
[31m-    return devicesList;[m
[31m-  }[m
[31m-[m
[31m-  Future<BluetoothCharacteristic?> connectToDevice([m
[31m-      BluetoothDevice device) async {[m
[31m-    try {[m
[31m-      await device.connect(timeout: const Duration(seconds: 5));[m
[31m-      List<BluetoothService> services = await device.discoverServices();[m
[31m-      for (BluetoothService service in services) {[m
[31m-        if (service.uuid == uartServiceUuid) {[m
[31m-          for (BluetoothCharacteristic characteristic[m
[31m-              in service.characteristics) {[m
[31m-            if (characteristic.uuid == txCharacteristicUuid) {[m
[31m-              await characteristic.setNotifyValue(true);[m
[31m-              notificationStream =[m
[31m-                  characteristic.lastValueStream.cast<Uint8List>();[m
[31m-              return characteristic;[m
[31m-            }[m
[31m-          }[m
[31m-        }[m
[31m-      }[m
[31m-    } catch (e) {[m
[31m-      print('Chyba při připojení k zařízení: $e');[m
[31m-    }[m
[31m-    return null;[m
[31m-  }[m
[31m-[m
[31m-  Future<void> disconnectFromDevice(BluetoothDevice device) async {[m
[31m-    try {[m
[31m-      await device.disconnect();[m
[31m-    } catch (e) {[m
[31m-      print('Chyba při odpojení: $e');[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/services/preferences_service.dart b/lib/services/preferences_service.dart[m
[1mdeleted file mode 100644[m
[1mindex abe6dbe..0000000[m
[1m--- a/lib/services/preferences_service.dart[m
[1m+++ /dev/null[m
[36m@@ -1,48 +0,0 @@[m
[31m-import 'package:permission_handler/permission_handler.dart';[m
[31m-import 'package:shared_preferences/shared_preferences.dart';[m
[31m-[m
[31m-class PreferencesService {[m
[31m-  static Future<void> checkPermissions() async {[m
[31m-    if (await Permission.bluetooth.isGranted &&[m
[31m-        await Permission.location.isGranted &&[m
[31m-        await Permission.storage.isGranted) {[m
[31m-      return;[m
[31m-    } else {[m
[31m-      await [Permission.bluetooth, Permission.location, Permission.storage][m
[31m-          .request();[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  static Future<SharedPreferences> getPreferences() async {[m
[31m-    return SharedPreferences.getInstance();[m
[31m-  }[m
[31m-[m
[31m-  static Future<int?> getEventPhaseId() async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    return prefs.getInt('event_phase_id');[m
[31m-  }[m
[31m-[m
[31m-  static Future<int?> getRaceId() async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    return prefs.getInt('race_id');[m
[31m-  }[m
[31m-[m
[31m-  static Future<void> saveEventPhase(int eventPhaseId, int raceId) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    await prefs.setInt('event_phase_id', eventPhaseId);[m
[31m-    await prefs.setInt('race_id', raceId);[m
[31m-  }[m
[31m-[m
[31m-  static Future<void> saveLapsOnTires([m
[31m-      int raceId, int eventPhaseId, int laps) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    final key = 'laps_on_tires_${raceId}_$eventPhaseId';[m
[31m-    await prefs.setInt(key, laps);[m
[31m-  }[m
[31m-[m
[31m-  static Future<int> loadLapsOnTires(int raceId, int eventPhaseId) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    final key = 'laps_on_tires_${raceId}_$eventPhaseId';[m
[31m-    return prefs.getInt(key) ?? 0;[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/services/race_service.dart b/lib/services/race_service.dart[m
[1mdeleted file mode 100644[m
[1mindex d6a4f64..0000000[m
[1m--- a/lib/services/race_service.dart[m
[1m+++ /dev/null[m
[36m@@ -1,57 +0,0 @@[m
[31m-import 'package:shared_preferences/shared_preferences.dart';[m
[31m-import 'package:laplink/services/api_service.dart';[m
[31m-[m
[31m-class RaceService {[m
[31m-  /// Získání závodů pro uživatele z API a přidání informace, zda byl závod dokončen[m
[31m-  static Future<List<Map<String, dynamic>>> getDriverRaces() async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    final apiClient = ApiClient();[m
[31m-    await apiClient.initialize();[m
[31m-[m
[31m-    // Získání uživatelského jména z `SharedPreferences`[m
[31m-    String? webUser = prefs.getString('web_user');[m
[31m-    if (webUser == null) {[m
[31m-      return []; // Pokud není uživatel přihlášen[m
[31m-    }[m
[31m-[m
[31m-    try {[m
[31m-      final races = await apiClient.getUserRaces(webUser);[m
[31m-      List<Map<String, dynamic>> racesList =[m
[31m-          List<Map<String, dynamic>>.from(races);[m
[31m-[m
[31m-      return racesList;[m
[31m-    } catch (error) {[m
[31m-      print('Chyba při načítání závodů: $error');[m
[31m-      return [];[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  /// Uloží ID fáze a závodu do `SharedPreferences`[m
[31m-  static Future<void> saveEventPhase(int eventPhaseId, int raceId) async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    await prefs.setInt('event_phase_id', eventPhaseId);[m
[31m-    await prefs.setInt('race_id', raceId);[m
[31m-  }[m
[31m-[m
[31m-  /// Získání uživatelského jména uloženého v `SharedPreferences`[m
[31m-  static Future<String?> getWebUser() async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-    return prefs.getString('web_user');[m
[31m-  }[m
[31m-[m
[31m-  /// Vymazání všech klíčů závodů označených jako dokončené[m
[31m-  static Future<void> clearAllRaceCompleted() async {[m
[31m-    final prefs = await SharedPreferences.getInstance();[m
[31m-[m
[31m-    // Získání všech klíčů[m
[31m-    final keys = prefs.getKeys();[m
[31m-[m
[31m-    // Filtrování klíčů začínajících na "race_completed_"[m
[31m-    final keysToRemove = keys.where((key) => key.startsWith('race_completed_'));[m
[31m-[m
[31m-    // Smazání vybraných klíčů[m
[31m-    for (var key in keysToRemove) {[m
[31m-      await prefs.remove(key);[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/utils/battery_helper.dart b/lib/utils/battery_helper.dart[m
[1mdeleted file mode 100644[m
[1mindex a74e178..0000000[m
[1m--- a/lib/utils/battery_helper.dart[m
[1m+++ /dev/null[m
[36m@@ -1,97 +0,0 @@[m
[31m-import 'dart:typed_data';[m
[31m-import 'package:flutter/material.dart';[m
[31m-import 'package:fluttertoast/fluttertoast.dart';[m
[31m-import 'dart:io';[m
[31m-import 'package:permission_handler/permission_handler.dart';[m
[31m-[m
[31m-/// Enum pro úrovně varování o stavu baterie[m
[31m-enum LevelOfDanger { warning, danger }[m
[31m-[m
[31m-class BatteryHelper {[m
[31m-  int batteryLevel = 0;[m
[31m-  bool lowBatteryWarningShown = false;[m
[31m-  bool criticalBatteryWarningShown = false;[m
[31m-  bool canShowWarnings = false;[m
[31m-[m
[31m-  /// Zpracování dat o baterii z BLE notifikací[m
[31m-  Future<void> processBatteryData(Uint8List value,[m
[31m-      Function(int) onBatteryLevelUpdated, bool canShowToast) async {[m
[31m-    // Zajistíme, že data mají dostatečnou délku[m
[31m-    if (value.length > 67) {[m
[31m-      int rawBatteryData = value[67];[m
[31m-      int batteryLevel = (rawBatteryData & 0x7F);[m
[31m-[m
[31m-      this.batteryLevel = batteryLevel; // Aktualizace interního stavu[m
[31m-      onBatteryLevelUpdated(batteryLevel); // Callback pro UI[m
[31m-[m
[31m-      if (canShowToast) {[m
[31m-        checkAndShowBatteryWarnings(batteryLevel);[m
[31m-      } else {[m
[31m-        lowBatteryWarningShown = false;[m
[31m-        criticalBatteryWarningShown = false;[m
[31m-      }[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  /// Získání ikony baterie na základě aktuální úrovně[m
[31m-  IconData getBatteryIcon(int batteryLevel, bool isCharging) {[m
[31m-    // Pokud se nabíjí, můžeš zobrazit speciální ikonu[m
[31m-    if (isCharging) {[m
[31m-      return Icons.battery_charging_full;[m
[31m-    }[m
[31m-    // Jinak vyber ikonu podle stavu kapacity[m
[31m-    if (batteryLevel >= 95) {[m
[31m-      return Icons.battery_full;[m
[31m-    } else if (batteryLevel >= 80) {[m
[31m-      return Icons.battery_6_bar;[m
[31m-    } else if (batteryLevel >= 60) {[m
[31m-      return Icons.battery_5_bar;[m
[31m-    } else if (batteryLevel >= 40) {[m
[31m-      return Icons.battery_4_bar;[m
[31m-    } else if (batteryLevel >= 20) {[m
[31m-      return Icons.battery_3_bar;[m
[31m-    } else if (batteryLevel >= 10) {[m
[31m-      return Icons.battery_2_bar;[m
[31m-    } else {[m
[31m-      // Pod 10 %[m
[31m-      return Icons.battery_alert;[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  /// Získání barvy na základě aktuální úrovně baterie[m
[31m-  Color getBatteryColor(int batteryLevel) {[m
[31m-    if (batteryLevel >= 50) {[m
[31m-      return Colors.green;[m
[31m-    } else if (batteryLevel >= 25) {[m
[31m-      return Colors.orange;[m
[31m-    } else {[m
[31m-      return Colors.red;[m
[31m-    }[m
[31m-  }[m
[31m-[m
[31m-  /// Zobrazení varování o nízké úrovni baterie[m
[31m-  void showBatteryWarning(String message, LevelOfDanger dangerLevel) {[m
[31m-    Fluttertoast.showToast([m
[31m-      msg: message,[m
[31m-      toastLength: Toast.LENGTH_LONG,[m
[31m-      gravity: ToastGravity.TOP,[m
[31m-      backgroundColor: dangerLevel == LevelOfDanger.warning[m
[31m-          ? Colors.orangeAccent[m
[31m-          : Colors.redAccent,[m
[31m-      textColor: Colors.white,[m
[31m-      fontSize: 16.0,[m
[31m-    );[m
[31m-  }[m
[31m-[m
[31m-  /// Kontrola a zobrazení varování na základě úrovně baterie[m
[31m-  void checkAndShowBatteryWarnings(int batteryLevel) {[m
[31m-    if (batteryLevel <= 10 && !criticalBatteryWarningShown) {[m
[31m-      criticalBatteryWarningShown = true;[m
[31m-      showBatteryWarning([m
[31m-          "Varování: kritická úroveň baterie!", LevelOfDanger.danger);[m
[31m-    } else if (batteryLevel <= 20 && !lowBatteryWarningShown) {[m
[31m-      lowBatteryWarningShown = true;[m
[31m-      showBatteryWarning("Varování: baterie je vybitá!", LevelOfDanger.warning);[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/lib/utils/time_formatters.dart b/lib/utils/time_formatters.dart[m
[1mdeleted file mode 100644[m
[1mindex 606442b..0000000[m
[1m--- a/lib/utils/time_formatters.dart[m
[1m+++ /dev/null[m
[36m@@ -1,28 +0,0 @@[m
[31m-class TimeFormatters {[m
[31m-  static String formattedStopwatchTime(Stopwatch stopwatch) {[m
[31m-    final duration = stopwatch.elapsed;[m
[31m-    return '${duration.inMinutes.toString().padLeft(2, '0')}:${(duration.inSeconds % 60).toString().padLeft(2, '0')}.${(duration.inMilliseconds % 1000 ~/ 10).toString().padLeft(2, '0')}';[m
[31m-  }[m
[31m-[m
[31m-  static String formattedNotificationStopwatchTime(Stopwatch stopwatch) {[m
[31m-    final duration = stopwatch.elapsed;[m
[31m-    return '${duration.inMinutes.toString().padLeft(2, '0')}:${(duration.inSeconds % 60).toString().padLeft(2, '0')}';[m
[31m-  }[m
[31m-[m
[31m-  static String formatLapTimeToTable(double lapTime) {[m
[31m-    final minutes = (lapTime ~/ 60).toString().padLeft(2, '0');[m
[31m-    final seconds = (lapTime % 60).toInt().toString().padLeft(2, '0');[m
[31m-    final milliseconds =[m
[31m-        ((lapTime * 1000) % 1000).toInt().toString().padLeft(3, '0');[m
[31m-    return '$minutes:$seconds.$milliseconds';[m
[31m-  }[m
[31m-[m
[31m-  static String formatLapTime(double lapTime) {[m
[31m-    final hours = (lapTime ~/ 3600).toString().padLeft(2, '0');[m
[31m-    final minutes = ((lapTime % 3600) ~/ 60).toString().padLeft(2, '0');[m
[31m-    final seconds = (lapTime % 60).toInt().toString().padLeft(2, '0');[m
[31m-    final milliseconds =[m
[31m-        ((lapTime * 1000) % 1000).toInt().toString().padLeft(3, '0');[m
[31m-    return '$hours:$minutes:$seconds.$milliseconds';[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/macos/Flutter/Flutter-Debug.xcconfig b/macos/Flutter/Flutter-Debug.xcconfig[m
[1mindex 4b81f9b..c2efd0b 100644[m
[1m--- a/macos/Flutter/Flutter-Debug.xcconfig[m
[1m+++ b/macos/Flutter/Flutter-Debug.xcconfig[m
[36m@@ -1,2 +1 @@[m
[31m-#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"[m
 #include "ephemeral/Flutter-Generated.xcconfig"[m
[1mdiff --git a/macos/Flutter/Flutter-Release.xcconfig b/macos/Flutter/Flutter-Release.xcconfig[m
[1mindex 5caa9d1..c2efd0b 100644[m
[1m--- a/macos/Flutter/Flutter-Release.xcconfig[m
[1m+++ b/macos/Flutter/Flutter-Release.xcconfig[m
[36m@@ -1,2 +1 @@[m
[31m-#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"[m
 #include "ephemeral/Flutter-Generated.xcconfig"[m
[1mdiff --git a/macos/Flutter/GeneratedPluginRegistrant.swift b/macos/Flutter/GeneratedPluginRegistrant.swift[m
[1mindex b78c9aa..04d39d0 100644[m
[1m--- a/macos/Flutter/GeneratedPluginRegistrant.swift[m
[1m+++ b/macos/Flutter/GeneratedPluginRegistrant.swift[m
[36m@@ -6,17 +6,13 @@[m [mimport FlutterMacOS[m
 import Foundation[m
 [m
 import awesome_notifications[m
[31m-import battery_plus[m
 import flutter_blue_plus[m
 import flutter_local_notifications[m
[31m-import path_provider_foundation[m
 import shared_preferences_foundation[m
 [m
 func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {[m
   AwesomeNotificationsPlugin.register(with: registry.registrar(forPlugin: "AwesomeNotificationsPlugin"))[m
[31m-  BatteryPlusMacosPlugin.register(with: registry.registrar(forPlugin: "BatteryPlusMacosPlugin"))[m
   FlutterBluePlusPlugin.register(with: registry.registrar(forPlugin: "FlutterBluePlusPlugin"))[m
   FlutterLocalNotificationsPlugin.register(with: registry.registrar(forPlugin: "FlutterLocalNotificationsPlugin"))[m
[31m-  PathProviderPlugin.register(with: registry.registrar(forPlugin: "PathProviderPlugin"))[m
   SharedPreferencesPlugin.register(with: registry.registrar(forPlugin: "SharedPreferencesPlugin"))[m
 }[m
[1mdiff --git a/macos/Podfile b/macos/Podfile[m
[1mdeleted file mode 100644[m
[1mindex c795730..0000000[m
[1m--- a/macos/Podfile[m
[1m+++ /dev/null[m
[36m@@ -1,43 +0,0 @@[m
[31m-platform :osx, '10.14'[m
[31m-[m
[31m-# CocoaPods analytics sends network stats synchronously affecting flutter build latency.[m
[31m-ENV['COCOAPODS_DISABLE_STATS'] = 'true'[m
[31m-[m
[31m-project 'Runner', {[m
[31m-  'Debug' => :debug,[m
[31m-  'Profile' => :release,[m
[31m-  'Release' => :release,[m
[31m-}[m
[31m-[m
[31m-def flutter_root[m
[31m-  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)[m
[31m-  unless File.exist?(generated_xcode_build_settings_path)[m
[31m-    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"[m
[31m-  end[m
[31m-[m
[31m-  File.foreach(generated_xcode_build_settings_path) do |line|[m
[31m-    matches = line.match(/FLUTTER_ROOT\=(.*)/)[m
[31m-    return matches[1].strip if matches[m
[31m-  end[m
[31m-  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""[m
[31m-end[m
[31m-[m
[31m-require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)[m
[31m-[m
[31m-flutter_macos_podfile_setup[m
[31m-[m
[31m-target 'Runner' do[m
[31m-  use_frameworks![m
[31m-  use_modular_headers![m
[31m-[m
[31m-  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))[m
[31m-  target 'RunnerTests' do[m
[31m-    inherit! :search_paths[m
[31m-  end[m
[31m-end[m
[31m-[m
[31m-post_install do |installer|[m
[31m-  installer.pods_project.targets.each do |target|[m
[31m-    flutter_additional_macos_build_settings(target)[m
[31m-  end[m
[31m-end[m
[1mdiff --git a/pubspec.lock b/pubspec.lock[m
[1mindex c49bbb7..2e36508 100644[m
[1m--- a/pubspec.lock[m
[1m+++ b/pubspec.lock[m
[36m@@ -33,22 +33,6 @@[m [mpackages:[m
       url: "https://pub.dev"[m
     source: hosted[m
     version: "0.10.0"[m
[31m-  battery_plus:[m
[31m-    dependency: "direct main"[m
[31m-    description:[m
[31m-      name: battery_plus[m
[31m-      sha256: a0409fe7d21905987eb1348ad57c634f913166f14f0c8936b73d3f5940fac551[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "6.2.1"[m
[31m-  battery_plus_platform_interface:[m
[31m-    dependency: transitive[m
[31m-    description:[m
[31m-      name: battery_plus_platform_interface[m
[31m-      sha256: e8342c0f32de4b1dfd0223114b6785e48e579bfc398da9471c9179b907fa4910[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "2.0.1"[m
   boolean_selector:[m
     dependency: transitive[m
     description:[m
[36m@@ -101,10 +85,10 @@[m [mpackages:[m
     dependency: transitive[m
     description:[m
       name: collection[m
[31m-      sha256: a1ace0a119f20aabc852d165077c036cd864315bd99b7eaa10a60100341941bf[m
[32m+[m[32m      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a[m
       url: "https://pub.dev"[m
     source: hosted[m
[31m-    version: "1.19.0"[m
[32m+[m[32m    version: "1.18.0"[m
   crypto:[m
     dependency: transitive[m
     description:[m
[36m@@ -232,22 +216,6 @@[m [mpackages:[m
     description: flutter[m
     source: sdk[m
     version: "0.0.0"[m
[31m-  fluttertoast:[m
[31m-    dependency: "direct main"[m
[31m-    description:[m
[31m-      name: fluttertoast[m
[31m-      sha256: "24467dc20bbe49fd63e57d8e190798c4d22cbbdac30e54209d153a15273721d1"[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "8.2.10"[m
[31m-  google_fonts:[m
[31m-    dependency: "direct main"[m
[31m-    description:[m
[31m-      name: google_fonts[m
[31m-      sha256: b1ac0fe2832c9cc95e5e88b57d627c5e68c223b9657f4b96e1487aa9098c7b82[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "6.2.1"[m
   http:[m
     dependency: "direct main"[m
     description:[m
[36m@@ -308,18 +276,18 @@[m [mpackages:[m
     dependency: transitive[m
     description:[m
       name: leak_tracker[m
[31m-      sha256: "7bb2830ebd849694d1ec25bf1f44582d6ac531a57a365a803a6034ff751d2d06"[m
[32m+[m[32m      sha256: "3f87a60e8c63aecc975dda1ceedbc8f24de75f09e4856ea27daf8958f2f0ce05"[m
       url: "https://pub.dev"[m
     source: hosted[m
[31m-    version: "10.0.7"[m
[32m+[m[32m    version: "10.0.5"[m
   leak_tracker_flutter_testing:[m
     dependency: transitive[m
     description:[m
       name: leak_tracker_flutter_testing[m
[31m-      sha256: "9491a714cca3667b60b5c420da8217e6de0d1ba7a5ec322fab01758f6998f379"[m
[32m+[m[32m      sha256: "932549fb305594d82d7183ecd9fa93463e9914e1b67cacc34bc40906594a1806"[m
       url: "https://pub.dev"[m
     source: hosted[m
[31m-    version: "3.0.8"[m
[32m+[m[32m    version: "3.0.5"[m
   leak_tracker_testing:[m
     dependency: transitive[m
     description:[m
[36m@@ -336,14 +304,6 @@[m [mpackages:[m
       url: "https://pub.dev"[m
     source: hosted[m
     version: "4.0.0"[m
[31m-  lottie:[m
[31m-    dependency: "direct main"[m
[31m-    description:[m
[31m-      name: lottie[m
[31m-      sha256: fa39707f36786707b01eca7626d2c16c32aa603b3f3a146518518458847dc127[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "3.2.0"[m
   matcher:[m
     dependency: transitive[m
     description:[m
[36m@@ -368,14 +328,6 @@[m [mpackages:[m
       url: "https://pub.dev"[m
     source: hosted[m
     version: "1.15.0"[m
[31m-  nested:[m
[31m-    dependency: transitive[m
[31m-    description:[m
[31m-      name: nested[m
[31m-      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "1.0.0"[m
   path:[m
     dependency: transitive[m
     description:[m
[36m@@ -384,30 +336,6 @@[m [mpackages:[m
       url: "https://pub.dev"[m
     source: hosted[m
     version: "1.9.0"[m
[31m-  path_provider:[m
[31m-    dependency: transitive[m
[31m-    description:[m
[31m-      name: path_provider[m
[31m-      sha256: "50c5dd5b6e1aaf6fb3a78b33f6aa3afca52bf903a8a5298f53101fdaee55bbcd"[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "2.1.5"[m
[31m-  path_provider_android:[m
[31m-    dependency: transitive[m
[31m-    description:[m
[31m-      name: path_provider_android[m
[31m-      sha256: "4adf4fd5423ec60a29506c76581bc05854c55e3a0b72d35bb28d661c9686edf2"[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "2.2.15"[m
[31m-  path_provider_foundation:[m
[31m-    dependency: transitive[m
[31m-    description:[m
[31m-      name: path_provider_foundation[m
[31m-      sha256: "4843174df4d288f5e29185bd6e72a6fbdf5a4a4602717eed565497429f179942"[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "2.4.1"[m
   path_provider_linux:[m
     dependency: transitive[m
     description:[m
[36m@@ -504,14 +432,6 @@[m [mpackages:[m
       url: "https://pub.dev"[m
     source: hosted[m
     version: "2.1.8"[m
[31m-  provider:[m
[31m-    dependency: "direct main"[m
[31m-    description:[m
[31m-      name: provider[m
[31m-      sha256: c8a055ee5ce3fd98d6fc872478b03823ffdb448699c6ebdbbc71d59b596fd48c[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "6.1.2"[m
   shared_preferences:[m
     dependency: "direct main"[m
     description:[m
[36m@@ -572,7 +492,7 @@[m [mpackages:[m
     dependency: transitive[m
     description: flutter[m
     source: sdk[m
[31m-    version: "0.0.0"[m
[32m+[m[32m    version: "0.0.99"[m
   source_span:[m
     dependency: transitive[m
     description:[m
[36m@@ -585,10 +505,10 @@[m [mpackages:[m
     dependency: transitive[m
     description:[m
       name: stack_trace[m
[31m-      sha256: "9f47fd3630d76be3ab26f0ee06d213679aa425996925ff3feffdec504931c377"[m
[32m+[m[32m      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"[m
       url: "https://pub.dev"[m
     source: hosted[m
[31m-    version: "1.12.0"[m
[32m+[m[32m    version: "1.11.1"[m
   stream_channel:[m
     dependency: transitive[m
     description:[m
[36m@@ -601,10 +521,10 @@[m [mpackages:[m
     dependency: transitive[m
     description:[m
       name: string_scanner[m
[31m-      sha256: "688af5ed3402a4bde5b3a6c15fd768dbf2621a614950b17f04626c431ab3c4c3"[m
[32m+[m[32m      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"[m
       url: "https://pub.dev"[m
     source: hosted[m
[31m-    version: "1.3.0"[m
[32m+[m[32m    version: "1.2.0"[m
   term_glyph:[m
     dependency: transitive[m
     description:[m
[36m@@ -617,10 +537,10 @@[m [mpackages:[m
     dependency: transitive[m
     description:[m
       name: test_api[m
[31m-      sha256: "664d3a9a64782fcdeb83ce9c6b39e78fd2971d4e37827b9b06c3aa1edc5e760c"[m
[32m+[m[32m      sha256: "5b8a98dafc4d5c4c9c72d8b31ab2b23fc13422348d2997120294d3bac86b4ddb"[m
       url: "https://pub.dev"[m
     source: hosted[m
[31m-    version: "0.7.3"[m
[32m+[m[32m    version: "0.7.2"[m
   timezone:[m
     dependency: transitive[m
     description:[m
[36m@@ -637,14 +557,6 @@[m [mpackages:[m
       url: "https://pub.dev"[m
     source: hosted[m
     version: "1.4.0"[m
[31m-  upower:[m
[31m-    dependency: transitive[m
[31m-    description:[m
[31m-      name: upower[m
[31m-      sha256: cf042403154751180affa1d15614db7fa50234bc2373cd21c3db666c38543ebf[m
[31m-      url: "https://pub.dev"[m
[31m-    source: hosted[m
[31m-    version: "0.7.0"[m
   vector_math:[m
     dependency: transitive[m
     description:[m
[36m@@ -657,10 +569,10 @@[m [mpackages:[m
     dependency: transitive[m
     description:[m
       name: vm_service[m
[31m-      sha256: f6be3ed8bd01289b34d679c2b62226f63c0e69f9fd2e50a6b3c1c729a961041b[m
[32m+[m[32m      sha256: "5c5f338a667b4c644744b661f309fb8080bb94b18a7e91ef1dbd343bed00ed6d"[m
       url: "https://pub.dev"[m
     source: hosted[m
[31m-    version: "14.3.0"[m
[32m+[m[32m    version: "14.2.5"[m
   web:[m
     dependency: transitive[m
     description:[m
[1mdiff --git a/pubspec.yaml b/pubspec.yaml[m
[1mindex d30a03f..4c8845e 100644[m
[1m--- a/pubspec.yaml[m
[1m+++ b/pubspec.yaml[m
[36m@@ -22,11 +22,6 @@[m [mdependencies:[m
   flutter_local_notifications: ^17.2.3[m
   awesome_notifications: ^0.10.0[m
   flutter_launcher_icons: ^0.14.1[m
[31m-  provider: ^6.1.2[m
[31m-  lottie: ^3.2.0[m
[31m-  google_fonts: ^6.2.1[m
[31m-  battery_plus: ^6.2.1[m
[31m-  fluttertoast: ^8.2.10[m
 [m
 dev_dependencies:[m
   flutter_test:[m
[36m@@ -46,5 +41,3 @@[m [mflutter:[m
   uses-material-design: true[m
   assets:[m
     - ./.env.local[m
[31m-    - assets/loading.json[m
[31m-    - assets/icon/icon_removed_background.png[m
[1mdiff --git a/windows/flutter/generated_plugin_registrant.cc b/windows/flutter/generated_plugin_registrant.cc[m
[1mindex fc5a3b9..ec4c172 100644[m
[1m--- a/windows/flutter/generated_plugin_registrant.cc[m
[1m+++ b/windows/flutter/generated_plugin_registrant.cc[m
[36m@@ -7,14 +7,11 @@[m
 #include "generated_plugin_registrant.h"[m
 [m
 #include <awesome_notifications/awesome_notifications_plugin_c_api.h>[m
[31m-#include <battery_plus/battery_plus_windows_plugin.h>[m
 #include <permission_handler_windows/permission_handler_windows_plugin.h>[m
 [m
 void RegisterPlugins(flutter::PluginRegistry* registry) {[m
   AwesomeNotificationsPluginCApiRegisterWithRegistrar([m
       registry->GetRegistrarForPlugin("AwesomeNotificationsPluginCApi"));[m
[31m-  BatteryPlusWindowsPluginRegisterWithRegistrar([m
[31m-      registry->GetRegistrarForPlugin("BatteryPlusWindowsPlugin"));[m
   PermissionHandlerWindowsPluginRegisterWithRegistrar([m
       registry->GetRegistrarForPlugin("PermissionHandlerWindowsPlugin"));[m
 }[m
[1mdiff --git a/windows/flutter/generated_plugins.cmake b/windows/flutter/generated_plugins.cmake[m
[1mindex ce66cf6..4c7c7e3 100644[m
[1m--- a/windows/flutter/generated_plugins.cmake[m
[1m+++ b/windows/flutter/generated_plugins.cmake[m
[36m@@ -4,7 +4,6 @@[m
 [m
 list(APPEND FLUTTER_PLUGIN_LIST[m
   awesome_notifications[m
[31m-  battery_plus[m
   permission_handler_windows[m
 )[m
 [m
