from datetime import datetime, date
from typing import Optional, List, Dict
from pydantic import BaseModel

class WebRegisterResponseModel(BaseModel):
    message: str
class WebLoginResponseModel(BaseModel):
    message: str
class AppLoginResponseModel(BaseModel):
    message: str
class PostResponseModel(BaseModel):
    status: str
    message: str
class PostResponseReturnIdModel(BaseModel):
    status: str
    message: str
    id: int
class PutResponseModel(BaseModel):
    status: str
    message: str
class DeleteResponseModel(BaseModel):
    status: str
    message: str
class RaceResponseModel(BaseModel):
    id: int
    name: str
    number_of_laps: int
    date: Optional[datetime]
    location: str
    start_coordinates: Optional[str]
    end_coordinates: Optional[str]
    image: Optional[str]
    phase_name: str
    series_name: str
class DriverRacesResponseModel(BaseModel):
    id: int
    name: str
    number_of_laps: int
    date: Optional[datetime]
    location: str
    event_phase_id: int
    dnf: bool
    finished: bool
class RaceDetailResponseModel(BaseModel):
    id: int
    name: str
    number_of_laps: int
    date: str
    location: str
    start_coordinates: str
    end_coordinates: str
    image: str
    event_phase_id: int
    series_id: int
class CarResponseModel(BaseModel):
    id: int
    maker: str
    type: str
    note: str
    default_driver_id: int
class CarModel(BaseModel):
    maker: str
    type: str
    note: str
    default_driver_id: int
class DriverResponseModel(BaseModel):
    id: int
    name: str
    surname: str
    city: str
    street: str
    postcode: str
    birth_date: str
    phone: Optional[str]
    email: str
    number: str
    web_user: str
    racebox_id: Optional[int]
class RaceboxResponseModel(BaseModel):
    id: int
    device_id: str
class EventResponseModel(BaseModel):
    id: int
    name: str
    number_of_laps: int
    date: str
    location: str
    start_coordinates: str
    end_coordinates: str
    image: str
    event_phase_id: int
    series_id: int
class CarCategoryResponseModel(BaseModel):
    id: int
    name: str
    description: str
class CarConfigurationResponseModel(BaseModel):
    id: int
    note: str
    power: int
    weight: int
    power_weight_ratio: float
    aero_upgrade: float
    excessive_modifications: int
    excessive_chamber: float
    liquid_leakage: int
    rear_lights: int
    safe: int
    street_legal_tires: float
    seat: float
    seatbelt: float
    widebody: float
    wide_tires: float
class CarConfiguration(BaseModel):
    note: str
    power: int
    weight: int
    power_weight_ratio: float
    aero_upgrade: float
    excessive_modifications: int
    excessive_chamber: float
    liquid_leakage: int
    rear_lights: int
    safe: int
    street_legal_tires: float
    seat: float
    seatbelt: float
    widebody: float
    wide_tires: float
class SeriesResponseModel(BaseModel):
    id: int
    name: str
    description: str
class EventPhaseResponseModel(BaseModel):
    id: int
    phase_name: str
    result_type: str
class EventRegistrationResponseModel(BaseModel):
    id: int
    user_id: int
    event_id: int
class PointsDefinitionResponseModel(BaseModel):
    id: int
    position: int
    points: int
class PointsDefinition(BaseModel):
    position: int
    points: int
class UserResponseModel(BaseModel):
    id: int
    username: str
    password: str
class User(BaseModel):
    username: str
    password: str
class PhaseNameResponseModel(BaseModel):
    name: str
class EventResultResponseModel(BaseModel):
    car_category_id: int
    category_name: str
    result_id: int
    event_phase_id: int
    event_registration_id: int
    total_time: str
    points: int
    position: int
    dnf: int
    driver_name: str
    driver_surname: str
    driver_email: str
    number: int
    phase_name: str
class TrainingQualificationResultResponseModel(BaseModel):
    position: int
    points: int
    number: int
    name: str
    surname: str
    car: str
    car_class: str
    best_lap: str

class EventDriverEventResultsResponseModel(BaseModel):
    lap: int
    time: str
class EventRegistrationsResponseModel(BaseModel):
    event_registration_id: int
    driver_name: str
    driver_surname: str
    car_maker: str
    car_type: str
    car_configuration_id: Optional[int]
    power_weight_ratio: Optional[float]
    category_name: Optional[str]
    excessive_modifications: float
    configuration_status: str
class EventResultsResponseModel(BaseModel):
    position: int
    points: int
    start_number: int
    dnf: bool
    finished: bool
    driver_name: str
    car: str
    total_time: str
    lap_times: List[str]

class EventResultsByCategoryResponseModel(BaseModel):
    category_id: int
    category_name: str
    results: List[EventResultsResponseModel]
class EventRegistrationDetailResponseModel(BaseModel):
    id: int
    driver_id: int
    car_id: int
    car_category_id: int
    car_configuration_id: Optional[int]
    event_id: int
class EventRegistrationFillData(BaseModel):
    driver_id: int
    car_id: int
    car_category_id: int
    car_configuration_id: Optional[int]
    event_id: int
    dnf: bool
    finished: bool
class GetAllEventRegistrations(BaseModel):
    id: int
    driver_id: int
    car_id: int
    car_category_id: int
    car_configuration_id: Optional[int]
    event_id: int
    dnf: bool
    finished: bool
class GetAllEventRegistrationsWithIds(BaseModel):
    id: int
    driver_id: int
    car_id: int
    car_category_id: int
    car_configuration_id: Optional[int]
    event_id: int
    dnf: bool
    finished: bool
class EventAverageRacePhaseResponseModel(BaseModel):
    total_racers: int
    average_time: str
    fastest_time: str
    slowest_time: str
class EventResultCategoryRacePhaseResponseModel(BaseModel):
    car_category_id: int
    category_name: str
    total_racers: int
    average_time: str
    fastest_time: str
    slowest_time: str
    total_dnf: int
class FlagCreate(BaseModel):
    name: str
    note: Optional[str]
class FlagsResponseModel(BaseModel):
    id: int
    name: str
    note: Optional[str]
class DriverRankingModel(BaseModel):
    name: str
    surname: str
    email: str
    race_number: int
    car_category: str
    points: int
    web_user: str
class GroupedSeriesEventResponseModel(BaseModel):
    series_id: int
    series_name: str
    year: int
    event_id: int
    event_name: str
    date: Optional[datetime]
    location: str
class EventResultDriverModel(BaseModel):
    position: int
    total_time: Optional[str]
    full_name: str
    web_user: Optional[str]


class EventResultPhaseModel(BaseModel):
    event_phase_id: int
    phase_name: str
    results: List[EventResultDriverModel]


class EventResultCategoryModel(BaseModel):
    car_category_id: int
    category_name: str
    phases: List[EventResultPhaseModel]


class EventResultsGroupedResponseModel(BaseModel):
    status: str
    message: str
    data: List[EventResultCategoryModel]

class DriverRankingModel(BaseModel):
    driver_id: int
    driver_name: str
    race_number: str
    car: str
    total_points: int
    races: Dict[str, int]
class DriverRankingModelApp(BaseModel):
    name: str
    surname: str
    email: str
    race_number: int
    car_category: str
    points: int
    web_user: str
class CategoryRankingModel(BaseModel):
    category: str
    drivers: List[DriverRankingModel]

class DetailedDriverRankingsResponseModel(BaseModel):
    rankings: List[CategoryRankingModel]